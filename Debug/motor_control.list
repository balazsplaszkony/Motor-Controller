
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b208  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800b3cc  0800b3cc  0001b3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b42c  0800b42c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b434  0800b434  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b434  0800b434  0001b434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800b43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f04  20000110  0800b54c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002014  0800b54c  00022014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5db  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d00  00000000  00000000  0003f71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00044420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00045cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015cef  00000000  00000000  00047398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006ef9  00000000  00000000  0005d087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00063f80  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006784  00000000  00000000  00063fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b3b4 	.word	0x0800b3b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	0800b3b4 	.word	0x0800b3b4

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <PIDInit>:
 *      Author: plasz
 */
#include "PID.h"
volatile PidController PID;

void PIDInit(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

	PID.Kd = 0.1;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <PIDInit+0x48>)
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <PIDInit+0x4c>)
 8000e5c:	609a      	str	r2, [r3, #8]
	PID.Ki = 2;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <PIDInit+0x48>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	605a      	str	r2, [r3, #4]
	PID.Kp = 2;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <PIDInit+0x48>)
 8000e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6c:	601a      	str	r2, [r3, #0]
	PID.integral = 0.0;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <PIDInit+0x48>)
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
	PID.last_error = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <PIDInit+0x48>)
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
	PID.output = 0;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <PIDInit+0x48>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
	PID.setpoint = 0;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <PIDInit+0x48>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
	PID.updated = false;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <PIDInit+0x48>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	771a      	strb	r2, [r3, #28]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	2000012c 	.word	0x2000012c
 8000ea0:	3dcccccd 	.word	0x3dcccccd

08000ea4 <PIDContollerUpdate>:

void PIDContollerUpdate(float measurement){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	ed87 0a01 	vstr	s0, [r7, #4]

	float error = PID.setpoint - measurement;
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000eb0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebc:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = PID.Kp * error;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	edc7 7a04 	vstr	s15, [r7, #16]

    PID.integral += PID.Ki * error;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000ed4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000ee2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000eec:	edc3 7a04 	vstr	s15, [r3, #16]

    // Limit the integral term to prevent windup
    if (PID.integral > MAX_PID_OUTPUT) {
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000ef2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ef6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000f9c <PIDContollerUpdate+0xf8>
 8000efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	dd03      	ble.n	8000f0c <PIDContollerUpdate+0x68>
    		PID.integral = MAX_PID_OUTPUT;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f06:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <PIDContollerUpdate+0xfc>)
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	e00b      	b.n	8000f24 <PIDContollerUpdate+0x80>
        }
    else if (PID.integral < MIN_PID_OUTPUT) {
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d503      	bpl.n	8000f24 <PIDContollerUpdate+0x80>
    		PID.integral = MIN_PID_OUTPUT;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
        }

    float derivative = PID.Kd * (error - PID.last_error);
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f26:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f30:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]

    PID.output = proportional + PID.integral + derivative;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f42:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f46:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5a:	ee17 2a90 	vmov	r2, s15
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f60:	619a      	str	r2, [r3, #24]

    // Limit the output to within the allowable range
    if (PID.output > MAX_PID_OUTPUT) {
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f6a:	d904      	bls.n	8000f76 <PIDContollerUpdate+0xd2>
    	PID.output = MAX_PID_OUTPUT;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f72:	619a      	str	r2, [r3, #24]
 8000f74:	e001      	b.n	8000f7a <PIDContollerUpdate+0xd6>
      }
    else if (PID.output < MIN_PID_OUTPUT) {
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f78:	699b      	ldr	r3, [r3, #24]
    	PID.output = MIN_PID_OUTPUT;
      }
    PID.output += PID_OUTPUT_OFFSET;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f84:	6193      	str	r3, [r2, #24]

    PID.last_error = error;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <PIDContollerUpdate+0xf4>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	6153      	str	r3, [r2, #20]

}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	2000012c 	.word	0x2000012c
 8000f9c:	43fa0000 	.word	0x43fa0000
 8000fa0:	43fa0000 	.word	0x43fa0000

08000fa4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_ADC1_Init+0x98>)
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <MX_ADC1_Init+0x9c>)
 8000fba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_ADC1_Init+0x98>)
 8000fbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_ADC1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_ADC1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_ADC1_Init+0x98>)
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <MX_ADC1_Init+0xa0>)
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_ADC1_Init+0x98>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_ADC1_Init+0x98>)
 8001000:	2201      	movs	r2, #1
 8001002:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_ADC1_Init+0x98>)
 8001006:	f001 f8fb 	bl	8002200 <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 fc78 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001014:	2301      	movs	r3, #1
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_ADC1_Init+0x98>)
 8001026:	f001 f92f 	bl	8002288 <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001030:	f000 fc68 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000014c 	.word	0x2000014c
 8001040:	40012000 	.word	0x40012000
 8001044:	0f000001 	.word	0x0f000001

08001048 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_ADC_MspInit+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d127      	bne.n	80010ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0x80>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a2:	2302      	movs	r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0x84>)
 80010b6:	f001 fc49 	bl	800294c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020000 	.word	0x40020000

080010d0 <CharacteristicInit>:

volatile Characteristic characteristic;
volatile Characteristic characteristic_new;

void CharacteristicInit()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	characteristic.maximum_RPM = 30;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <CharacteristicInit+0x54>)
 80010d6:	221e      	movs	r2, #30
 80010d8:	601a      	str	r2, [r3, #0]
	characteristic.baseRPM = 0;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <CharacteristicInit+0x54>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
	characteristic.rise_time = 2;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <CharacteristicInit+0x54>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	609a      	str	r2, [r3, #8]
	characteristic.fall_time = 2;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <CharacteristicInit+0x54>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	60da      	str	r2, [r3, #12]
	characteristic.hold_time = 5;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <CharacteristicInit+0x54>)
 80010ee:	2205      	movs	r2, #5
 80010f0:	611a      	str	r2, [r3, #16]
	characteristic.total_time = GetTotalTime();
 80010f2:	f000 f819 	bl	8001128 <GetTotalTime>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <CharacteristicInit+0x54>)
 80010fa:	6153      	str	r3, [r2, #20]
	characteristic.delta_rising = GetDeltaRising();
 80010fc:	f000 f826 	bl	800114c <GetDeltaRising>
 8001100:	4603      	mov	r3, r0
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <CharacteristicInit+0x54>)
 8001104:	6193      	str	r3, [r2, #24]
	characteristic.delta_falling = GetDeltaFalling();
 8001106:	f000 f833 	bl	8001170 <GetDeltaFalling>
 800110a:	4603      	mov	r3, r0
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <CharacteristicInit+0x54>)
 800110e:	61d3      	str	r3, [r2, #28]
	characteristic.updated = false;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <CharacteristicInit+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2020 	strb.w	r2, [r3, #32]
	characteristic.startable = false;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <CharacteristicInit+0x54>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000194 	.word	0x20000194

08001128 <GetTotalTime>:

	characteristic->updated = true;
}

uint32_t GetTotalTime()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	return characteristic.rise_time + characteristic.fall_time + characteristic.hold_time;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <GetTotalTime+0x20>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <GetTotalTime+0x20>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	441a      	add	r2, r3
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <GetTotalTime+0x20>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	4413      	add	r3, r2
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000194 	.word	0x20000194

0800114c <GetDeltaRising>:
uint32_t GetDeltaRising()
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	return (characteristic.maximum_RPM - characteristic.baseRPM) / characteristic.rise_time;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <GetDeltaRising+0x20>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <GetDeltaRising+0x20>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <GetDeltaRising+0x20>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000194 	.word	0x20000194

08001170 <GetDeltaFalling>:

uint32_t GetDeltaFalling()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (characteristic.maximum_RPM - characteristic.baseRPM) / characteristic.fall_time;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <GetDeltaFalling+0x20>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <GetDeltaFalling+0x20>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <GetDeltaFalling+0x20>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000194 	.word	0x20000194

08001194 <CalculateSetPoint>:

	return retval;
}

int32_t CalculateSetPoint(bool reset)
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	static uint32_t counter = 0;
	static float setpoint = 0;

	if(reset || counter == 0)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <CalculateSetPoint+0x18>
 80011a4:	4b7e      	ldr	r3, [pc, #504]	; (80013a0 <CalculateSetPoint+0x20c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10c      	bne.n	80011c6 <CalculateSetPoint+0x32>
	{
		counter = 0;
 80011ac:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <CalculateSetPoint+0x20c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
		setpoint = characteristic.baseRPM;
 80011b2:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <CalculateSetPoint+0x210>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	4b7a      	ldr	r3, [pc, #488]	; (80013a8 <CalculateSetPoint+0x214>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
 80011c4:	e0cb      	b.n	800135e <CalculateSetPoint+0x1ca>
//		 {
//	            counter = (counter + 1) % (MOTOR_TIM7_FREQ * totalTime);
//		 }
//		 else
//			 counter = 0;
		if(counter <= PID_FREQ * characteristic.rise_time)
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <CalculateSetPoint+0x20c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f95c 	bl	8000488 <__aeabi_ui2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <CalculateSetPoint+0x210>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f955 	bl	8000488 <__aeabi_ui2d>
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <CalculateSetPoint+0x218>)
 80011e4:	f7ff f9ca 	bl	800057c <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fc40 	bl	8000a74 <__aeabi_dcmple>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d022      	beq.n	8001240 <CalculateSetPoint+0xac>
				setpoint += (characteristic.delta_rising/PID_FREQ);
 80011fa:	4b6a      	ldr	r3, [pc, #424]	; (80013a4 <CalculateSetPoint+0x210>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f942 	bl	8000488 <__aeabi_ui2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <CalculateSetPoint+0x218>)
 800120a:	f7ff fae1 	bl	80007d0 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
 8001216:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <CalculateSetPoint+0x214>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f956 	bl	80004cc <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7fe fff2 	bl	8000210 <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc3c 	bl	8000ab0 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <CalculateSetPoint+0x214>)
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e08e      	b.n	800135e <CalculateSetPoint+0x1ca>

			else if(counter > PID_FREQ * characteristic.rise_time &&
 8001240:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <CalculateSetPoint+0x20c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f91f 	bl	8000488 <__aeabi_ui2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <CalculateSetPoint+0x210>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f918 	bl	8000488 <__aeabi_ui2d>
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <CalculateSetPoint+0x218>)
 800125e:	f7ff f98d 	bl	800057c <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4620      	mov	r0, r4
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff fc17 	bl	8000a9c <__aeabi_dcmpgt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01c      	beq.n	80012ae <CalculateSetPoint+0x11a>
					counter <= PID_FREQ * (characteristic.rise_time + characteristic.hold_time))
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <CalculateSetPoint+0x20c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f905 	bl	8000488 <__aeabi_ui2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <CalculateSetPoint+0x210>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <CalculateSetPoint+0x210>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8fb 	bl	8000488 <__aeabi_ui2d>
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <CalculateSetPoint+0x218>)
 8001298:	f7ff f970 	bl	800057c <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
			else if(counter > PID_FREQ * characteristic.rise_time &&
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7ff fbe6 	bl	8000a74 <__aeabi_dcmple>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d157      	bne.n	800135e <CalculateSetPoint+0x1ca>
			{
				;
			}

			else if((counter > PID_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <CalculateSetPoint+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8e8 	bl	8000488 <__aeabi_ui2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <CalculateSetPoint+0x210>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <CalculateSetPoint+0x210>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4413      	add	r3, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8de 	bl	8000488 <__aeabi_ui2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <CalculateSetPoint+0x218>)
 80012d2:	f7ff f953 	bl	800057c <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7ff fbdd 	bl	8000a9c <__aeabi_dcmpgt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03a      	beq.n	800135e <CalculateSetPoint+0x1ca>
					(counter <= GetTotalTime() * PID_FREQ))
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <CalculateSetPoint+0x20c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f8cb 	bl	8000488 <__aeabi_ui2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	f7ff ff17 	bl	8001128 <GetTotalTime>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8c3 	bl	8000488 <__aeabi_ui2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <CalculateSetPoint+0x218>)
 8001308:	f7ff f938 	bl	800057c <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
			else if((counter > PID_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff fbae 	bl	8000a74 <__aeabi_dcmple>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01f      	beq.n	800135e <CalculateSetPoint+0x1ca>
						setpoint -= (characteristic.delta_falling/PID_FREQ);
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <CalculateSetPoint+0x210>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8b0 	bl	8000488 <__aeabi_ui2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <CalculateSetPoint+0x218>)
 800132e:	f7ff fa4f 	bl	80007d0 <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <CalculateSetPoint+0x214>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8c4 	bl	80004cc <__aeabi_f2d>
 8001344:	4622      	mov	r2, r4
 8001346:	462b      	mov	r3, r5
 8001348:	f7fe ff60 	bl	800020c <__aeabi_dsub>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbac 	bl	8000ab0 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <CalculateSetPoint+0x214>)
 800135c:	6013      	str	r3, [r2, #0]

	}
	counter++;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <CalculateSetPoint+0x20c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <CalculateSetPoint+0x20c>)
 8001366:	6013      	str	r3, [r2, #0]
	counter = counter % ((uint32_t)PID_FREQ* GetTotalTime());
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <CalculateSetPoint+0x20c>)
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	f7ff fedc 	bl	8001128 <GetTotalTime>
 8001370:	4602      	mov	r2, r0
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fbb4 f2f3 	udiv	r2, r4, r3
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	1ae3      	subs	r3, r4, r3
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <CalculateSetPoint+0x20c>)
 8001386:	6013      	str	r3, [r2, #0]
	return setpoint;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <CalculateSetPoint+0x214>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15

}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001b8 	.word	0x200001b8
 80013a4:	20000194 	.word	0x20000194
 80013a8:	200001bc 	.word	0x200001bc
 80013ac:	40240000 	.word	0x40240000

080013b0 <enterCriticalSection>:
 *
 *  Created on: May 13, 2023
 *      Author: plasz
 */
#include "compontents.h"
void enterCriticalSection() {
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
    __disable_irq();  // Disable interrupts globally
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <exitCriticalSection>:

void exitCriticalSection() {
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80013c6:	b662      	cpsie	i
}
 80013c8:	bf00      	nop
    __enable_irq();  // Enable interrupts globally
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <GetDigits>:
#include "display.h"

volatile uint8_t Digits[2];

void GetDigits(uint8_t number)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	enterCriticalSection();
 80013de:	f7ff ffe7 	bl	80013b0 <enterCriticalSection>
	//diagnosztika, hogy jó értéket ad-e az encoder, ha pörög a motor és 0 lesz a kijelzőn, akkor tudom, hogy nem
	if(number > 99)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b63      	cmp	r3, #99	; 0x63
 80013e6:	d901      	bls.n	80013ec <GetDigits+0x18>
		number = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]

    Digits[0] = convertTo7Segment((number % 10));
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <GetDigits+0x64>)
 80013f0:	fba3 1302 	umull	r1, r3, r3, r2
 80013f4:	08d9      	lsrs	r1, r3, #3
 80013f6:	460b      	mov	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f81c 	bl	8001440 <convertTo7Segment>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <GetDigits+0x68>)
 800140e:	701a      	strb	r2, [r3, #0]
	Digits[1] = convertTo7Segment((number / 10));
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <GetDigits+0x64>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f80f 	bl	8001440 <convertTo7Segment>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <GetDigits+0x68>)
 8001428:	705a      	strb	r2, [r3, #1]
    exitCriticalSection();
 800142a:	f7ff ffca 	bl	80013c2 <exitCriticalSection>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	cccccccd 	.word	0xcccccccd
 800143c:	200001c0 	.word	0x200001c0

08001440 <convertTo7Segment>:

uint8_t convertTo7Segment(uint8_t value) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
    switch (value) {
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d835      	bhi.n	80014bc <convertTo7Segment+0x7c>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <convertTo7Segment+0x18>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001481 	.word	0x08001481
 800145c:	08001487 	.word	0x08001487
 8001460:	0800148d 	.word	0x0800148d
 8001464:	08001493 	.word	0x08001493
 8001468:	08001499 	.word	0x08001499
 800146c:	0800149f 	.word	0x0800149f
 8001470:	080014a5 	.word	0x080014a5
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b7 	.word	0x080014b7
        case 0:
            value = 0x3F;
 8001480:	233f      	movs	r3, #63	; 0x3f
 8001482:	71fb      	strb	r3, [r7, #7]
            break;
 8001484:	e01d      	b.n	80014c2 <convertTo7Segment+0x82>
        case 1:
            value = 0x06;
 8001486:	2306      	movs	r3, #6
 8001488:	71fb      	strb	r3, [r7, #7]
            break;
 800148a:	e01a      	b.n	80014c2 <convertTo7Segment+0x82>
        case 2:
            value = 0x5B;
 800148c:	235b      	movs	r3, #91	; 0x5b
 800148e:	71fb      	strb	r3, [r7, #7]
            break;
 8001490:	e017      	b.n	80014c2 <convertTo7Segment+0x82>
        case 3:
            value = 0x4F;
 8001492:	234f      	movs	r3, #79	; 0x4f
 8001494:	71fb      	strb	r3, [r7, #7]
            break;
 8001496:	e014      	b.n	80014c2 <convertTo7Segment+0x82>
        case 4:
            value = 0x66;
 8001498:	2366      	movs	r3, #102	; 0x66
 800149a:	71fb      	strb	r3, [r7, #7]
            break;
 800149c:	e011      	b.n	80014c2 <convertTo7Segment+0x82>
        case 5:
            value = 0x6D;
 800149e:	236d      	movs	r3, #109	; 0x6d
 80014a0:	71fb      	strb	r3, [r7, #7]
            break;
 80014a2:	e00e      	b.n	80014c2 <convertTo7Segment+0x82>
        case 6:
            value = 0x7D;
 80014a4:	237d      	movs	r3, #125	; 0x7d
 80014a6:	71fb      	strb	r3, [r7, #7]
            break;
 80014a8:	e00b      	b.n	80014c2 <convertTo7Segment+0x82>
        case 7:
            value = 0x07;
 80014aa:	2307      	movs	r3, #7
 80014ac:	71fb      	strb	r3, [r7, #7]
            break;
 80014ae:	e008      	b.n	80014c2 <convertTo7Segment+0x82>
        case 8:
            value = 0x7F;
 80014b0:	237f      	movs	r3, #127	; 0x7f
 80014b2:	71fb      	strb	r3, [r7, #7]
            break;
 80014b4:	e005      	b.n	80014c2 <convertTo7Segment+0x82>
        case 9:
            value = 0x6F;
 80014b6:	236f      	movs	r3, #111	; 0x6f
 80014b8:	71fb      	strb	r3, [r7, #7]
            break;
 80014ba:	e002      	b.n	80014c2 <convertTo7Segment+0x82>

        default:
            // Handle unsupported values or return a default value
            value = 0x00;  // Blank segment (all segments turned off)
 80014bc:	2300      	movs	r3, #0
 80014be:	71fb      	strb	r3, [r7, #7]
            break;
 80014c0:	bf00      	nop
    }
    return value;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DisplayValue>:

void DisplayValue(int32_t value)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if(value < 0)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da02      	bge.n	80014e4 <DisplayValue+0x14>
		value = -value;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	425b      	negs	r3, r3
 80014e2:	607b      	str	r3, [r7, #4]
	GetDigits(value);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff73 	bl	80013d4 <GetDigits>
	SPI_EnableChip(true);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fba0 	bl	8001c34 <SPI_EnableChip>
	SPI_SEND(Digits, 2);
 80014f4:	2102      	movs	r1, #2
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <DisplayValue+0x3c>)
 80014f8:	f000 fbae 	bl	8001c58 <SPI_SEND>
	SPI_EnableChip(false);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 fb99 	bl	8001c34 <SPI_EnableChip>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200001c0 	.word	0x200001c0

08001510 <EnableDisplays>:

void EnableDisplays(bool enable)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, !enable);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <EnableDisplays+0x28>)
 800152a:	f001 fba3 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800

0800153c <InitEncoder>:
int32_t prevCounterValue = 0;
float rpm = 0;

// TIM3 inicializálása QEP üzemmódban
void InitEncoder()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0

	  // Initialize GPIO and Timer 1 for encoder interface

	  // Configure GPIO pins for encoder signals
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	2302      	movs	r3, #2
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001554:	2301      	movs	r3, #1
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <InitEncoder+0xb0>)
 8001560:	f001 f9f4 	bl	800294c <HAL_GPIO_Init>

		// APB1: 84 MHz (TIMx: 168 MHz)
		__TIM1_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <InitEncoder+0xb4>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <InitEncoder+0xb4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6453      	str	r3, [r2, #68]	; 0x44
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <InitEncoder+0xb4>)
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

	  // Configure Timer 1 for encoder mode
	  Tim1Handle.Instance = TIM1;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <InitEncoder+0xb8>)
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <InitEncoder+0xbc>)
 8001584:	601a      	str	r2, [r3, #0]
	  Tim1Handle.Init.Prescaler = 0;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <InitEncoder+0xb8>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
	  Tim1Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <InitEncoder+0xb8>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
	  Tim1Handle.Init.Period = 0xFFFF;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <InitEncoder+0xb8>)
 8001594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001598:	60da      	str	r2, [r3, #12]
	  Tim1Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <InitEncoder+0xb8>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	  Tim1Handle.Init.RepetitionCounter = 0;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <InitEncoder+0xb8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
	  Tim1Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <InitEncoder+0xb8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

	  // Configure encoder interface mode
	  TIM_Encoder_InitTypeDef encoderConfig;
	  encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ac:	2303      	movs	r3, #3
 80015ae:	60bb      	str	r3, [r7, #8]
	  encoderConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
	  encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
	  encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
	  encoderConfig.IC1Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
	  encoderConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
	  encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
	  encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
	  encoderConfig.IC2Filter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

	  HAL_TIM_Encoder_Init(&Tim1Handle, &encoderConfig);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <InitEncoder+0xb8>)
 80015d8:	f004 fcd0 	bl	8005f7c <HAL_TIM_Encoder_Init>
	  HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_ALL);
 80015dc:	213c      	movs	r1, #60	; 0x3c
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <InitEncoder+0xb8>)
 80015e0:	f004 fd7c 	bl	80060dc <HAL_TIM_Encoder_Start>
}
 80015e4:	bf00      	nop
 80015e6:	3740      	adds	r7, #64	; 0x40
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	200001c4 	.word	0x200001c4
 80015f8:	40010000 	.word	0x40010000

080015fc <HallEncoder_GetRPM>:
//    return (uint16_t)rpm;
//
//}

int32_t HallEncoder_GetRPM()
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
  int32_t counterValue = __HAL_TIM_GET_COUNTER(&Tim1Handle);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HallEncoder_GetRPM+0x60>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	607b      	str	r3, [r7, #4]

  // Calculate delta counter value
  int32_t deltaCounter = counterValue - prevCounterValue;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HallEncoder_GetRPM+0x64>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	603b      	str	r3, [r7, #0]

  // Update previous counter value
  prevCounterValue = counterValue;
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HallEncoder_GetRPM+0x64>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]

  // Calculate RPM based on the resolution and time interval (100 microseconds)
  //rpm = (deltaCounter * 60  ) / 16*1000;
  rpm = deltaCounter* 10000/(2096*60);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HallEncoder_GetRPM+0x68>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	441a      	add	r2, r3
 800162c:	1412      	asrs	r2, r2, #16
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HallEncoder_GetRPM+0x6c>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
  return rpm;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HallEncoder_GetRPM+0x6c>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 3a90 	vmov	r3, s15
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200001c4 	.word	0x200001c4
 8001660:	2000020c 	.word	0x2000020c
 8001664:	856817f9 	.word	0x856817f9
 8001668:	20000210 	.word	0x20000210

0800166c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <MX_GPIO_Init+0x148>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	4830      	ldr	r0, [pc, #192]	; (80017b8 <MX_GPIO_Init+0x14c>)
 80016f8:	f001 fabc 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedPC_Pin|LedPos_Pin|CS_SEG_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f241 0190 	movw	r1, #4240	; 0x1090
 8001702:	482e      	ldr	r0, [pc, #184]	; (80017bc <MX_GPIO_Init+0x150>)
 8001704:	f001 fab6 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170e:	482b      	ldr	r0, [pc, #172]	; (80017bc <MX_GPIO_Init+0x150>)
 8001710:	f001 fab0 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedSpeed_GPIO_Port, LedSpeed_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	4829      	ldr	r0, [pc, #164]	; (80017c0 <MX_GPIO_Init+0x154>)
 800171a:	f001 faab 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001724:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4821      	ldr	r0, [pc, #132]	; (80017bc <MX_GPIO_Init+0x150>)
 8001736:	f001 f909 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800173a:	2320      	movs	r3, #32
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4819      	ldr	r0, [pc, #100]	; (80017b8 <MX_GPIO_Init+0x14c>)
 8001752:	f001 f8fb 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LedPC_Pin|LedPos_Pin|EN_SEG_Pin|CS_SEG_Pin;
 8001756:	f241 4390 	movw	r3, #5264	; 0x1490
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_GPIO_Init+0x150>)
 8001770:	f001 f8ec 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PC_Pin|ModeSelect_Pin|asd_Pin;
 8001774:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_GPIO_Init+0x154>)
 800178a:	f001 f8df 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedSpeed_Pin;
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedSpeed_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_GPIO_Init+0x154>)
 80017a6:	f001 f8d1 	bl	800294c <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020400 	.word	0x40020400

080017c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c8:	f000 fc84 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017cc:	f000 f82e 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d0:	f7ff ff4c 	bl	800166c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017d4:	f000 fbda 	bl	8001f8c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80017d8:	f000 f986 	bl	8001ae8 <MX_SPI2_Init>
  MX_ADC1_Init();
 80017dc:	f7ff fbe2 	bl	8000fa4 <MX_ADC1_Init>
  MX_TIM10_Init();
 80017e0:	f000 fac6 	bl	8001d70 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 80017e4:	f009 f838 	bl	800a858 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //InitAF();
  InitMotorPWM();
 80017e8:	f000 f892 	bl	8001910 <InitMotorPWM>
  InitEncoder();
 80017ec:	f7ff fea6 	bl	800153c <InitEncoder>
  CharacteristicInit();
 80017f0:	f7ff fc6e 	bl	80010d0 <CharacteristicInit>
  PIDInit();
 80017f4:	f7ff fb2e 	bl	8000e54 <PIDInit>
 // SetPWM(900);
//  SetPWM(1000);
//  SetPWM(0);


  InitTimer();
 80017f8:	f000 fb00 	bl	8001dfc <InitTimer>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2140      	movs	r1, #64	; 0x40
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <main+0x60>)
 8001802:	f001 fa37 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2110      	movs	r1, #16
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <main+0x64>)
 800180c:	f001 fa32 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <main+0x64>)
 8001816:	f001 fa2d 	bl	8002c74 <HAL_GPIO_WritePin>
  EnableDisplays(true);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fe78 	bl	8001510 <EnableDisplays>
  //DisplayValue(88);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001820:	e7fe      	b.n	8001820 <main+0x5c>
 8001822:	bf00      	nop
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2234      	movs	r2, #52	; 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fdb2 	bl	800b3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SystemClock_Config+0xd0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <SystemClock_Config+0xd0>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <SystemClock_Config+0xd0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186c:	2300      	movs	r3, #0
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <SystemClock_Config+0xd4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <SystemClock_Config+0xd4>)
 8001876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <SystemClock_Config+0xd4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001892:	2302      	movs	r3, #2
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800189c:	2304      	movs	r3, #4
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018a0:	23a8      	movs	r3, #168	; 0xa8
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018a8:	2307      	movs	r3, #7
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 fb33 	bl	8004f20 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018c0:	f000 f820 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	2105      	movs	r1, #5
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fca8 	bl	8004238 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ee:	f000 f809 	bl	8001904 <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3750      	adds	r7, #80	; 0x50
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <InitMotorPWM>:
TIM_HandleTypeDef Tim3Handle;
TIM_OC_InitTypeDef sConfigOC_PWM_Channel1;
TIM_OC_InitTypeDef sConfigOC_PWM_Channel2;
// TIM1 inicializálása PWM üzemmódban
void InitMotorPWM()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
	  // Enable GPIO clocks
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <InitMotorPWM+0x138>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <InitMotorPWM+0x138>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <InitMotorPWM+0x138>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <InitMotorPWM+0x138>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <InitMotorPWM+0x138>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <InitMotorPWM+0x138>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

	  // Configure GPIO pins as alternate functions
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;  // Example pin for channel 1
 800195a:	2340      	movs	r3, #64	; 0x40
 800195c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // Example timer and alternate function
 800195e:	2302      	movs	r3, #2
 8001960:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4838      	ldr	r0, [pc, #224]	; (8001a4c <InitMotorPWM+0x13c>)
 800196a:	f000 ffef 	bl	800294c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;  // Example pin for channel 2
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // Example timer and alternate function
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4833      	ldr	r0, [pc, #204]	; (8001a4c <InitMotorPWM+0x13c>)
 800197e:	f000 ffe5 	bl	800294c <HAL_GPIO_Init>

	  // Enable timer clock
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <InitMotorPWM+0x138>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <InitMotorPWM+0x138>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <InitMotorPWM+0x138>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

	  // Configure timer
	  Tim3Handle.Instance = TIM3;  // Example timer
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <InitMotorPWM+0x140>)
 80019a0:	4a2c      	ldr	r2, [pc, #176]	; (8001a54 <InitMotorPWM+0x144>)
 80019a2:	601a      	str	r2, [r3, #0]
	  Tim3Handle.Init.Prescaler = 3;
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <InitMotorPWM+0x140>)
 80019a6:	2203      	movs	r2, #3
 80019a8:	605a      	str	r2, [r3, #4]
	  Tim3Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <InitMotorPWM+0x140>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	  Tim3Handle.Init.Period = 1000;  // Example period (1kHz frequency)
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <InitMotorPWM+0x140>)
 80019b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b6:	60da      	str	r2, [r3, #12]
	  Tim3Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <InitMotorPWM+0x140>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
	  Tim3Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <InitMotorPWM+0x140>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	619a      	str	r2, [r3, #24]
	  HAL_TIM_PWM_Init(&Tim3Handle);
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <InitMotorPWM+0x140>)
 80019c6:	f004 f9b7 	bl	8005d38 <HAL_TIM_PWM_Init>

	  // Configure PWM channels
	  sConfigOC_PWM_Channel1.OCMode = TIM_OCMODE_PWM1;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <InitMotorPWM+0x148>)
 80019cc:	2260      	movs	r2, #96	; 0x60
 80019ce:	601a      	str	r2, [r3, #0]
	  sConfigOC_PWM_Channel1.Pulse = 500;  // Example duty cycle (50%)
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <InitMotorPWM+0x148>)
 80019d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019d6:	605a      	str	r2, [r3, #4]
	  sConfigOC_PWM_Channel1.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <InitMotorPWM+0x148>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
	  sConfigOC_PWM_Channel1.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <InitMotorPWM+0x148>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
	  sConfigOC_PWM_Channel1.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <InitMotorPWM+0x148>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
	  sConfigOC_PWM_Channel1.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <InitMotorPWM+0x148>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]

	  HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &sConfigOC_PWM_Channel1, TIM_CHANNEL_1);  // Example channel 1
 80019f2:	2200      	movs	r2, #0
 80019f4:	4918      	ldr	r1, [pc, #96]	; (8001a58 <InitMotorPWM+0x148>)
 80019f6:	4816      	ldr	r0, [pc, #88]	; (8001a50 <InitMotorPWM+0x140>)
 80019f8:	f004 fd06 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>

	  // Update the polarity for channel 2
	  sConfigOC_PWM_Channel2.OCMode = TIM_OCMODE_PWM1;
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <InitMotorPWM+0x14c>)
 80019fe:	2260      	movs	r2, #96	; 0x60
 8001a00:	601a      	str	r2, [r3, #0]
	  sConfigOC_PWM_Channel2.Pulse = 500;  // Example duty cycle (50%)
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a08:	605a      	str	r2, [r3, #4]
	  sConfigOC_PWM_Channel2.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	609a      	str	r2, [r3, #8]
	  sConfigOC_PWM_Channel2.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
	  sConfigOC_PWM_Channel2.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
	  sConfigOC_PWM_Channel2.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a22:	619a      	str	r2, [r3, #24]

	  HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &sConfigOC_PWM_Channel2, TIM_CHANNEL_2);  // Example channel 2
 8001a24:	2204      	movs	r2, #4
 8001a26:	490d      	ldr	r1, [pc, #52]	; (8001a5c <InitMotorPWM+0x14c>)
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <InitMotorPWM+0x140>)
 8001a2a:	f004 fced 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>

	  // Start PWM generation
	  HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_1);  // Example channel 1
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <InitMotorPWM+0x140>)
 8001a32:	f004 f9db 	bl	8005dec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_2);  // Example channel 2
 8001a36:	2104      	movs	r1, #4
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <InitMotorPWM+0x140>)
 8001a3a:	f004 f9d7 	bl	8005dec <HAL_TIM_PWM_Start>
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	20000254 	.word	0x20000254
 8001a54:	40000400 	.word	0x40000400
 8001a58:	2000029c 	.word	0x2000029c
 8001a5c:	200002b8 	.word	0x200002b8

08001a60 <SetPWM>:

void SetPWM(int32_t d)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if (d > MOTOR_D_MAX)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6e:	dd03      	ble.n	8001a78 <SetPWM+0x18>
	{
		d=MOTOR_D_MAX;
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e004      	b.n	8001a82 <SetPWM+0x22>
	}
	else if (d < 0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da01      	bge.n	8001a82 <SetPWM+0x22>
	{
		d=0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
	}

	// PWM csatornák beállítása SetMotorCh1 és SetMotorCh2 hívásával
	SetMotorCh1(d);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f80a 	bl	8001aa0 <SetMotorCh1>
	SetMotorCh2(d);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f817 	bl	8001ac4 <SetMotorCh2>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <SetMotorCh1>:

void SetMotorCh1(uint16_t d)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR1 = d;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SetMotorCh1+0x20>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000254 	.word	0x20000254

08001ac4 <SetMotorCh2>:

void SetMotorCh2(uint16_t d)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR2 = d;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SetMotorCh2+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000254 	.word	0x20000254

08001ae8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b1c:	2218      	movs	r2, #24
 8001b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_SPI2_Init+0x64>)
 8001b3a:	f003 fc8f 	bl	800545c <HAL_SPI_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b44:	f7ff fede 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200002d4 	.word	0x200002d4
 8001b50:	40003800 	.word	0x40003800

08001b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <HAL_SPI_MspInit+0xd0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d152      	bne.n	8001c1c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_SPI_MspInit+0xd4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4811      	ldr	r0, [pc, #68]	; (8001c2c <HAL_SPI_MspInit+0xd8>)
 8001be6:	f000 feb1 	bl	800294c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	480a      	ldr	r0, [pc, #40]	; (8001c30 <HAL_SPI_MspInit+0xdc>)
 8001c08:	f000 fea0 	bl	800294c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2024      	movs	r0, #36	; 0x24
 8001c12:	f000 fe42 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001c16:	2024      	movs	r0, #36	; 0x24
 8001c18:	f000 fe5b 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40003800 	.word	0x40003800
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020400 	.word	0x40020400

08001c34 <SPI_EnableChip>:
  }
}

/* USER CODE BEGIN 1 */
void SPI_EnableChip(uint8_t enable)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SEG_GPIO_Port, CS_SEG_Pin, enable);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <SPI_EnableChip+0x20>)
 8001c48:	f001 f814 	bl	8002c74 <HAL_GPIO_WritePin>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40020800 	.word	0x40020800

08001c58 <SPI_SEND>:

HAL_StatusTypeDef SPI_SEND(uint8_t* pData, uint16_t datasize)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi2, pData, datasize, HAL_MAX_DELAY);
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <SPI_SEND+0x24>)
 8001c6e:	f003 fc7e 	bl	800556e <HAL_SPI_Transmit>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200002d4 	.word	0x200002d4

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_MspInit+0x4c>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 fa2c 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <SPI2_IRQHandler+0x10>)
 8001d2a:	f003 fd5d 	bl	80057e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002d4 	.word	0x200002d4

08001d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <OTG_FS_IRQHandler+0x10>)
 8001d3e:	f001 f909 	bl	8002f54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200018e8 	.word	0x200018e8

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <MX_TIM10_Init+0x44>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM10_Init+0x40>)
 8001d9c:	f003 ff0c 	bl	8005bb8 <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001da6:	f7ff fdad 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000032c 	.word	0x2000032c
 8001db4:	40014400 	.word	0x40014400

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10d      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_TIM_Base_MspInit+0x40>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40014400 	.word	0x40014400
 8001df8:	40023800 	.word	0x40023800

08001dfc <InitTimer>:

TIM_HandleTypeDef Tim7Handle;

// TIM7 inicializálása 100 us időzítőnek
void InitTimer()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	// APB1: 42 MHz (TIMx: 84 MHz)
	__TIM7_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <InitTimer+0x70>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <InitTimer+0x70>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <InitTimer+0x70>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

	// TIM7: 10 kHz (TIM7_FREQ)
	Tim7Handle.Instance = TIM7;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <InitTimer+0x74>)
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <InitTimer+0x78>)
 8001e22:	601a      	str	r2, [r3, #0]
	Tim7Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <InitTimer+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
	Tim7Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <InitTimer+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	Tim7Handle.Init.Prescaler = 8399;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <InitTimer+0x74>)
 8001e32:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e36:	605a      	str	r2, [r3, #4]
	Tim7Handle.Init.Period = 1000;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <InitTimer+0x74>)
 8001e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3e:	60da      	str	r2, [r3, #12]
	Tim7Handle.State = HAL_TIM_STATE_RESET;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <InitTimer+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	HAL_TIM_Base_Init(&Tim7Handle);
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <InitTimer+0x74>)
 8001e4a:	f003 feb5 	bl	8005bb8 <HAL_TIM_Base_Init>
	//HAL_TIM_Base_Start(&Tim7Handle);


	HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2037      	movs	r0, #55	; 0x37
 8001e54:	f000 fd21 	bl	800289a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e58:	2037      	movs	r0, #55	; 0x37
 8001e5a:	f000 fd3a 	bl	80028d2 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&Tim7Handle);
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <InitTimer+0x74>)
 8001e60:	f003 fefa 	bl	8005c58 <HAL_TIM_Base_Start_IT>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	20000374 	.word	0x20000374
 8001e74:	40001400 	.word	0x40001400

08001e78 <TIM7_IRQHandler>:

// Megszakításkezelő a TIM7 időzítőhöz
void TIM7_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim7Handle);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM7_IRQHandler+0x10>)
 8001e7e:	f004 f9bb 	bl	80061f8 <HAL_TIM_IRQHandler>
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000374 	.word	0x20000374

08001e8c <TimerHandler>:



void TimerHandler()
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
//	}
//	i++;
//	i = i % 1000;


	int32_t measurement = HallEncoder_GetRPM();
 8001e92:	f7ff fbb3 	bl	80015fc <HallEncoder_GetRPM>
 8001e96:	6078      	str	r0, [r7, #4]
	if(fabs(measurement-last_measurement) > measurement && last_measurement != 0)
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <TimerHandler+0xd0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb01 	bl	80004a8 <__aeabi_i2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4614      	mov	r4, r2
 8001eac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe faf9 	bl	80004a8 <__aeabi_i2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fded 	bl	8000a9c <__aeabi_dcmpgt>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <TimerHandler+0x4a>
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <TimerHandler+0xd0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <TimerHandler+0x4a>
		measurement = last_measurement;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <TimerHandler+0xd0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	607b      	str	r3, [r7, #4]

	DisplayValue(measurement);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fafa 	bl	80014d0 <DisplayValue>
	if(reset)
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <TimerHandler+0xd4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d014      	beq.n	8001f0e <TimerHandler+0x82>
	{
		PID.setpoint = CalculateSetPoint(reset);
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <TimerHandler+0xd4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f94e 	bl	8001194 <CalculateSetPoint>
 8001ef8:	ee07 0a90 	vmov	s15, r0
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <TimerHandler+0xd8>)
 8001f02:	edc3 7a03 	vstr	s15, [r3, #12]
		reset = 0;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <TimerHandler+0xd4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e010      	b.n	8001f30 <TimerHandler+0xa4>
	}
	else{
		PID.setpoint = CalculateSetPoint(reset);
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <TimerHandler+0xd4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f939 	bl	8001194 <CalculateSetPoint>
 8001f22:	ee07 0a90 	vmov	s15, r0
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <TimerHandler+0xd8>)
 8001f2c:	edc3 7a03 	vstr	s15, [r3, #12]
	}

		PIDContollerUpdate(measurement);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f7fe ffb1 	bl	8000ea4 <PIDContollerUpdate>
		SetPWM(PID.output);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <TimerHandler+0xd8>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fd8a 	bl	8001a60 <SetPWM>
	last_measurement = measurement;
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <TimerHandler+0xd0>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
//	a = a % 100;
//	i = i% 100;
//	//SetPWM(PID.output);


}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003bc 	.word	0x200003bc
 8001f60:	20000004 	.word	0x20000004
 8001f64:	2000012c 	.word	0x2000012c

08001f68 <HAL_TIM_PeriodElapsedCallback>:
// Megszakításkezelő callback a Timer megszakításkezelőhöz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        TimerHandler();
 8001f7a:	f7ff ff87 	bl	8001e8c <TimerHandler>
    }
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40001400 	.word	0x40001400

08001f8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <MX_USART2_UART_Init+0x60>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fc4:	f004 fd93 	bl	8006aee <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7ff fc99 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <MX_USART2_UART_Init+0x5c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200003c0 	.word	0x200003c0
 8001fec:	40004400 	.word	0x40004400

08001ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_UART_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_UART_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_UART_MspInit+0x88>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_UART_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_UART_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_UART_MspInit+0x88>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_UART_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800204a:	230c      	movs	r3, #12
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	2307      	movs	r3, #7
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_UART_MspInit+0x8c>)
 8002066:	f000 fc71 	bl	800294c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40004400 	.word	0x40004400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002086:	490e      	ldr	r1, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800209c:	4c0b      	ldr	r4, [pc, #44]	; (80020cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020aa:	f7ff fe4f 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f009 f947 	bl	800b340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fb87 	bl	80017c4 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80020c4:	0800b43c 	.word	0x0800b43c
  ldr r2, =_sbss
 80020c8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80020cc:	20002014 	.word	0x20002014

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 fbc1 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	2000      	movs	r0, #0
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fdba 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fbd9 	bl	80028ee <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 fba1 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	2000000c 	.word	0x2000000c
 8002174:	20000008 	.word	0x20000008

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000404 	.word	0x20000404

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000404 	.word	0x20000404

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c

08002200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e033      	b.n	800227e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe ff12 	bl	8001048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002246:	f023 0302 	bic.w	r3, r3, #2
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f94a 	bl	80024ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
 800226e:	e001      	b.n	8002274 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e113      	b.n	80024cc <HAL_ADC_ConfigChannel+0x244>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d925      	bls.n	8002300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	3b1e      	subs	r3, #30
 80022ca:	2207      	movs	r2, #7
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43da      	mvns	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	400a      	ands	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68d9      	ldr	r1, [r3, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4403      	add	r3, r0
 80022f2:	3b1e      	subs	r3, #30
 80022f4:	409a      	lsls	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	e022      	b.n	8002346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	2207      	movs	r2, #7
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	400a      	ands	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	4603      	mov	r3, r0
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4403      	add	r3, r0
 800233c:	409a      	lsls	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b06      	cmp	r3, #6
 800234c:	d824      	bhi.n	8002398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b05      	subs	r3, #5
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b05      	subs	r3, #5
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
 8002396:	e04c      	b.n	8002432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d824      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3b23      	subs	r3, #35	; 0x23
 80023b2:	221f      	movs	r2, #31
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43da      	mvns	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	400a      	ands	r2, r1
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b23      	subs	r3, #35	; 0x23
 80023dc:	fa00 f203 	lsl.w	r2, r0, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
 80023e8:	e023      	b.n	8002432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b41      	subs	r3, #65	; 0x41
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b41      	subs	r3, #65	; 0x41
 8002426:	fa00 f203 	lsl.w	r2, r0, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_ADC_ConfigChannel+0x250>)
 8002434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_ADC_ConfigChannel+0x254>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10f      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1d8>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d10b      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_ADC_ConfigChannel+0x254>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_ADC_ConfigChannel+0x258>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <HAL_ADC_ConfigChannel+0x1f4>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b11      	cmp	r3, #17
 800247a:	d122      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_ConfigChannel+0x258>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_ADC_ConfigChannel+0x25c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_ADC_ConfigChannel+0x260>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	0c9a      	lsrs	r2, r3, #18
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	40012000 	.word	0x40012000
 80024e0:	10000012 	.word	0x10000012
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <ADC_Init+0x1f0>)
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <ADC_Init+0x1f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e00f      	b.n	80025ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0202 	bic.w	r2, r2, #2
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
 8002604:	005a      	lsls	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002626:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	3b01      	subs	r3, #1
 8002644:	035a      	lsls	r2, r3, #13
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e007      	b.n	8002660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	3b01      	subs	r3, #1
 800267c:	051a      	lsls	r2, r3, #20
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a2:	025a      	lsls	r2, r3, #9
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	029a      	lsls	r2, r3, #10
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40012300 	.word	0x40012300
 80026e0:	0f000001 	.word	0x0f000001

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e00c      	b.n	800293e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2205      	movs	r2, #5
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e165      	b.n	8002c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 8154 	bne.w	8002c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	2b02      	cmp	r3, #2
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ae 	beq.w	8002c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a5c      	ldr	r2, [pc, #368]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x308>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x21a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x216>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x212>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x314>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x20e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_GPIO_Init+0x318>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x20a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_GPIO_Init+0x31c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x206>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <HAL_GPIO_Init+0x320>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x202>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00c      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e00a      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b52:	2305      	movs	r3, #5
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002baa:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f ae96 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca8:	b08f      	sub	sp, #60	; 0x3c
 8002caa:	af0a      	add	r7, sp, #40	; 0x28
 8002cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e116      	b.n	8002ee6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f007 ffbc 	bl	800ac50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 facf 	bl	800729a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	687e      	ldr	r6, [r7, #4]
 8002d04:	466d      	mov	r5, sp
 8002d06:	f106 0410 	add.w	r4, r6, #16
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f004 f9a6 	bl	8007070 <USB_CoreInit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0d7      	b.n	8002ee6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fabd 	bl	80072bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e04a      	b.n	8002dde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	333d      	adds	r3, #61	; 0x3d
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	333c      	adds	r3, #60	; 0x3c
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	b298      	uxth	r0, r3
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3344      	adds	r3, #68	; 0x44
 8002d84:	4602      	mov	r2, r0
 8002d86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3340      	adds	r3, #64	; 0x40
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3348      	adds	r3, #72	; 0x48
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	334c      	adds	r3, #76	; 0x4c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3af      	bcc.n	8002d48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e044      	b.n	8002e78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	3301      	adds	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3b5      	bcc.n	8002dee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	687e      	ldr	r6, [r7, #4]
 8002e8a:	466d      	mov	r5, sp
 8002e8c:	f106 0410 	add.w	r4, r6, #16
 8002e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea0:	1d33      	adds	r3, r6, #4
 8002ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f004 fa55 	bl	8007354 <USB_DevInit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e014      	b.n	8002ee6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f001 f98b 	bl	80041f0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f005 fb97 	bl	8008612 <USB_DevDisconnect>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_Start+0x1c>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e020      	b.n	8002f4c <HAL_PCD_Start+0x5e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d109      	bne.n	8002f2e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 f9a0 	bl	8007278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fb47 	bl	80085d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08d      	sub	sp, #52	; 0x34
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 fc05 	bl	800877a <USB_GetMode>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 84b7 	bne.w	80038e6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 fb69 	bl	8008654 <USB_ReadInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 84ad 	beq.w	80038e4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fb56 	bl	8008654 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 0202 	and.w	r2, r2, #2
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 fb44 	bl	8008654 <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d161      	bne.n	800309a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0210 	bic.w	r2, r2, #16
 8002fe4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	0c5b      	lsrs	r3, r3, #17
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	2b02      	cmp	r3, #2
 8003010:	d124      	bne.n	800305c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d035      	beq.n	800308a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6a38      	ldr	r0, [r7, #32]
 8003032:	f005 f97b 	bl	800832c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003042:	441a      	add	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003054:	441a      	add	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
 800305a:	e016      	b.n	800308a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	0c5b      	lsrs	r3, r3, #17
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	2b06      	cmp	r3, #6
 8003066:	d110      	bne.n	800308a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800306e:	2208      	movs	r2, #8
 8003070:	4619      	mov	r1, r3
 8003072:	6a38      	ldr	r0, [r7, #32]
 8003074:	f005 f95a 	bl	800832c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003084:	441a      	add	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0210 	orr.w	r2, r2, #16
 8003098:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 fad8 	bl	8008654 <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ae:	f040 80a7 	bne.w	8003200 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 fadd 	bl	800867a <USB_ReadDevAllOutEpInterrupt>
 80030c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030c2:	e099      	b.n	80031f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 808e 	beq.w	80031ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 fb01 	bl	80086e2 <USB_ReadDevOutEPInterrupt>
 80030e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	2301      	movs	r3, #1
 80030fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 feef 	bl	8003ee4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	2308      	movs	r3, #8
 8003120:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 ffc5 	bl	80040b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2310      	movs	r3, #16
 8003144:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d030      	beq.n	80031b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d109      	bne.n	8003170 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800316e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	78db      	ldrb	r3, [r3, #3]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d108      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f007 fe74 	bl	800ae88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2302      	movs	r3, #2
 80031b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	2320      	movs	r3, #32
 80031cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	3301      	adds	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f af62 	bne.w	80030c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f005 fa25 	bl	8008654 <USB_ReadInterrupts>
 800320a:	4603      	mov	r3, r0
 800320c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003214:	f040 80db 	bne.w	80033ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f005 fa46 	bl	80086ae <USB_ReadDevAllInEpInterrupt>
 8003222:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003228:	e0cd      	b.n	80033c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80c2 	beq.w	80033ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f005 fa6c 	bl	800871e <USB_ReadDevInEPInterrupt>
 8003246:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d057      	beq.n	8003302 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	69f9      	ldr	r1, [r7, #28]
 800326e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003272:	4013      	ands	r3, r2
 8003274:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003282:	461a      	mov	r2, r3
 8003284:	2301      	movs	r3, #1
 8003286:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d132      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334c      	adds	r3, #76	; 0x4c
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4403      	add	r3, r0
 80032b0:	3348      	adds	r3, #72	; 0x48
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4419      	add	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4403      	add	r3, r0
 80032c4:	334c      	adds	r3, #76	; 0x4c
 80032c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x3a2>
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3354      	adds	r3, #84	; 0x54
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032ee:	461a      	mov	r2, r3
 80032f0:	2101      	movs	r1, #1
 80032f2:	f005 fa73 	bl	80087dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f007 fd3e 	bl	800ad7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003318:	461a      	mov	r2, r3
 800331a:	2308      	movs	r3, #8
 800331c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	461a      	mov	r2, r3
 8003336:	2310      	movs	r3, #16
 8003338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	461a      	mov	r2, r3
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d023      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003362:	6a38      	ldr	r0, [r7, #32]
 8003364:	f004 f954 	bl	8007610 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	3338      	adds	r3, #56	; 0x38
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3304      	adds	r3, #4
 800337a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f007 fd8b 	bl	800aeac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	2302      	movs	r3, #2
 80033a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd08 	bl	8003dca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	3301      	adds	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f47f af2e 	bne.w	800322a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f005 f93e 	bl	8008654 <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e2:	d122      	bne.n	800342a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800340a:	2100      	movs	r1, #0
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f007 ff05 	bl	800b21c <HAL_PCDEx_LPM_Callback>
 8003412:	e002      	b.n	800341a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f007 fd29 	bl	800ae6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f005 f910 	bl	8008654 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d112      	bne.n	8003466 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f007 fce5 	bl	800ae20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003464:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 f8f2 	bl	8008654 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347a:	d121      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800348a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d111      	bne.n	80034ba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034b0:	2101      	movs	r1, #1
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f007 feb2 	bl	800b21c <HAL_PCDEx_LPM_Callback>
 80034b8:	e002      	b.n	80034c0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f007 fcb0 	bl	800ae20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f005 f8c5 	bl	8008654 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d4:	f040 80b7 	bne.w	8003646 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2110      	movs	r1, #16
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 f88c 	bl	8007610 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fc:	e046      	b.n	800358c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350a:	461a      	mov	r2, r3
 800350c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003510:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003522:	0151      	lsls	r1, r2, #5
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	440a      	add	r2, r1
 8003528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800352c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003530:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003544:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003556:	0151      	lsls	r1, r2, #5
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	440a      	add	r2, r1
 800355c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003560:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	440a      	add	r2, r1
 800357c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003580:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003584:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	3301      	adds	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003592:	429a      	cmp	r2, r3
 8003594:	d3b3      	bcc.n	80034fe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c2:	f043 030b 	orr.w	r3, r3, #11
 80035c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d8:	f043 030b 	orr.w	r3, r3, #11
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	e015      	b.n	800360c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80035f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003606:	f043 030b 	orr.w	r3, r3, #11
 800360a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800361e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003630:	461a      	mov	r2, r3
 8003632:	f005 f8d3 	bl	80087dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f005 f802 	bl	8008654 <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	d124      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f005 f898 	bl	8008796 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f004 f84d 	bl	800770a <USB_GetDevSpeed>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681c      	ldr	r4, [r3, #0]
 800367c:	f000 fec2 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8003680:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4620      	mov	r0, r4
 800368c:	f003 fd52 	bl	8007134 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f007 fb9c 	bl	800adce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 ffd2 	bl	8008654 <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d10a      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f007 fb79 	bl	800adb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f002 0208 	and.w	r2, r2, #8
 80036ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f004 ffbd 	bl	8008654 <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d122      	bne.n	800372a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036f0:	2301      	movs	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	e014      	b.n	8003720 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	b2db      	uxtb	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fb27 	bl	8003d68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	3301      	adds	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	429a      	cmp	r2, r3
 8003728:	d3e5      	bcc.n	80036f6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 ff90 	bl	8008654 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373e:	d13b      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e02b      	b.n	800379e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3340      	adds	r3, #64	; 0x40
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d115      	bne.n	8003798 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800376c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	da12      	bge.n	8003798 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	333f      	adds	r3, #63	; 0x3f
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fae8 	bl	8003d68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	3301      	adds	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3ce      	bcc.n	8003746 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 ff49 	bl	8008654 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037cc:	d155      	bne.n	800387a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e045      	b.n	8003860 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d12e      	bne.n	800385a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da2b      	bge.n	800385a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800380e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003812:	429a      	cmp	r2, r3
 8003814:	d121      	bne.n	800385a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003856:	6053      	str	r3, [r2, #4]
            break;
 8003858:	e007      	b.n	800386a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	3301      	adds	r3, #1
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	429a      	cmp	r2, r3
 8003868:	d3b4      	bcc.n	80037d4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fee8 	bl	8008654 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d10a      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f007 fb1d 	bl	800aed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fed2 	bl	8008654 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d115      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f007 fb0d 	bl	800aeec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e000      	b.n	80038e6 <HAL_PCD_IRQHandler+0x992>
      return;
 80038e4:	bf00      	nop
    }
  }
}
 80038e6:	3734      	adds	r7, #52	; 0x34
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd90      	pop	{r4, r7, pc}

080038ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_SetAddress+0x1a>
 8003902:	2302      	movs	r3, #2
 8003904:	e013      	b.n	800392e <HAL_PCD_SetAddress+0x42>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fe30 	bl	8008584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	4608      	mov	r0, r1
 8003940:	4611      	mov	r1, r2
 8003942:	461a      	mov	r2, r3
 8003944:	4603      	mov	r3, r0
 8003946:	70fb      	strb	r3, [r7, #3]
 8003948:	460b      	mov	r3, r1
 800394a:	803b      	strh	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0f      	bge.n	800397c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	705a      	strb	r2, [r3, #1]
 800397a:	e00f      	b.n	800399c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039a8:	883a      	ldrh	r2, [r7, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	78ba      	ldrb	r2, [r7, #2]
 80039b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039c6:	78bb      	ldrb	r3, [r7, #2]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d102      	bne.n	80039d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_PCD_EP_Open+0xaa>
 80039dc:	2302      	movs	r3, #2
 80039de:	e00e      	b.n	80039fe <HAL_PCD_EP_Open+0xc8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 feb0 	bl	8007754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80039fc:	7afb      	ldrb	r3, [r7, #11]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da0f      	bge.n	8003a3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3338      	adds	r3, #56	; 0x38
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	705a      	strb	r2, [r3, #1]
 8003a38:	e00f      	b.n	8003a5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3304      	adds	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_Close+0x6e>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Close+0x8c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 feee 	bl	8007864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d102      	bne.n	8003af6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	f004 f9cd 	bl	8007eac <USB_EP0StartXfer>
 8003b12:	e008      	b.n	8003b26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	f003 ff7b 	bl	8007a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3338      	adds	r3, #56	; 0x38
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	f004 f96b 	bl	8007eac <USB_EP0StartXfer>
 8003bd6:	e008      	b.n	8003bea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	f003 ff19 	bl	8007a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d901      	bls.n	8003c12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e050      	b.n	8003cb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da0f      	bge.n	8003c3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3338      	adds	r3, #56	; 0x38
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	705a      	strb	r2, [r3, #1]
 8003c38:	e00d      	b.n	8003c56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_SetStall+0x82>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01e      	b.n	8003cb4 <HAL_PCD_EP_SetStall+0xc0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fba9 	bl	80083dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	b2d9      	uxtb	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f004 fd99 	bl	80087dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d901      	bls.n	8003cda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e042      	b.n	8003d60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da0f      	bge.n	8003d02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3338      	adds	r3, #56	; 0x38
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
 8003d00:	e00f      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	3304      	adds	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_EP_ClrStall+0x86>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e00e      	b.n	8003d60 <HAL_PCD_EP_ClrStall+0xa4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f004 fbb1 	bl	80084b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da0c      	bge.n	8003d96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3338      	adds	r3, #56	; 0x38
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e00c      	b.n	8003db0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 f9d0 	bl	800815c <USB_EPStopXfer>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b08a      	sub	sp, #40	; 0x28
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3338      	adds	r3, #56	; 0x38
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d901      	bls.n	8003e02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06c      	b.n	8003edc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d902      	bls.n	8003e1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3303      	adds	r3, #3
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e26:	e02b      	b.n	8003e80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d902      	bls.n	8003e44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	3303      	adds	r3, #3
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f004 fa24 	bl	80082b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d809      	bhi.n	8003eaa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1a      	ldr	r2, [r3, #32]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d203      	bcs.n	8003eaa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1be      	bne.n	8003e28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d811      	bhi.n	8003eda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	6939      	ldr	r1, [r7, #16]
 8003ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	333c      	adds	r3, #60	; 0x3c
 8003efc:	3304      	adds	r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d17b      	bne.n	8004012 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4a61      	ldr	r2, [pc, #388]	; (80040ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	f240 80b9 	bls.w	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80b3 	beq.w	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	461a      	mov	r2, r3
 8003f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4c:	6093      	str	r3, [r2, #8]
 8003f4e:	e0a7      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	2320      	movs	r3, #32
 8003f6a:	6093      	str	r3, [r2, #8]
 8003f6c:	e098      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f040 8093 	bne.w	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d90f      	bls.n	8003fa2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	6093      	str	r3, [r2, #8]
 8003fa0:	e07e      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	0159      	lsls	r1, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d114      	bne.n	8004004 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fec:	461a      	mov	r2, r3
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f004 fbf4 	bl	80087dc <USB_EP0_OutStart>
 8003ff4:	e006      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f006 fe9c 	bl	800ad48 <HAL_PCD_DataOutStageCallback>
 8004010:	e046      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d124      	bne.n	8004064 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	461a      	mov	r2, r3
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	e032      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	2320      	movs	r3, #32
 8004054:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f006 fe73 	bl	800ad48 <HAL_PCD_DataOutStageCallback>
 8004062:	e01d      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d114      	bne.n	8004094 <PCD_EP_OutXfrComplete_int+0x1b0>
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800408c:	461a      	mov	r2, r3
 800408e:	2100      	movs	r1, #0
 8004090:	f004 fba4 	bl	80087dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f006 fe54 	bl	800ad48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	4f54300a 	.word	0x4f54300a
 80040b0:	4f54310a 	.word	0x4f54310a

080040b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	333c      	adds	r3, #60	; 0x3c
 80040cc:	3304      	adds	r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <PCD_EP_OutSetupPacket_int+0x88>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d90e      	bls.n	8004108 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f006 fe0b 	bl	800ad24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <PCD_EP_OutSetupPacket_int+0x88>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d90c      	bls.n	8004130 <PCD_EP_OutSetupPacket_int+0x7c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d108      	bne.n	8004130 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004128:	461a      	mov	r2, r3
 800412a:	2101      	movs	r1, #1
 800412c:	f004 fb56 	bl	80087dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	4f54300a 	.word	0x4f54300a

08004140 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
 800414c:	4613      	mov	r3, r2
 800414e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800415e:	883b      	ldrh	r3, [r7, #0]
 8004160:	0419      	lsls	r1, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	430a      	orrs	r2, r1
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
 800416c:	e028      	b.n	80041c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4413      	add	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e00d      	b.n	800419e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	3340      	adds	r3, #64	; 0x40
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	3301      	adds	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d3ec      	bcc.n	8004182 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041a8:	883b      	ldrh	r3, [r7, #0]
 80041aa:	0418      	lsls	r0, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4302      	orrs	r2, r0
 80041b8:	3340      	adds	r3, #64	; 0x40
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	f043 0303 	orr.w	r3, r3, #3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0cc      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d90c      	bls.n	8004274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d044      	beq.n	8004358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e067      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4934      	ldr	r1, [pc, #208]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fd ff3a 	bl	80021a0 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd ff36 	bl	80021a0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d20c      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043be:	f000 fb7f 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fe9a 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	0800b414 	.word	0x0800b414
 80043fc:	20000000 	.word	0x20000000
 8004400:	20000008 	.word	0x20000008

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000000 	.word	0x20000000

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	0800b424 	.word	0x0800b424

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004448:	f7ff ffdc 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4903      	ldr	r1, [pc, #12]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	0800b424 	.word	0x0800b424

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	; 0x30
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044a4:	4b6f      	ldr	r3, [pc, #444]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	496c      	ldr	r1, [pc, #432]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80044c2:	2301      	movs	r3, #1
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d010      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80044d2:	4b64      	ldr	r3, [pc, #400]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	4960      	ldr	r1, [pc, #384]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004500:	4b58      	ldr	r3, [pc, #352]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4955      	ldr	r1, [pc, #340]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451e:	d101      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004520:	2301      	movs	r3, #1
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800453c:	4b49      	ldr	r3, [pc, #292]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800453e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	4946      	ldr	r1, [pc, #280]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d101      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800455c:	2301      	movs	r3, #1
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004568:	2301      	movs	r3, #1
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 808a 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a33      	ldr	r2, [pc, #204]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fd fdfd 	bl	80021a0 <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fd fdf9 	bl	80021a0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e278      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c8:	4b26      	ldr	r3, [pc, #152]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02f      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d028      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d114      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800460e:	f7fd fdc7 	bl	80021a0 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd fdc3 	bl	80021a0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e240      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d114      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	4902      	ldr	r1, [pc, #8]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
 8004660:	e00c      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
 800466c:	42470e40 	.word	0x42470e40
 8004670:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a49      	ldr	r2, [pc, #292]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004676:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800467a:	6093      	str	r3, [r2, #8]
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800467e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	4944      	ldr	r1, [pc, #272]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800468a:	4313      	orrs	r3, r2
 800468c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80046a0:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80046a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80046b0:	4b3a      	ldr	r3, [pc, #232]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	4937      	ldr	r1, [pc, #220]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d2:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	492e      	ldr	r1, [pc, #184]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	4926      	ldr	r1, [pc, #152]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004712:	d101      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004714:	2301      	movs	r3, #1
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	491a      	ldr	r1, [pc, #104]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	2b00      	cmp	r3, #0
 8004744:	d011      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	4911      	ldr	r1, [pc, #68]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004766:	2301      	movs	r3, #1
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d005      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	f040 80ff 	bne.w	800497a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004782:	f7fd fd0d 	bl	80021a0 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004788:	e00e      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800478a:	f7fd fd09 	bl	80021a0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d907      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e188      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800479c:	40023800 	.word	0x40023800
 80047a0:	424711e0 	.word	0x424711e0
 80047a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a8:	4b7e      	ldr	r3, [pc, #504]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ea      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d028      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d124      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80047dc:	4b71      	ldr	r3, [pc, #452]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	3301      	adds	r3, #1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f4:	0e1b      	lsrs	r3, r3, #24
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	431a      	orrs	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	071b      	lsls	r3, r3, #28
 800481e:	4961      	ldr	r1, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	d035      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004850:	d130      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004852:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004864:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486a:	0f1b      	lsrs	r3, r3, #28
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	019b      	lsls	r3, r3, #6
 800487c:	431a      	orrs	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	431a      	orrs	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	4943      	ldr	r1, [pc, #268]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f023 021f 	bic.w	r2, r3, #31
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	493d      	ldr	r1, [pc, #244]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d029      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c8:	d124      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	3301      	adds	r3, #1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048dc:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e2:	0f1b      	lsrs	r3, r3, #28
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	071b      	lsls	r3, r3, #28
 800490c:	4925      	ldr	r1, [pc, #148]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	019b      	lsls	r3, r3, #6
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	4917      	ldr	r1, [pc, #92]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004954:	f7fd fc24 	bl	80021a0 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800495c:	f7fd fc20 	bl	80021a0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e09f      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b01      	cmp	r3, #1
 800497e:	f040 8095 	bne.w	8004aac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004988:	f7fd fc0a 	bl	80021a0 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498e:	e00f      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004990:	f7fd fc06 	bl	80021a0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d908      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e085      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	42470068 	.word	0x42470068
 80049ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049b0:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049bc:	d0e8      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02b      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d127      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	431a      	orrs	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	4928      	ldr	r1, [pc, #160]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	4922      	ldr	r1, [pc, #136]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01d      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4a:	d118      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	0e1b      	lsrs	r3, r3, #24
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	4910      	ldr	r1, [pc, #64]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fd fb8c 	bl	80021a0 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a8c:	f7fd fb88 	bl	80021a0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e007      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d1ef      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3730      	adds	r7, #48	; 0x30
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	42470070 	.word	0x42470070

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b0ae      	sub	sp, #184	; 0xb8
 8004ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae6:	4bcb      	ldr	r3, [pc, #812]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	f200 8206 	bhi.w	8004f00 <HAL_RCC_GetSysClockFreq+0x440>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004f01 	.word	0x08004f01
 8004b04:	08004f01 	.word	0x08004f01
 8004b08:	08004f01 	.word	0x08004f01
 8004b0c:	08004b39 	.word	0x08004b39
 8004b10:	08004f01 	.word	0x08004f01
 8004b14:	08004f01 	.word	0x08004f01
 8004b18:	08004f01 	.word	0x08004f01
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004f01 	.word	0x08004f01
 8004b24:	08004f01 	.word	0x08004f01
 8004b28:	08004f01 	.word	0x08004f01
 8004b2c:	08004d31 	.word	0x08004d31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4bb9      	ldr	r3, [pc, #740]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004b36:	e1e7      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b38:	4bb8      	ldr	r3, [pc, #736]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b3e:	e1e3      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b40:	4bb4      	ldr	r3, [pc, #720]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b4c:	4bb1      	ldr	r3, [pc, #708]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d071      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b58:	4bae      	ldr	r3, [pc, #696]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	0159      	lsls	r1, r3, #5
 8004b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b90:	0150      	lsls	r0, r2, #5
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4621      	mov	r1, r4
 8004b98:	1a51      	subs	r1, r2, r1
 8004b9a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	018b      	lsls	r3, r1, #6
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bba:	4641      	mov	r1, r8
 8004bbc:	018a      	lsls	r2, r1, #6
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	1a51      	subs	r1, r2, r1
 8004bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004bd8:	4649      	mov	r1, r9
 8004bda:	00cb      	lsls	r3, r1, #3
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be2:	4641      	mov	r1, r8
 8004be4:	00ca      	lsls	r2, r1, #3
 8004be6:	4610      	mov	r0, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	4622      	mov	r2, r4
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf2:	462b      	mov	r3, r5
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	eb42 0303 	adc.w	r3, r2, r3
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c08:	4629      	mov	r1, r5
 8004c0a:	024b      	lsls	r3, r1, #9
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c12:	4621      	mov	r1, r4
 8004c14:	024a      	lsls	r2, r1, #9
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004c2c:	f7fb ff90 	bl	8000b50 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c3a:	e067      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3c:	4b75      	ldr	r3, [pc, #468]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c48:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c56:	2300      	movs	r3, #0
 8004c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	0159      	lsls	r1, r3, #5
 8004c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c70:	0150      	lsls	r0, r2, #5
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4621      	mov	r1, r4
 8004c78:	1a51      	subs	r1, r2, r1
 8004c7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004c90:	4649      	mov	r1, r9
 8004c92:	018b      	lsls	r3, r1, #6
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	018a      	lsls	r2, r1, #6
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbe:	4692      	mov	sl, r2
 8004cc0:	469b      	mov	fp, r3
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	462b      	mov	r3, r5
 8004ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	028b      	lsls	r3, r1, #10
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce8:	4621      	mov	r1, r4
 8004cea:	028a      	lsls	r2, r1, #10
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf8:	677a      	str	r2, [r7, #116]	; 0x74
 8004cfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004cfe:	f7fb ff27 	bl	8000b50 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4613      	mov	r3, r2
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d2e:	e0eb      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d30:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d3c:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d06b      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	2200      	movs	r2, #0
 8004d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d64:	4622      	mov	r2, r4
 8004d66:	462b      	mov	r3, r5
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d76:	0150      	lsls	r0, r2, #5
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	1a51      	subs	r1, r2, r1
 8004d80:	61b9      	str	r1, [r7, #24]
 8004d82:	4629      	mov	r1, r5
 8004d84:	eb63 0301 	sbc.w	r3, r3, r1
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d96:	4659      	mov	r1, fp
 8004d98:	018b      	lsls	r3, r1, #6
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004da0:	4651      	mov	r1, sl
 8004da2:	018a      	lsls	r2, r1, #6
 8004da4:	4651      	mov	r1, sl
 8004da6:	ebb2 0801 	subs.w	r8, r2, r1
 8004daa:	4659      	mov	r1, fp
 8004dac:	eb63 0901 	sbc.w	r9, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dc4:	4690      	mov	r8, r2
 8004dc6:	4699      	mov	r9, r3
 8004dc8:	4623      	mov	r3, r4
 8004dca:	eb18 0303 	adds.w	r3, r8, r3
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	eb49 0303 	adc.w	r3, r9, r3
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004de4:	4629      	mov	r1, r5
 8004de6:	024b      	lsls	r3, r1, #9
 8004de8:	4621      	mov	r1, r4
 8004dea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dee:	4621      	mov	r1, r4
 8004df0:	024a      	lsls	r2, r1, #9
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dfe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004e00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e04:	f7fb fea4 	bl	8000b50 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e12:	e065      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x420>
 8004e14:	40023800 	.word	0x40023800
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e20:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	2200      	movs	r2, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
 8004e32:	2300      	movs	r3, #0
 8004e34:	657b      	str	r3, [r7, #84]	; 0x54
 8004e36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	f04f 0000 	mov.w	r0, #0
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	0159      	lsls	r1, r3, #5
 8004e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e4c:	0150      	lsls	r0, r2, #5
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4641      	mov	r1, r8
 8004e54:	1a51      	subs	r1, r2, r1
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	4649      	mov	r1, r9
 8004e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	018b      	lsls	r3, r1, #6
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e76:	4651      	mov	r1, sl
 8004e78:	018a      	lsls	r2, r1, #6
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	1a54      	subs	r4, r2, r1
 8004e7e:	4659      	mov	r1, fp
 8004e80:	eb63 0501 	sbc.w	r5, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	00eb      	lsls	r3, r5, #3
 8004e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e92:	00e2      	lsls	r2, r4, #3
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
 8004e98:	4643      	mov	r3, r8
 8004e9a:	18e3      	adds	r3, r4, r3
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	eb45 0303 	adc.w	r3, r5, r3
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	028b      	lsls	r3, r1, #10
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	028a      	lsls	r2, r1, #10
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ec8:	2200      	movs	r2, #0
 8004eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ecc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ece:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ed2:	f7fb fe3d 	bl	8000b50 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4613      	mov	r3, r2
 8004edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	0f1b      	lsrs	r3, r3, #28
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	37b8      	adds	r7, #184	; 0xb8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400

08004f20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e28d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8083 	beq.w	8005046 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f40:	4b94      	ldr	r3, [pc, #592]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d019      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f4c:	4b91      	ldr	r3, [pc, #580]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f66:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f72:	4b88      	ldr	r3, [pc, #544]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b84      	ldr	r3, [pc, #528]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05b      	beq.n	8005044 <HAL_RCC_OscConfig+0x124>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e25a      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x90>
 8004fa2:	4b7c      	ldr	r3, [pc, #496]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7b      	ldr	r2, [pc, #492]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xb4>
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a75      	ldr	r2, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a72      	ldr	r2, [pc, #456]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f8d4 	bl	80021a0 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fd f8d0 	bl	80021a0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e21f      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xdc>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd f8c0 	bl	80021a0 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd f8bc 	bl	80021a0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e20b      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x104>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d06f      	beq.n	8005132 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005052:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b00      	cmp	r3, #0
 800505c:	d017      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800505e:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005066:	2b08      	cmp	r3, #8
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b44      	ldr	r3, [pc, #272]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1d3      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4937      	ldr	r1, [pc, #220]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e03a      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fd f869 	bl	80021a0 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fd f865 	bl	80021a0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1b4      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4925      	ldr	r1, [pc, #148]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	e015      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd f848 	bl	80021a0 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005114:	f7fd f844 	bl	80021a0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e193      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d036      	beq.n	80051ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd f828 	bl	80021a0 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005154:	f7fd f824 	bl	80021a0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e173      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x234>
 8005172:	e01b      	b.n	80051ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fd f811 	bl	80021a0 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	e00e      	b.n	80051a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005182:	f7fd f80d 	bl	80021a0 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d907      	bls.n	80051a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e15c      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 8005194:	40023800 	.word	0x40023800
 8005198:	42470000 	.word	0x42470000
 800519c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a0:	4b8a      	ldr	r3, [pc, #552]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ea      	bne.n	8005182 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8097 	beq.w	80052e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051be:	4b83      	ldr	r3, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b7c      	ldr	r3, [pc, #496]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ea:	4b79      	ldr	r3, [pc, #484]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d118      	bne.n	8005228 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f6:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a75      	ldr	r2, [pc, #468]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005202:	f7fc ffcd 	bl	80021a0 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7fc ffc9 	bl	80021a0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e118      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	4b6c      	ldr	r3, [pc, #432]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x31e>
 8005230:	4b66      	ldr	r3, [pc, #408]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a65      	ldr	r2, [pc, #404]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e01c      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x340>
 8005246:	4b61      	ldr	r3, [pc, #388]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a60      	ldr	r2, [pc, #384]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b5e      	ldr	r3, [pc, #376]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a5d      	ldr	r2, [pc, #372]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 8005260:	4b5a      	ldr	r3, [pc, #360]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a59      	ldr	r2, [pc, #356]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	4b57      	ldr	r3, [pc, #348]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a56      	ldr	r2, [pc, #344]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fc ff8e 	bl	80021a0 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fc ff8a 	bl	80021a0 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0d7      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529e:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ee      	beq.n	8005288 <HAL_RCC_OscConfig+0x368>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fc ff78 	bl	80021a0 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fc ff74 	bl	80021a0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0c1      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052dc:	4b3b      	ldr	r3, [pc, #236]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80ad 	beq.w	800544c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d060      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d145      	bne.n	8005392 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc ff48 	bl	80021a0 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fc ff44 	bl	80021a0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e093      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	491b      	ldr	r1, [pc, #108]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fc ff19 	bl	80021a0 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fc ff15 	bl	80021a0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e064      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x452>
 8005390:	e05c      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc ff02 	bl	80021a0 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fc fefe 	bl	80021a0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x480>
 80053be:	e045      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e040      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40007000 	.word	0x40007000
 80053d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_RCC_OscConfig+0x538>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d129      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d122      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005410:	4293      	cmp	r3, r2
 8005412:	d119      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d10f      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800

0800545c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07b      	b.n	8005566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547e:	d009      	beq.n	8005494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
 8005486:	e005      	b.n	8005494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc fb50 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	ea42 0103 	orr.w	r1, r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0104 	and.w	r1, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0210 	and.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_SPI_Transmit+0x22>
 800558c:	2302      	movs	r3, #2
 800558e:	e126      	b.n	80057de <HAL_SPI_Transmit+0x270>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005598:	f7fc fe02 	bl	80021a0 <HAL_GetTick>
 800559c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b2:	e10b      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Transmit+0x52>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055c4:	e102      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560c:	d10f      	bne.n	800562e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d007      	beq.n	800564c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005654:	d14b      	bne.n	80056ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0xf6>
 800565e:	8afb      	ldrh	r3, [r7, #22]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13e      	bne.n	80056e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005688:	e02b      	b.n	80056e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d112      	bne.n	80056be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80056bc:	e011      	b.n	80056e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fc fd6f 	bl	80021a0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Transmit+0x168>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Transmit+0x16e>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056e0:	e074      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1ce      	bne.n	800568a <HAL_SPI_Transmit+0x11c>
 80056ec:	e04c      	b.n	8005788 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_SPI_Transmit+0x18e>
 80056f6:	8afb      	ldrh	r3, [r7, #22]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d140      	bne.n	800577e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e02c      	b.n	800577e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d113      	bne.n	800575a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	86da      	strh	r2, [r3, #54]	; 0x36
 8005758:	e011      	b.n	800577e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575a:	f7fc fd21 	bl	80021a0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d803      	bhi.n	8005772 <HAL_SPI_Transmit+0x204>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d102      	bne.n	8005778 <HAL_SPI_Transmit+0x20a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800577c:	e026      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cd      	bne.n	8005724 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f9d1 	bl	8005b34 <SPI_EndRxTxTransaction>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e000      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80057ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
    return;
 800582a:	e0d7      	b.n	80059dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_SPI_IRQHandler+0x66>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	09db      	lsrs	r3, r3, #7
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
    return;
 800584c:	e0c6      	b.n	80059dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_SPI_IRQHandler+0x8c>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80b4 	beq.w	80059dc <HAL_SPI_IRQHandler+0x1f4>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80ad 	beq.w	80059dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	099b      	lsrs	r3, r3, #6
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d023      	beq.n	80058d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d011      	beq.n	80058be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	e00b      	b.n	80058d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
        return;
 80058d4:	e082      	b.n	80059dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d014      	beq.n	800590c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	f043 0208 	orr.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	2b00      	cmp	r3, #0
 8005938:	d04f      	beq.n	80059da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005948:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <HAL_SPI_IRQHandler+0x17e>
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d034      	beq.n	80059d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0203 	bic.w	r2, r2, #3
 8005974:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005982:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_SPI_IRQHandler+0x1fc>)
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	4618      	mov	r0, r3
 800598c:	f7fc ffbb 	bl	8002906 <HAL_DMA_Abort_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ae:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <HAL_SPI_IRQHandler+0x1fc>)
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fc ffa5 	bl	8002906 <HAL_DMA_Abort_IT>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80059ce:	e003      	b.n	80059d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f809 	bl	80059e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80059d6:	e000      	b.n	80059da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80059d8:	bf00      	nop
    return;
 80059da:	bf00      	nop
  }
}
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	080059fd 	.word	0x080059fd

080059e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ffe6 	bl	80059e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a34:	f7fc fbb4 	bl	80021a0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a44:	f7fc fbac 	bl	80021a0 <HAL_GetTick>
 8005a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a4a:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	015b      	lsls	r3, r3, #5
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a5a:	e054      	b.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d050      	beq.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a64:	f7fc fb9c 	bl	80021a0 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d902      	bls.n	8005a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d13d      	bne.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d111      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	d004      	beq.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa6:	d107      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac0:	d10f      	bne.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e017      	b.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d19b      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000000 	.word	0x20000000

08005b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <SPI_EndRxTxTransaction+0x7c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <SPI_EndRxTxTransaction+0x80>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	0d5b      	lsrs	r3, r3, #21
 8005b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d112      	bne.n	8005b86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ff5a 	bl	8005a24 <SPI_WaitFlagStateUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e00f      	b.n	8005ba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d0f2      	beq.n	8005b86 <SPI_EndRxTxTransaction+0x52>
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ba2:	bf00      	nop
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	165e9f81 	.word	0x165e9f81

08005bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e041      	b.n	8005c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fc f8ea 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f000 fcf0 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d001      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04e      	b.n	8005d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x80>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d111      	bne.n	8005cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d010      	beq.n	8005d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	e007      	b.n	8005d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40001800 	.word	0x40001800

08005d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e041      	b.n	8005dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f839 	bl	8005dd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f000 fc30 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x24>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e022      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x3e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e015      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start+0x58>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07c      	b.n	8005f58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6c:	e013      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Start+0x92>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	e00b      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Start+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8c:	e003      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fdec 	bl	8006a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2d      	ldr	r2, [pc, #180]	; (8005f60 <HAL_TIM_PWM_Start+0x174>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIM_PWM_Start+0xcc>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <HAL_TIM_PWM_Start+0x178>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIM_PWM_Start+0xd0>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_TIM_PWM_Start+0xd2>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_TIM_PWM_Start+0x174>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d01d      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_TIM_PWM_Start+0x17c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_TIM_PWM_Start+0x180>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_TIM_PWM_Start+0x184>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_TIM_PWM_Start+0x178>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_TIM_PWM_Start+0x188>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_TIM_PWM_Start+0x18c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d111      	bne.n	8005f46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d010      	beq.n	8005f56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	e007      	b.n	8005f56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40001800 	.word	0x40001800

08005f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e097      	b.n	80060c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f88f 	bl	80060c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc0:	f023 0307 	bic.w	r3, r3, #7
 8005fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f000 fb03 	bl	80065dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	4313      	orrs	r3, r2
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800601c:	f023 030c 	bic.w	r3, r3, #12
 8006020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	4313      	orrs	r3, r2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	031b      	lsls	r3, r3, #12
 800604c:	4313      	orrs	r3, r2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	4313      	orrs	r3, r2
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006104:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d110      	bne.n	800612e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d102      	bne.n	8006118 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006112:	7b7b      	ldrb	r3, [r7, #13]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d001      	beq.n	800611c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e069      	b.n	80061f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800612c:	e031      	b.n	8006192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b04      	cmp	r3, #4
 8006132:	d110      	bne.n	8006156 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d102      	bne.n	8006140 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800613a:	7b3b      	ldrb	r3, [r7, #12]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e055      	b.n	80061f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006154:	e01d      	b.n	8006192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d108      	bne.n	800616e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006162:	7b7b      	ldrb	r3, [r7, #13]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d102      	bne.n	800616e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006168:	7b3b      	ldrb	r3, [r7, #12]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d001      	beq.n	8006172 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e03e      	b.n	80061f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_TIM_Encoder_Start+0xc4>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b04      	cmp	r3, #4
 800619c:	d008      	beq.n	80061b0 <HAL_TIM_Encoder_Start+0xd4>
 800619e:	e00f      	b.n	80061c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fc67 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 80061ae:	e016      	b.n	80061de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2201      	movs	r2, #1
 80061b6:	2104      	movs	r1, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fc5f 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 80061be:	e00e      	b.n	80061de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fc57 	bl	8006a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	2104      	movs	r1, #4
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fc50 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 80061dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0201 	orr.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0202 	mvn.w	r2, #2
 8006224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9b0 	bl	80065a0 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9a2 	bl	800658c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9b3 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b04      	cmp	r3, #4
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0204 	mvn.w	r2, #4
 8006278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f986 	bl	80065a0 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f978 	bl	800658c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f989 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0208 	mvn.w	r2, #8
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2204      	movs	r2, #4
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f95c 	bl	80065a0 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f94e 	bl	800658c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f95f 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2208      	movs	r2, #8
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f932 	bl	80065a0 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f924 	bl	800658c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f935 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0201 	mvn.w	r2, #1
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fb fdf6 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d10e      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d107      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fb99 	bl	8006ada <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d10e      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	d107      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f8fa 	bl	80065c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d10e      	bne.n	8006400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d107      	bne.n	8006400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0220 	mvn.w	r2, #32
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb63 	bl	8006ac6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006422:	2302      	movs	r3, #2
 8006424:	e0ae      	b.n	8006584 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b0c      	cmp	r3, #12
 8006432:	f200 809f 	bhi.w	8006574 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006471 	.word	0x08006471
 8006440:	08006575 	.word	0x08006575
 8006444:	08006575 	.word	0x08006575
 8006448:	08006575 	.word	0x08006575
 800644c:	080064b1 	.word	0x080064b1
 8006450:	08006575 	.word	0x08006575
 8006454:	08006575 	.word	0x08006575
 8006458:	08006575 	.word	0x08006575
 800645c:	080064f3 	.word	0x080064f3
 8006460:	08006575 	.word	0x08006575
 8006464:	08006575 	.word	0x08006575
 8006468:	08006575 	.word	0x08006575
 800646c:	08006533 	.word	0x08006533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f950 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0208 	orr.w	r2, r2, #8
 800648a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0204 	bic.w	r2, r2, #4
 800649a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6999      	ldr	r1, [r3, #24]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	619a      	str	r2, [r3, #24]
      break;
 80064ae:	e064      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f9a0 	bl	80067fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6999      	ldr	r1, [r3, #24]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	619a      	str	r2, [r3, #24]
      break;
 80064f0:	e043      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 f9f5 	bl	80068e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0208 	orr.w	r2, r2, #8
 800650c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0204 	bic.w	r2, r2, #4
 800651c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69d9      	ldr	r1, [r3, #28]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	61da      	str	r2, [r3, #28]
      break;
 8006530:	e023      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fa49 	bl	80069d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69d9      	ldr	r1, [r3, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	021a      	lsls	r2, r3, #8
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	61da      	str	r2, [r3, #28]
      break;
 8006572:	e002      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
      break;
 8006578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3d      	ldr	r2, [pc, #244]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3c      	ldr	r2, [pc, #240]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3b      	ldr	r2, [pc, #236]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3a      	ldr	r2, [pc, #232]	; (8006700 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d027      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_Base_SetConfig+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <TIM_Base_SetConfig+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a26      	ldr	r2, [pc, #152]	; (800670c <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a25      	ldr	r2, [pc, #148]	; (8006710 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0xf8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d103      	bne.n	80066dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	615a      	str	r2, [r3, #20]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40001800 	.word	0x40001800
 8006714:	40001c00 	.word	0x40001c00
 8006718:	40002000 	.word	0x40002000

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC1_SetConfig+0x64>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0x8e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0210 	bic.w	r2, r3, #16
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0320 	bic.w	r3, r3, #32
 8006846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC2_SetConfig+0x68>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10d      	bne.n	8006880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC2_SetConfig+0x94>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400

080068e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC3_SetConfig+0x92>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d113      	bne.n	80069a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	621a      	str	r2, [r3, #32]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40010400 	.word	0x40010400

080069d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <TIM_OC4_SetConfig+0xa4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC4_SetConfig+0x68>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a11      	ldr	r2, [pc, #68]	; (8006a78 <TIM_OC4_SetConfig+0xa8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2201      	movs	r2, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e03f      	b.n	8006b80 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fb fa6b 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2224      	movs	r2, #36	; 0x24
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f828 	bl	8006b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b8c:	b0c0      	sub	sp, #256	; 0x100
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	68d9      	ldr	r1, [r3, #12]
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	ea40 0301 	orr.w	r3, r0, r1
 8006bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006be0:	f021 010c 	bic.w	r1, r1, #12
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	6999      	ldr	r1, [r3, #24]
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	ea40 0301 	orr.w	r3, r0, r1
 8006c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b8f      	ldr	r3, [pc, #572]	; (8006e54 <UART_SetConfig+0x2cc>)
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d005      	beq.n	8006c28 <UART_SetConfig+0xa0>
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b8d      	ldr	r3, [pc, #564]	; (8006e58 <UART_SetConfig+0x2d0>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d104      	bne.n	8006c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fd fc0c 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8006c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c30:	e003      	b.n	8006c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c32:	f7fd fbf3 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8006c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c44:	f040 810c 	bne.w	8006e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	1891      	adds	r1, r2, r2
 8006c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c62:	415b      	adcs	r3, r3
 8006c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	eb12 0801 	adds.w	r8, r2, r1
 8006c70:	4629      	mov	r1, r5
 8006c72:	eb43 0901 	adc.w	r9, r3, r1
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c8a:	4690      	mov	r8, r2
 8006c8c:	4699      	mov	r9, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	eb18 0303 	adds.w	r3, r8, r3
 8006c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c98:	462b      	mov	r3, r5
 8006c9a:	eb49 0303 	adc.w	r3, r9, r3
 8006c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	18db      	adds	r3, r3, r3
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	eb42 0303 	adc.w	r3, r2, r3
 8006cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ccc:	f7f9 ff40 	bl	8000b50 <__aeabi_uldivmod>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4b61      	ldr	r3, [pc, #388]	; (8006e5c <UART_SetConfig+0x2d4>)
 8006cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	011c      	lsls	r4, r3, #4
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	1891      	adds	r1, r2, r2
 8006cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cf8:	415b      	adcs	r3, r3
 8006cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d00:	4641      	mov	r1, r8
 8006d02:	eb12 0a01 	adds.w	sl, r2, r1
 8006d06:	4649      	mov	r1, r9
 8006d08:	eb43 0b01 	adc.w	fp, r3, r1
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d20:	4692      	mov	sl, r2
 8006d22:	469b      	mov	fp, r3
 8006d24:	4643      	mov	r3, r8
 8006d26:	eb1a 0303 	adds.w	r3, sl, r3
 8006d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	eb4b 0303 	adc.w	r3, fp, r3
 8006d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	18db      	adds	r3, r3, r3
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
 8006d52:	4613      	mov	r3, r2
 8006d54:	eb42 0303 	adc.w	r3, r2, r3
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d62:	f7f9 fef5 	bl	8000b50 <__aeabi_uldivmod>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4b3b      	ldr	r3, [pc, #236]	; (8006e5c <UART_SetConfig+0x2d4>)
 8006d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	2264      	movs	r2, #100	; 0x64
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	1acb      	subs	r3, r1, r3
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d82:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <UART_SetConfig+0x2d4>)
 8006d84:	fba3 2302 	umull	r2, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d90:	441c      	add	r4, r3
 8006d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006da4:	4642      	mov	r2, r8
 8006da6:	464b      	mov	r3, r9
 8006da8:	1891      	adds	r1, r2, r2
 8006daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dac:	415b      	adcs	r3, r3
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006db4:	4641      	mov	r1, r8
 8006db6:	1851      	adds	r1, r2, r1
 8006db8:	6339      	str	r1, [r7, #48]	; 0x30
 8006dba:	4649      	mov	r1, r9
 8006dbc:	414b      	adcs	r3, r1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dcc:	4659      	mov	r1, fp
 8006dce:	00cb      	lsls	r3, r1, #3
 8006dd0:	4651      	mov	r1, sl
 8006dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd6:	4651      	mov	r1, sl
 8006dd8:	00ca      	lsls	r2, r1, #3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	4642      	mov	r2, r8
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006de8:	464b      	mov	r3, r9
 8006dea:	460a      	mov	r2, r1
 8006dec:	eb42 0303 	adc.w	r3, r2, r3
 8006df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e08:	460b      	mov	r3, r1
 8006e0a:	18db      	adds	r3, r3, r3
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e0e:	4613      	mov	r3, r2
 8006e10:	eb42 0303 	adc.w	r3, r2, r3
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e1e:	f7f9 fe97 	bl	8000b50 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <UART_SetConfig+0x2d4>)
 8006e28:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	2164      	movs	r1, #100	; 0x64
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	3332      	adds	r3, #50	; 0x32
 8006e3a:	4a08      	ldr	r2, [pc, #32]	; (8006e5c <UART_SetConfig+0x2d4>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 0207 	and.w	r2, r3, #7
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4422      	add	r2, r4
 8006e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e50:	e105      	b.n	800705e <UART_SetConfig+0x4d6>
 8006e52:	bf00      	nop
 8006e54:	40011000 	.word	0x40011000
 8006e58:	40011400 	.word	0x40011400
 8006e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e72:	4642      	mov	r2, r8
 8006e74:	464b      	mov	r3, r9
 8006e76:	1891      	adds	r1, r2, r2
 8006e78:	6239      	str	r1, [r7, #32]
 8006e7a:	415b      	adcs	r3, r3
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e82:	4641      	mov	r1, r8
 8006e84:	1854      	adds	r4, r2, r1
 8006e86:	4649      	mov	r1, r9
 8006e88:	eb43 0501 	adc.w	r5, r3, r1
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	00eb      	lsls	r3, r5, #3
 8006e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9a:	00e2      	lsls	r2, r4, #3
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	4643      	mov	r3, r8
 8006ea2:	18e3      	adds	r3, r4, r3
 8006ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	eb45 0303 	adc.w	r3, r5, r3
 8006eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ece:	4629      	mov	r1, r5
 8006ed0:	008b      	lsls	r3, r1, #2
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ed8:	4621      	mov	r1, r4
 8006eda:	008a      	lsls	r2, r1, #2
 8006edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ee0:	f7f9 fe36 	bl	8000b50 <__aeabi_uldivmod>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4b60      	ldr	r3, [pc, #384]	; (800706c <UART_SetConfig+0x4e4>)
 8006eea:	fba3 2302 	umull	r2, r3, r3, r2
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	011c      	lsls	r4, r3, #4
 8006ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	1891      	adds	r1, r2, r2
 8006f0a:	61b9      	str	r1, [r7, #24]
 8006f0c:	415b      	adcs	r3, r3
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f14:	4641      	mov	r1, r8
 8006f16:	1851      	adds	r1, r2, r1
 8006f18:	6139      	str	r1, [r7, #16]
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	414b      	adcs	r3, r1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	00cb      	lsls	r3, r1, #3
 8006f30:	4651      	mov	r1, sl
 8006f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f36:	4651      	mov	r1, sl
 8006f38:	00ca      	lsls	r2, r1, #3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4642      	mov	r2, r8
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f48:	464b      	mov	r3, r9
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	008b      	lsls	r3, r1, #2
 8006f70:	4641      	mov	r1, r8
 8006f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f76:	4641      	mov	r1, r8
 8006f78:	008a      	lsls	r2, r1, #2
 8006f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f7e:	f7f9 fde7 	bl	8000b50 <__aeabi_uldivmod>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <UART_SetConfig+0x4e4>)
 8006f88:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	2164      	movs	r1, #100	; 0x64
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	3332      	adds	r3, #50	; 0x32
 8006f9a:	4a34      	ldr	r2, [pc, #208]	; (800706c <UART_SetConfig+0x4e4>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fa6:	441c      	add	r4, r3
 8006fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fac:	2200      	movs	r2, #0
 8006fae:	673b      	str	r3, [r7, #112]	; 0x70
 8006fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8006fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	1891      	adds	r1, r2, r2
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	415b      	adcs	r3, r3
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	1851      	adds	r1, r2, r1
 8006fca:	6039      	str	r1, [r7, #0]
 8006fcc:	4649      	mov	r1, r9
 8006fce:	414b      	adcs	r3, r1
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fde:	4659      	mov	r1, fp
 8006fe0:	00cb      	lsls	r3, r1, #3
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe8:	4651      	mov	r1, sl
 8006fea:	00ca      	lsls	r2, r1, #3
 8006fec:	4610      	mov	r0, r2
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	4642      	mov	r2, r8
 8006ff4:	189b      	adds	r3, r3, r2
 8006ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	eb42 0303 	adc.w	r3, r2, r3
 8007000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	663b      	str	r3, [r7, #96]	; 0x60
 800700c:	667a      	str	r2, [r7, #100]	; 0x64
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800701a:	4649      	mov	r1, r9
 800701c:	008b      	lsls	r3, r1, #2
 800701e:	4641      	mov	r1, r8
 8007020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007024:	4641      	mov	r1, r8
 8007026:	008a      	lsls	r2, r1, #2
 8007028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800702c:	f7f9 fd90 	bl	8000b50 <__aeabi_uldivmod>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <UART_SetConfig+0x4e4>)
 8007036:	fba3 1302 	umull	r1, r3, r3, r2
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2164      	movs	r1, #100	; 0x64
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	3332      	adds	r3, #50	; 0x32
 8007048:	4a08      	ldr	r2, [pc, #32]	; (800706c <UART_SetConfig+0x4e4>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4422      	add	r2, r4
 800705c:	609a      	str	r2, [r3, #8]
}
 800705e:	bf00      	nop
 8007060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007064:	46bd      	mov	sp, r7
 8007066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706a:	bf00      	nop
 800706c:	51eb851f 	.word	0x51eb851f

08007070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007070:	b084      	sub	sp, #16
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	f107 001c 	add.w	r0, r7, #28
 800707e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	2b01      	cmp	r3, #1
 8007086:	d122      	bne.n	80070ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800709c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d105      	bne.n	80070c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fbe8 	bl	8008898 <USB_CoreReset>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e01a      	b.n	8007104 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fbdc 	bl	8008898 <USB_CoreReset>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
 80070f6:	e005      	b.n	8007104 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10b      	bne.n	8007122 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f043 0206 	orr.w	r2, r3, #6
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f043 0220 	orr.w	r2, r3, #32
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800712e:	b004      	add	sp, #16
 8007130:	4770      	bx	lr
	...

08007134 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d165      	bne.n	8007214 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a41      	ldr	r2, [pc, #260]	; (8007250 <USB_SetTurnaroundTime+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d906      	bls.n	800715e <USB_SetTurnaroundTime+0x2a>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4a40      	ldr	r2, [pc, #256]	; (8007254 <USB_SetTurnaroundTime+0x120>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d202      	bcs.n	800715e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007158:	230f      	movs	r3, #15
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e062      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a3c      	ldr	r2, [pc, #240]	; (8007254 <USB_SetTurnaroundTime+0x120>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d306      	bcc.n	8007174 <USB_SetTurnaroundTime+0x40>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4a3b      	ldr	r2, [pc, #236]	; (8007258 <USB_SetTurnaroundTime+0x124>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d202      	bcs.n	8007174 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800716e:	230e      	movs	r3, #14
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	e057      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a38      	ldr	r2, [pc, #224]	; (8007258 <USB_SetTurnaroundTime+0x124>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d306      	bcc.n	800718a <USB_SetTurnaroundTime+0x56>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4a37      	ldr	r2, [pc, #220]	; (800725c <USB_SetTurnaroundTime+0x128>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d202      	bcs.n	800718a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007184:	230d      	movs	r3, #13
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e04c      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4a33      	ldr	r2, [pc, #204]	; (800725c <USB_SetTurnaroundTime+0x128>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d306      	bcc.n	80071a0 <USB_SetTurnaroundTime+0x6c>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4a32      	ldr	r2, [pc, #200]	; (8007260 <USB_SetTurnaroundTime+0x12c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d802      	bhi.n	80071a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800719a:	230c      	movs	r3, #12
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e041      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4a2f      	ldr	r2, [pc, #188]	; (8007260 <USB_SetTurnaroundTime+0x12c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d906      	bls.n	80071b6 <USB_SetTurnaroundTime+0x82>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4a2e      	ldr	r2, [pc, #184]	; (8007264 <USB_SetTurnaroundTime+0x130>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d802      	bhi.n	80071b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071b0:	230b      	movs	r3, #11
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e036      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <USB_SetTurnaroundTime+0x130>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d906      	bls.n	80071cc <USB_SetTurnaroundTime+0x98>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4a29      	ldr	r2, [pc, #164]	; (8007268 <USB_SetTurnaroundTime+0x134>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d802      	bhi.n	80071cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071c6:	230a      	movs	r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e02b      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4a26      	ldr	r2, [pc, #152]	; (8007268 <USB_SetTurnaroundTime+0x134>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d906      	bls.n	80071e2 <USB_SetTurnaroundTime+0xae>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4a25      	ldr	r2, [pc, #148]	; (800726c <USB_SetTurnaroundTime+0x138>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d202      	bcs.n	80071e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071dc:	2309      	movs	r3, #9
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e020      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <USB_SetTurnaroundTime+0x138>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d306      	bcc.n	80071f8 <USB_SetTurnaroundTime+0xc4>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4a20      	ldr	r2, [pc, #128]	; (8007270 <USB_SetTurnaroundTime+0x13c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d802      	bhi.n	80071f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071f2:	2308      	movs	r3, #8
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	e015      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <USB_SetTurnaroundTime+0x13c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d906      	bls.n	800720e <USB_SetTurnaroundTime+0xda>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <USB_SetTurnaroundTime+0x140>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d202      	bcs.n	800720e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007208:	2307      	movs	r3, #7
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e00a      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800720e:	2306      	movs	r3, #6
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e007      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800721a:	2309      	movs	r3, #9
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e001      	b.n	8007224 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007220:	2309      	movs	r3, #9
 8007222:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	00d8acbf 	.word	0x00d8acbf
 8007254:	00e4e1c0 	.word	0x00e4e1c0
 8007258:	00f42400 	.word	0x00f42400
 800725c:	01067380 	.word	0x01067380
 8007260:	011a499f 	.word	0x011a499f
 8007264:	01312cff 	.word	0x01312cff
 8007268:	014ca43f 	.word	0x014ca43f
 800726c:	016e3600 	.word	0x016e3600
 8007270:	01a6ab1f 	.word	0x01a6ab1f
 8007274:	01e84800 	.word	0x01e84800

08007278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d115      	bne.n	800730a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072ea:	2001      	movs	r0, #1
 80072ec:	f7fa ff64 	bl	80021b8 <HAL_Delay>
      ms++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fa3f 	bl	800877a <USB_GetMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d01e      	beq.n	8007340 <USB_SetCurrentMode+0x84>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b31      	cmp	r3, #49	; 0x31
 8007306:	d9f0      	bls.n	80072ea <USB_SetCurrentMode+0x2e>
 8007308:	e01a      	b.n	8007340 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d115      	bne.n	800733c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800731c:	2001      	movs	r0, #1
 800731e:	f7fa ff4b 	bl	80021b8 <HAL_Delay>
      ms++;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3301      	adds	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fa26 	bl	800877a <USB_GetMode>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <USB_SetCurrentMode+0x84>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b31      	cmp	r3, #49	; 0x31
 8007338:	d9f0      	bls.n	800731c <USB_SetCurrentMode+0x60>
 800733a:	e001      	b.n	8007340 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e005      	b.n	800734c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b32      	cmp	r3, #50	; 0x32
 8007344:	d101      	bne.n	800734a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007354:	b084      	sub	sp, #16
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	e009      	b.n	8007388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3340      	adds	r3, #64	; 0x40
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	2200      	movs	r2, #0
 8007380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3301      	adds	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b0e      	cmp	r3, #14
 800738c:	d9f2      	bls.n	8007374 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11c      	bne.n	80073ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a2:	f043 0302 	orr.w	r3, r3, #2
 80073a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e005      	b.n	80073da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073e0:	461a      	mov	r2, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ec:	4619      	mov	r1, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	461a      	mov	r2, r3
 80073f6:	680b      	ldr	r3, [r1, #0]
 80073f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d10c      	bne.n	800741a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007406:	2100      	movs	r1, #0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f965 	bl	80076d8 <USB_SetDevSpeed>
 800740e:	e008      	b.n	8007422 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007410:	2101      	movs	r1, #1
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f960 	bl	80076d8 <USB_SetDevSpeed>
 8007418:	e003      	b.n	8007422 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800741a:	2103      	movs	r1, #3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f95b 	bl	80076d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007422:	2110      	movs	r1, #16
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8f3 	bl	8007610 <USB_FlushTxFifo>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f91f 	bl	8007678 <USB_FlushRxFifo>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	461a      	mov	r2, r3
 800744c:	2300      	movs	r3, #0
 800744e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	461a      	mov	r2, r3
 8007458:	2300      	movs	r3, #0
 800745a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	e043      	b.n	80074f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007484:	d118      	bne.n	80074b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e013      	b.n	80074ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	461a      	mov	r2, r3
 80074b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e008      	b.n	80074ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	461a      	mov	r2, r3
 80074c6:	2300      	movs	r3, #0
 80074c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d6:	461a      	mov	r2, r3
 80074d8:	2300      	movs	r3, #0
 80074da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	3301      	adds	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3b7      	bcc.n	800746e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e043      	b.n	800758c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800751a:	d118      	bne.n	800754e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	e013      	b.n	8007560 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e008      	b.n	8007560 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	461a      	mov	r2, r3
 800755c:	2300      	movs	r3, #0
 800755e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	461a      	mov	r2, r3
 800756e:	2300      	movs	r3, #0
 8007570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	461a      	mov	r2, r3
 8007580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	3301      	adds	r3, #1
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	429a      	cmp	r2, r3
 8007592:	d3b7      	bcc.n	8007504 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d105      	bne.n	80075c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f043 0210 	orr.w	r2, r3, #16
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <USB_DevInit+0x2b8>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f043 0208 	orr.w	r2, r3, #8
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075f4:	f043 0304 	orr.w	r3, r3, #4
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007608:	b004      	add	sp, #16
 800760a:	4770      	bx	lr
 800760c:	803c3800 	.word	0x803c3800

08007610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <USB_FlushTxFifo+0x64>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e01b      	b.n	8007668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	daf2      	bge.n	800761e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	019b      	lsls	r3, r3, #6
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a08      	ldr	r2, [pc, #32]	; (8007674 <USB_FlushTxFifo+0x64>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d901      	bls.n	800765a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e006      	b.n	8007668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b20      	cmp	r3, #32
 8007664:	d0f0      	beq.n	8007648 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	00030d40 	.word	0x00030d40

08007678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <USB_FlushRxFifo+0x5c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e018      	b.n	80076c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	daf2      	bge.n	8007684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2210      	movs	r2, #16
 80076a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <USB_FlushRxFifo+0x5c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e006      	b.n	80076c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d0f0      	beq.n	80076a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	00030d40 	.word	0x00030d40

080076d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0306 	and.w	r3, r3, #6
 8007722:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]
 800772e:	e00a      	b.n	8007746 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d002      	beq.n	800773c <USB_GetDevSpeed+0x32>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b06      	cmp	r3, #6
 800773a:	d102      	bne.n	8007742 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800773c:	2302      	movs	r3, #2
 800773e:	75fb      	strb	r3, [r7, #23]
 8007740:	e001      	b.n	8007746 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007742:	230f      	movs	r3, #15
 8007744:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d13a      	bne.n	80077e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	b29b      	uxth	r3, r3
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778e:	4313      	orrs	r3, r2
 8007790:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d155      	bne.n	8007854 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077cc:	4313      	orrs	r3, r2
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e036      	b.n	8007854 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	2101      	movs	r1, #1
 80077f8:	fa01 f303 	lsl.w	r3, r1, r3
 80077fc:	041b      	lsls	r3, r3, #16
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007804:	4313      	orrs	r3, r2
 8007806:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d11a      	bne.n	8007854 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	791b      	ldrb	r3, [r3, #4]
 8007838:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800783a:	430b      	orrs	r3, r1
 800783c:	4313      	orrs	r3, r2
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800784e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007852:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
	...

08007864 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d161      	bne.n	8007944 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007896:	d11f      	bne.n	80078d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	2101      	movs	r1, #1
 80078ea:	fa01 f303 	lsl.w	r3, r1, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	43db      	mvns	r3, r3
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f8:	4013      	ands	r3, r2
 80078fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f303 	lsl.w	r3, r1, r3
 8007912:	b29b      	uxth	r3, r3
 8007914:	43db      	mvns	r3, r3
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800791c:	4013      	ands	r3, r2
 800791e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	0159      	lsls	r1, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	440b      	add	r3, r1
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	4619      	mov	r1, r3
 800793c:	4b35      	ldr	r3, [pc, #212]	; (8007a14 <USB_DeactivateEndpoint+0x1b0>)
 800793e:	4013      	ands	r3, r2
 8007940:	600b      	str	r3, [r1, #0]
 8007942:	e060      	b.n	8007a06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795a:	d11f      	bne.n	800799c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800797a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800799a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	2101      	movs	r1, #1
 80079ae:	fa01 f303 	lsl.w	r3, r1, r3
 80079b2:	041b      	lsls	r3, r3, #16
 80079b4:	43db      	mvns	r3, r3
 80079b6:	68f9      	ldr	r1, [r7, #12]
 80079b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079bc:	4013      	ands	r3, r2
 80079be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	43db      	mvns	r3, r3
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079e0:	4013      	ands	r3, r2
 80079e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	0159      	lsls	r1, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	440b      	add	r3, r1
 80079fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fe:	4619      	mov	r1, r3
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <USB_DeactivateEndpoint+0x1b4>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	ec337800 	.word	0xec337800
 8007a18:	eff37800 	.word	0xeff37800

08007a1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 815c 	bne.w	8007cf6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d132      	bne.n	8007aac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa4:	0cdb      	lsrs	r3, r3, #19
 8007aa6:	04db      	lsls	r3, r3, #19
 8007aa8:	6113      	str	r3, [r2, #16]
 8007aaa:	e074      	b.n	8007b96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac6:	0cdb      	lsrs	r3, r3, #19
 8007ac8:	04db      	lsls	r3, r3, #19
 8007aca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007aea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6999      	ldr	r1, [r3, #24]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	440b      	add	r3, r1
 8007b08:	1e59      	subs	r1, r3, #1
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b14:	4b9d      	ldr	r3, [pc, #628]	; (8007d8c <USB_EPStartXfer+0x370>)
 8007b16:	400b      	ands	r3, r1
 8007b18:	69b9      	ldr	r1, [r7, #24]
 8007b1a:	0148      	lsls	r0, r1, #5
 8007b1c:	69f9      	ldr	r1, [r7, #28]
 8007b1e:	4401      	add	r1, r0
 8007b20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b24:	4313      	orrs	r3, r2
 8007b26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	691a      	ldr	r2, [r3, #16]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b3e:	69b9      	ldr	r1, [r7, #24]
 8007b40:	0148      	lsls	r0, r1, #5
 8007b42:	69f9      	ldr	r1, [r7, #28]
 8007b44:	4401      	add	r1, r0
 8007b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	791b      	ldrb	r3, [r3, #4]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d11f      	bne.n	8007b96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d14b      	bne.n	8007c34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	791b      	ldrb	r3, [r3, #4]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d128      	bne.n	8007c12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d110      	bne.n	8007bf2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	e00f      	b.n	8007c12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	e133      	b.n	8007e9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d015      	beq.n	8007c88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 811b 	beq.w	8007e9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	2101      	movs	r1, #1
 8007c78:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7c:	69f9      	ldr	r1, [r7, #28]
 8007c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c82:	4313      	orrs	r3, r2
 8007c84:	634b      	str	r3, [r1, #52]	; 0x34
 8007c86:	e109      	b.n	8007e9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d110      	bne.n	8007cba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	e00f      	b.n	8007cda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6919      	ldr	r1, [r3, #16]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	b298      	uxth	r0, r3
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4603      	mov	r3, r0
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fade 	bl	80082b0 <USB_WritePacket>
 8007cf4:	e0d2      	b.n	8007e9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d10:	0cdb      	lsrs	r3, r3, #19
 8007d12:	04db      	lsls	r3, r3, #19
 8007d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d126      	bne.n	8007d90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	0148      	lsls	r0, r1, #5
 8007d5c:	69f9      	ldr	r1, [r7, #28]
 8007d5e:	4401      	add	r1, r0
 8007d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d64:	4313      	orrs	r3, r2
 8007d66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d86:	6113      	str	r3, [r2, #16]
 8007d88:	e03a      	b.n	8007e00 <USB_EPStartXfer+0x3e4>
 8007d8a:	bf00      	nop
 8007d8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4413      	add	r3, r2
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	8afa      	ldrh	r2, [r7, #22]
 8007dac:	fb03 f202 	mul.w	r2, r3, r2
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	8afb      	ldrh	r3, [r7, #22]
 8007dc4:	04d9      	lsls	r1, r3, #19
 8007dc6:	4b38      	ldr	r3, [pc, #224]	; (8007ea8 <USB_EPStartXfer+0x48c>)
 8007dc8:	400b      	ands	r3, r1
 8007dca:	69b9      	ldr	r1, [r7, #24]
 8007dcc:	0148      	lsls	r0, r1, #5
 8007dce:	69f9      	ldr	r1, [r7, #28]
 8007dd0:	4401      	add	r1, r0
 8007dd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df0:	69b9      	ldr	r1, [r7, #24]
 8007df2:	0148      	lsls	r0, r1, #5
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	4401      	add	r1, r0
 8007df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d10d      	bne.n	8007e22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6919      	ldr	r1, [r3, #16]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	460a      	mov	r2, r1
 8007e20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d128      	bne.n	8007e7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d110      	bne.n	8007e5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e00f      	b.n	8007e7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	1ff80000 	.word	0x1ff80000

08007eac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 80ce 	bne.w	800806a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d132      	bne.n	8007f3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ef4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f34:	0cdb      	lsrs	r3, r3, #19
 8007f36:	04db      	lsls	r3, r3, #19
 8007f38:	6113      	str	r3, [r2, #16]
 8007f3a:	e04e      	b.n	8007fda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f56:	0cdb      	lsrs	r3, r3, #19
 8007f58:	04db      	lsls	r3, r3, #19
 8007f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	0151      	lsls	r1, r2, #5
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	440a      	add	r2, r1
 8007f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	699a      	ldr	r2, [r3, #24]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d903      	bls.n	8007f94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fca:	6939      	ldr	r1, [r7, #16]
 8007fcc:	0148      	lsls	r0, r1, #5
 8007fce:	6979      	ldr	r1, [r7, #20]
 8007fd0:	4401      	add	r1, r0
 8007fd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d11e      	bne.n	800801e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	440a      	add	r2, r1
 8008012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e097      	b.n	800814e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	440a      	add	r2, r1
 8008034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008038:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800803c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8083 	beq.w	800814e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	2101      	movs	r1, #1
 800805a:	fa01 f303 	lsl.w	r3, r1, r3
 800805e:	6979      	ldr	r1, [r7, #20]
 8008060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008064:	4313      	orrs	r3, r2
 8008066:	634b      	str	r3, [r1, #52]	; 0x34
 8008068:	e071      	b.n	800814e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008084:	0cdb      	lsrs	r3, r3, #19
 8008086:	04db      	lsls	r3, r3, #19
 8008088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080fc:	6939      	ldr	r1, [r7, #16]
 80080fe:	0148      	lsls	r0, r1, #5
 8008100:	6979      	ldr	r1, [r7, #20]
 8008102:	4401      	add	r1, r0
 8008104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008108:	4313      	orrs	r3, r2
 800810a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10d      	bne.n	800812e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6919      	ldr	r1, [r3, #16]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812a:	460a      	mov	r2, r1
 800812c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800814c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d14a      	bne.n	8008210 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800818e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008192:	f040 8086 	bne.w	80082a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d902      	bls.n	80081f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
          break;
 80081f2:	e056      	b.n	80082a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800820c:	d0e7      	beq.n	80081de <USB_EPStopXfer+0x82>
 800820e:	e048      	b.n	80082a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008228:	d13b      	bne.n	80082a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800824c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	7812      	ldrb	r2, [r2, #0]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008270:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f242 7210 	movw	r2, #10000	; 0x2710
 800827e:	4293      	cmp	r3, r2
 8008280:	d902      	bls.n	8008288 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
          break;
 8008286:	e00c      	b.n	80082a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800829c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a0:	d0e7      	beq.n	8008272 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b089      	sub	sp, #36	; 0x24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	71fb      	strb	r3, [r7, #7]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d123      	bne.n	800831e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082d6:	88bb      	ldrh	r3, [r7, #4]
 80082d8:	3303      	adds	r3, #3
 80082da:	089b      	lsrs	r3, r3, #2
 80082dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	e018      	b.n	8008316 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	031a      	lsls	r2, r3, #12
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f0:	461a      	mov	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	3301      	adds	r3, #1
 80082fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	3301      	adds	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	3301      	adds	r3, #1
 8008308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	3301      	adds	r3, #1
 800830e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	3301      	adds	r3, #1
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	429a      	cmp	r2, r3
 800831c:	d3e2      	bcc.n	80082e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3724      	adds	r7, #36	; 0x24
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800832c:	b480      	push	{r7}
 800832e:	b08b      	sub	sp, #44	; 0x2c
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	089b      	lsrs	r3, r3, #2
 8008346:	b29b      	uxth	r3, r3
 8008348:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
 8008356:	e014      	b.n	8008382 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	601a      	str	r2, [r3, #0]
    pDest++;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	3301      	adds	r3, #1
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	3301      	adds	r3, #1
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	3301      	adds	r3, #1
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	3301      	adds	r3, #1
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	3301      	adds	r3, #1
 8008380:	623b      	str	r3, [r7, #32]
 8008382:	6a3a      	ldr	r2, [r7, #32]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	429a      	cmp	r2, r3
 8008388:	d3e6      	bcc.n	8008358 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800838a:	8bfb      	ldrh	r3, [r7, #30]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01e      	beq.n	80083ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839a:	461a      	mov	r2, r3
 800839c:	f107 0310 	add.w	r3, r7, #16
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	701a      	strb	r2, [r3, #0]
      i++;
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	3301      	adds	r3, #1
 80083ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	3301      	adds	r3, #1
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083c2:	8bfb      	ldrh	r3, [r7, #30]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083c8:	8bfb      	ldrh	r3, [r7, #30]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1ea      	bne.n	80083a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	372c      	adds	r7, #44	; 0x2c
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d12c      	bne.n	8008452 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	db12      	blt.n	8008430 <USB_EPSetStall+0x54>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00f      	beq.n	8008430 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800842e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	e02b      	b.n	80084aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	db12      	blt.n	800848a <USB_EPSetStall+0xae>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00f      	beq.n	800848a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008488:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d128      	bne.n	8008526 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	791b      	ldrb	r3, [r3, #4]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d003      	beq.n	8008504 <USB_EPClearStall+0x4c>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	791b      	ldrb	r3, [r3, #4]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d138      	bne.n	8008576 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	e027      	b.n	8008576 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	440a      	add	r2, r1
 800853c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	791b      	ldrb	r3, [r3, #4]
 800854a:	2b03      	cmp	r3, #3
 800854c:	d003      	beq.n	8008556 <USB_EPClearStall+0x9e>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d10f      	bne.n	8008576 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008574:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085fe:	f023 0302 	bic.w	r3, r3, #2
 8008602:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800862c:	f023 0303 	bic.w	r3, r3, #3
 8008630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4013      	ands	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	0c1b      	lsrs	r3, r3, #16
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	4013      	ands	r3, r2
 80086d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	b29b      	uxth	r3, r3
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4013      	ands	r3, r2
 800870e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008710:	68bb      	ldr	r3, [r7, #8]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800871e:	b480      	push	{r7}
 8008720:	b087      	sub	sp, #28
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	fa22 f303 	lsr.w	r3, r2, r3
 800874e:	01db      	lsls	r3, r3, #7
 8008750:	b2db      	uxtb	r3, r3
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4013      	ands	r3, r2
 800876a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800876c:	68bb      	ldr	r3, [r7, #8]
}
 800876e:	4618      	mov	r0, r3
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0301 	and.w	r3, r3, #1
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087b4:	f023 0307 	bic.w	r3, r3, #7
 80087b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	460b      	mov	r3, r1
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	333c      	adds	r3, #60	; 0x3c
 80087f2:	3304      	adds	r3, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4a26      	ldr	r2, [pc, #152]	; (8008894 <USB_EP0_OutStart+0xb8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d90a      	bls.n	8008816 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008810:	d101      	bne.n	8008816 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	e037      	b.n	8008886 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	461a      	mov	r2, r3
 800881e:	2300      	movs	r3, #0
 8008820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008844:	f043 0318 	orr.w	r3, r3, #24
 8008848:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008858:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800885c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d10f      	bne.n	8008884 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	4f54300a 	.word	0x4f54300a

08008898 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4a13      	ldr	r2, [pc, #76]	; (80088fc <USB_CoreReset+0x64>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e01b      	b.n	80088ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	daf2      	bge.n	80088a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f043 0201 	orr.w	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <USB_CoreReset+0x64>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d901      	bls.n	80088e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e006      	b.n	80088ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d0f0      	beq.n	80088ce <USB_CoreReset+0x36>

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	00030d40 	.word	0x00030d40

08008900 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800890c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008910:	f002 fcd2 	bl	800b2b8 <USBD_static_malloc>
 8008914:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	32b0      	adds	r2, #176	; 0xb0
 8008926:	2100      	movs	r1, #0
 8008928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800892c:	2302      	movs	r3, #2
 800892e:	e0d4      	b.n	8008ada <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008930:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008934:	2100      	movs	r1, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f002 fd34 	bl	800b3a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32b0      	adds	r2, #176	; 0xb0
 8008946:	68f9      	ldr	r1, [r7, #12]
 8008948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32b0      	adds	r2, #176	; 0xb0
 8008956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7c1b      	ldrb	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d138      	bne.n	80089da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008968:	4b5e      	ldr	r3, [pc, #376]	; (8008ae4 <USBD_CDC_Init+0x1e4>)
 800896a:	7819      	ldrb	r1, [r3, #0]
 800896c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008970:	2202      	movs	r2, #2
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f002 fb2f 	bl	800afd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008978:	4b5a      	ldr	r3, [pc, #360]	; (8008ae4 <USBD_CDC_Init+0x1e4>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f003 020f 	and.w	r2, r3, #15
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	3324      	adds	r3, #36	; 0x24
 800898e:	2201      	movs	r2, #1
 8008990:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008992:	4b55      	ldr	r3, [pc, #340]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 8008994:	7819      	ldrb	r1, [r3, #0]
 8008996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800899a:	2202      	movs	r2, #2
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 fb1a 	bl	800afd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089a2:	4b51      	ldr	r3, [pc, #324]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 020f 	and.w	r2, r3, #15
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089ba:	2201      	movs	r2, #1
 80089bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089be:	4b4b      	ldr	r3, [pc, #300]	; (8008aec <USBD_CDC_Init+0x1ec>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	3326      	adds	r3, #38	; 0x26
 80089d4:	2210      	movs	r2, #16
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e035      	b.n	8008a46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089da:	4b42      	ldr	r3, [pc, #264]	; (8008ae4 <USBD_CDC_Init+0x1e4>)
 80089dc:	7819      	ldrb	r1, [r3, #0]
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	2202      	movs	r2, #2
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 faf7 	bl	800afd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089e8:	4b3e      	ldr	r3, [pc, #248]	; (8008ae4 <USBD_CDC_Init+0x1e4>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 020f 	and.w	r2, r3, #15
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3324      	adds	r3, #36	; 0x24
 80089fe:	2201      	movs	r2, #1
 8008a00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a02:	4b39      	ldr	r3, [pc, #228]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 8008a04:	7819      	ldrb	r1, [r3, #0]
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	2202      	movs	r2, #2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f002 fae3 	bl	800afd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a10:	4b35      	ldr	r3, [pc, #212]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 020f 	and.w	r2, r3, #15
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a28:	2201      	movs	r2, #1
 8008a2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a2c:	4b2f      	ldr	r3, [pc, #188]	; (8008aec <USBD_CDC_Init+0x1ec>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3326      	adds	r3, #38	; 0x26
 8008a42:	2210      	movs	r2, #16
 8008a44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a46:	4b29      	ldr	r3, [pc, #164]	; (8008aec <USBD_CDC_Init+0x1ec>)
 8008a48:	7819      	ldrb	r1, [r3, #0]
 8008a4a:	2308      	movs	r3, #8
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f002 fac1 	bl	800afd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a54:	4b25      	ldr	r3, [pc, #148]	; (8008aec <USBD_CDC_Init+0x1ec>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3324      	adds	r3, #36	; 0x24
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	33b0      	adds	r3, #176	; 0xb0
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e018      	b.n	8008ada <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	7c1b      	ldrb	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab0:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 8008ab2:	7819      	ldrb	r1, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f002 fb78 	bl	800b1b4 <USBD_LL_PrepareReceive>
 8008ac4:	e008      	b.n	8008ad8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ac6:	4b08      	ldr	r3, [pc, #32]	; (8008ae8 <USBD_CDC_Init+0x1e8>)
 8008ac8:	7819      	ldrb	r1, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f002 fb6e 	bl	800b1b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000097 	.word	0x20000097
 8008ae8:	20000098 	.word	0x20000098
 8008aec:	20000099 	.word	0x20000099

08008af0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008afc:	4b3a      	ldr	r3, [pc, #232]	; (8008be8 <USBD_CDC_DeInit+0xf8>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f002 fa8d 	bl	800b022 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b08:	4b37      	ldr	r3, [pc, #220]	; (8008be8 <USBD_CDC_DeInit+0xf8>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	f003 020f 	and.w	r2, r3, #15
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	3324      	adds	r3, #36	; 0x24
 8008b1e:	2200      	movs	r2, #0
 8008b20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b22:	4b32      	ldr	r3, [pc, #200]	; (8008bec <USBD_CDC_DeInit+0xfc>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f002 fa7a 	bl	800b022 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b2e:	4b2f      	ldr	r3, [pc, #188]	; (8008bec <USBD_CDC_DeInit+0xfc>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b46:	2200      	movs	r2, #0
 8008b48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b4a:	4b29      	ldr	r3, [pc, #164]	; (8008bf0 <USBD_CDC_DeInit+0x100>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 fa66 	bl	800b022 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b56:	4b26      	ldr	r3, [pc, #152]	; (8008bf0 <USBD_CDC_DeInit+0x100>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 020f 	and.w	r2, r3, #15
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	3324      	adds	r3, #36	; 0x24
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b70:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <USBD_CDC_DeInit+0x100>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3326      	adds	r3, #38	; 0x26
 8008b86:	2200      	movs	r2, #0
 8008b88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	32b0      	adds	r2, #176	; 0xb0
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01f      	beq.n	8008bdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	33b0      	adds	r3, #176	; 0xb0
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	32b0      	adds	r2, #176	; 0xb0
 8008bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f002 fb88 	bl	800b2d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32b0      	adds	r2, #176	; 0xb0
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000097 	.word	0x20000097
 8008bec:	20000098 	.word	0x20000098
 8008bf0:	20000099 	.word	0x20000099

08008bf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32b0      	adds	r2, #176	; 0xb0
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e0bf      	b.n	8008da4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d050      	beq.n	8008cd2 <USBD_CDC_Setup+0xde>
 8008c30:	2b20      	cmp	r3, #32
 8008c32:	f040 80af 	bne.w	8008d94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	88db      	ldrh	r3, [r3, #6]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d03a      	beq.n	8008cb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da1b      	bge.n	8008c80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	33b0      	adds	r3, #176	; 0xb0
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	88d2      	ldrh	r2, [r2, #6]
 8008c64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b07      	cmp	r3, #7
 8008c6c:	bf28      	it	cs
 8008c6e:	2307      	movcs	r3, #7
 8008c70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	89fa      	ldrh	r2, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fd6d 	bl	800a758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c7e:	e090      	b.n	8008da2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	785a      	ldrb	r2, [r3, #1]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8008c90:	d803      	bhi.n	8008c9a <USBD_CDC_Setup+0xa6>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	88db      	ldrh	r3, [r3, #6]
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	e000      	b.n	8008c9c <USBD_CDC_Setup+0xa8>
 8008c9a:	2240      	movs	r2, #64	; 0x40
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ca2:	6939      	ldr	r1, [r7, #16]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008caa:	461a      	mov	r2, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fd7f 	bl	800a7b0 <USBD_CtlPrepareRx>
      break;
 8008cb2:	e076      	b.n	8008da2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	33b0      	adds	r3, #176	; 0xb0
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	7850      	ldrb	r0, [r2, #1]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	4798      	blx	r3
      break;
 8008cd0:	e067      	b.n	8008da2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b0b      	cmp	r3, #11
 8008cd8:	d851      	bhi.n	8008d7e <USBD_CDC_Setup+0x18a>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <USBD_CDC_Setup+0xec>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d8d 	.word	0x08008d8d
 8008ce8:	08008d7f 	.word	0x08008d7f
 8008cec:	08008d7f 	.word	0x08008d7f
 8008cf0:	08008d7f 	.word	0x08008d7f
 8008cf4:	08008d7f 	.word	0x08008d7f
 8008cf8:	08008d7f 	.word	0x08008d7f
 8008cfc:	08008d7f 	.word	0x08008d7f
 8008d00:	08008d7f 	.word	0x08008d7f
 8008d04:	08008d7f 	.word	0x08008d7f
 8008d08:	08008d3b 	.word	0x08008d3b
 8008d0c:	08008d65 	.word	0x08008d65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d107      	bne.n	8008d2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d1c:	f107 030a 	add.w	r3, r7, #10
 8008d20:	2202      	movs	r2, #2
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fd17 	bl	800a758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d2a:	e032      	b.n	8008d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fca1 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	75fb      	strb	r3, [r7, #23]
          break;
 8008d38:	e02b      	b.n	8008d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d107      	bne.n	8008d56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d46:	f107 030d 	add.w	r3, r7, #13
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fd02 	bl	800a758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d54:	e01d      	b.n	8008d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 fc8c 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	75fb      	strb	r3, [r7, #23]
          break;
 8008d62:	e016      	b.n	8008d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d00f      	beq.n	8008d90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fc7f 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d7c:	e008      	b.n	8008d90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 fc78 	bl	800a676 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	75fb      	strb	r3, [r7, #23]
          break;
 8008d8a:	e002      	b.n	8008d92 <USBD_CDC_Setup+0x19e>
          break;
 8008d8c:	bf00      	nop
 8008d8e:	e008      	b.n	8008da2 <USBD_CDC_Setup+0x1ae>
          break;
 8008d90:	bf00      	nop
      }
      break;
 8008d92:	e006      	b.n	8008da2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fc6d 	bl	800a676 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008da0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32b0      	adds	r2, #176	; 0xb0
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e065      	b.n	8008ea2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	32b0      	adds	r2, #176	; 0xb0
 8008de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	f003 020f 	and.w	r2, r3, #15
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	440b      	add	r3, r1
 8008df8:	3318      	adds	r3, #24
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02f      	beq.n	8008e60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	f003 020f 	and.w	r2, r3, #15
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	3318      	adds	r3, #24
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	f003 010f 	and.w	r1, r3, #15
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	440b      	add	r3, r1
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4403      	add	r3, r0
 8008e28:	3348      	adds	r3, #72	; 0x48
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d112      	bne.n	8008e60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e52:	78f9      	ldrb	r1, [r7, #3]
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 f98a 	bl	800b172 <USBD_LL_Transmit>
 8008e5e:	e01f      	b.n	8008ea0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	33b0      	adds	r3, #176	; 0xb0
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d010      	beq.n	8008ea0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	33b0      	adds	r3, #176	; 0xb0
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	; 0xb0
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	32b0      	adds	r2, #176	; 0xb0
 8008ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e01a      	b.n	8008f12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 f988 	bl	800b1f6 <USBD_LL_GetRxDataSize>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	33b0      	adds	r3, #176	; 0xb0
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	32b0      	adds	r2, #176	; 0xb0
 8008f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e025      	b.n	8008f88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	33b0      	adds	r3, #176	; 0xb0
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01a      	beq.n	8008f86 <USBD_CDC_EP0_RxReady+0x6c>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f56:	2bff      	cmp	r3, #255	; 0xff
 8008f58:	d015      	beq.n	8008f86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	33b0      	adds	r3, #176	; 0xb0
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f98:	2182      	movs	r1, #130	; 0x82
 8008f9a:	4818      	ldr	r0, [pc, #96]	; (8008ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f9c:	f000 fd09 	bl	80099b2 <USBD_GetEpDesc>
 8008fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	4815      	ldr	r0, [pc, #84]	; (8008ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fa6:	f000 fd04 	bl	80099b2 <USBD_GetEpDesc>
 8008faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fac:	2181      	movs	r1, #129	; 0x81
 8008fae:	4813      	ldr	r0, [pc, #76]	; (8008ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fb0:	f000 fcff 	bl	80099b2 <USBD_GetEpDesc>
 8008fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fd0:	711a      	strb	r2, [r3, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe4:	711a      	strb	r2, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2243      	movs	r2, #67	; 0x43
 8008fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000054 	.word	0x20000054

08009000 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009008:	2182      	movs	r1, #130	; 0x82
 800900a:	4818      	ldr	r0, [pc, #96]	; (800906c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800900c:	f000 fcd1 	bl	80099b2 <USBD_GetEpDesc>
 8009010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009012:	2101      	movs	r1, #1
 8009014:	4815      	ldr	r0, [pc, #84]	; (800906c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009016:	f000 fccc 	bl	80099b2 <USBD_GetEpDesc>
 800901a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800901c:	2181      	movs	r1, #129	; 0x81
 800901e:	4813      	ldr	r0, [pc, #76]	; (800906c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009020:	f000 fcc7 	bl	80099b2 <USBD_GetEpDesc>
 8009024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2210      	movs	r2, #16
 8009030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d006      	beq.n	8009046 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2200      	movs	r2, #0
 800903c:	711a      	strb	r2, [r3, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f042 0202 	orr.w	r2, r2, #2
 8009044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d006      	beq.n	800905a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	711a      	strb	r2, [r3, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f042 0202 	orr.w	r2, r2, #2
 8009058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2243      	movs	r2, #67	; 0x43
 800905e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009060:	4b02      	ldr	r3, [pc, #8]	; (800906c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009062:	4618      	mov	r0, r3
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000054 	.word	0x20000054

08009070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009078:	2182      	movs	r1, #130	; 0x82
 800907a:	4818      	ldr	r0, [pc, #96]	; (80090dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800907c:	f000 fc99 	bl	80099b2 <USBD_GetEpDesc>
 8009080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009082:	2101      	movs	r1, #1
 8009084:	4815      	ldr	r0, [pc, #84]	; (80090dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009086:	f000 fc94 	bl	80099b2 <USBD_GetEpDesc>
 800908a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800908c:	2181      	movs	r1, #129	; 0x81
 800908e:	4813      	ldr	r0, [pc, #76]	; (80090dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009090:	f000 fc8f 	bl	80099b2 <USBD_GetEpDesc>
 8009094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2210      	movs	r2, #16
 80090a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b0:	711a      	strb	r2, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c4:	711a      	strb	r2, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2243      	movs	r2, #67	; 0x43
 80090ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090d0:	4b02      	ldr	r3, [pc, #8]	; (80090dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000054 	.word	0x20000054

080090e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220a      	movs	r2, #10
 80090ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090ee:	4b03      	ldr	r3, [pc, #12]	; (80090fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000010 	.word	0x20000010

08009100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	e009      	b.n	8009128 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	33b0      	adds	r3, #176	; 0xb0
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	32b0      	adds	r2, #176	; 0xb0
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	e008      	b.n	800916c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	32b0      	adds	r2, #176	; 0xb0
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	e004      	b.n	80091a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
	...

080091b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	32b0      	adds	r2, #176	; 0xb0
 80091c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	32b0      	adds	r2, #176	; 0xb0
 80091d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	e018      	b.n	8009214 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7c1b      	ldrb	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <USBD_CDC_ReceivePacket+0x68>)
 80091ec:	7819      	ldrb	r1, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 ffdb 	bl	800b1b4 <USBD_LL_PrepareReceive>
 80091fe:	e008      	b.n	8009212 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <USBD_CDC_ReceivePacket+0x68>)
 8009202:	7819      	ldrb	r1, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 ffd1 	bl	800b1b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000098 	.word	0x20000098

08009220 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	e01f      	b.n	8009278 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	79fa      	ldrb	r2, [r7, #7]
 800926a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fe4b 	bl	800af08 <USBD_LL_Init>
 8009272:	4603      	mov	r3, r0
 8009274:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800928a:	2300      	movs	r3, #0
 800928c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009294:	2303      	movs	r3, #3
 8009296:	e025      	b.n	80092e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	32ae      	adds	r2, #174	; 0xae
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32ae      	adds	r2, #174	; 0xae
 80092be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f107 020e 	add.w	r2, r7, #14
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fe53 	bl	800afa0 <USBD_LL_Start>
 80092fa:	4603      	mov	r3, r0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	4611      	mov	r1, r2
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	4611      	mov	r1, r2
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	4798      	blx	r3
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009378:	2303      	movs	r3, #3
 800937a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f001 f932 	bl	800a602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d01a      	beq.n	80093f8 <USBD_LL_SetupStage+0x72>
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d822      	bhi.n	800940c <USBD_LL_SetupStage+0x86>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <USBD_LL_SetupStage+0x4a>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d00a      	beq.n	80093e4 <USBD_LL_SetupStage+0x5e>
 80093ce:	e01d      	b.n	800940c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fb5f 	bl	8009a9c <USBD_StdDevReq>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]
      break;
 80093e2:	e020      	b.n	8009426 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbc7 	bl	8009b80 <USBD_StdItfReq>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]
      break;
 80093f6:	e016      	b.n	8009426 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc29 	bl	8009c58 <USBD_StdEPReq>
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]
      break;
 800940a:	e00c      	b.n	8009426 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fe20 	bl	800b060 <USBD_LL_StallEP>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	bf00      	nop
  }

  return ret;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	460b      	mov	r3, r1
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d16e      	bne.n	8009526 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800944e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009456:	2b03      	cmp	r3, #3
 8009458:	f040 8098 	bne.w	800958c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	429a      	cmp	r2, r3
 8009466:	d913      	bls.n	8009490 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	4293      	cmp	r3, r2
 8009480:	bf28      	it	cs
 8009482:	4613      	movcs	r3, r2
 8009484:	461a      	mov	r2, r3
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f001 f9ae 	bl	800a7ea <USBD_CtlContinueRx>
 800948e:	e07d      	b.n	800958c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009496:	f003 031f 	and.w	r3, r3, #31
 800949a:	2b02      	cmp	r3, #2
 800949c:	d014      	beq.n	80094c8 <USBD_LL_DataOutStage+0x98>
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d81d      	bhi.n	80094de <USBD_LL_DataOutStage+0xae>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <USBD_LL_DataOutStage+0x7c>
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d003      	beq.n	80094b2 <USBD_LL_DataOutStage+0x82>
 80094aa:	e018      	b.n	80094de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75bb      	strb	r3, [r7, #22]
            break;
 80094b0:	e018      	b.n	80094e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	4619      	mov	r1, r3
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fa5e 	bl	800997e <USBD_CoreFindIF>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75bb      	strb	r3, [r7, #22]
            break;
 80094c6:	e00d      	b.n	80094e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fa60 	bl	8009998 <USBD_CoreFindEP>
 80094d8:	4603      	mov	r3, r0
 80094da:	75bb      	strb	r3, [r7, #22]
            break;
 80094dc:	e002      	b.n	80094e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	75bb      	strb	r3, [r7, #22]
            break;
 80094e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094e4:	7dbb      	ldrb	r3, [r7, #22]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d119      	bne.n	800951e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d113      	bne.n	800951e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094f6:	7dba      	ldrb	r2, [r7, #22]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	32ae      	adds	r2, #174	; 0xae
 80094fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009506:	7dba      	ldrb	r2, [r7, #22]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800950e:	7dba      	ldrb	r2, [r7, #22]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	32ae      	adds	r2, #174	; 0xae
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f001 f974 	bl	800a80c <USBD_CtlSendStatus>
 8009524:	e032      	b.n	800958c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952c:	b2db      	uxtb	r3, r3
 800952e:	4619      	mov	r1, r3
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 fa31 	bl	8009998 <USBD_CoreFindEP>
 8009536:	4603      	mov	r3, r0
 8009538:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953a:	7dbb      	ldrb	r3, [r7, #22]
 800953c:	2bff      	cmp	r3, #255	; 0xff
 800953e:	d025      	beq.n	800958c <USBD_LL_DataOutStage+0x15c>
 8009540:	7dbb      	ldrb	r3, [r7, #22]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d122      	bne.n	800958c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b03      	cmp	r3, #3
 8009550:	d117      	bne.n	8009582 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009552:	7dba      	ldrb	r2, [r7, #22]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	32ae      	adds	r2, #174	; 0xae
 8009558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00f      	beq.n	8009582 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009562:	7dba      	ldrb	r2, [r7, #22]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800956a:	7dba      	ldrb	r2, [r7, #22]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	32ae      	adds	r2, #174	; 0xae
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	7afa      	ldrb	r2, [r7, #11]
 8009578:	4611      	mov	r1, r2
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	4798      	blx	r3
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	e000      	b.n	800958e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b086      	sub	sp, #24
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	460b      	mov	r3, r1
 80095a0:	607a      	str	r2, [r7, #4]
 80095a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d16f      	bne.n	800968a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3314      	adds	r3, #20
 80095ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d15a      	bne.n	8009670 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d914      	bls.n	80095f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	461a      	mov	r2, r3
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f001 f8d6 	bl	800a78e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095e2:	2300      	movs	r3, #0
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f001 fde3 	bl	800b1b4 <USBD_LL_PrepareReceive>
 80095ee:	e03f      	b.n	8009670 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d11c      	bne.n	8009636 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009604:	429a      	cmp	r2, r3
 8009606:	d316      	bcc.n	8009636 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009612:	429a      	cmp	r2, r3
 8009614:	d20f      	bcs.n	8009636 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f001 f8b7 	bl	800a78e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009628:	2300      	movs	r3, #0
 800962a:	2200      	movs	r2, #0
 800962c:	2100      	movs	r1, #0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f001 fdc0 	bl	800b1b4 <USBD_LL_PrepareReceive>
 8009634:	e01c      	b.n	8009670 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b03      	cmp	r3, #3
 8009640:	d10f      	bne.n	8009662 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009662:	2180      	movs	r1, #128	; 0x80
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 fcfb 	bl	800b060 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f001 f8e1 	bl	800a832 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d03a      	beq.n	80096f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fe42 	bl	8009304 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009688:	e032      	b.n	80096f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f97f 	bl	8009998 <USBD_CoreFindEP>
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2bff      	cmp	r3, #255	; 0xff
 80096a2:	d025      	beq.n	80096f0 <USBD_LL_DataInStage+0x15a>
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d122      	bne.n	80096f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d11c      	bne.n	80096f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096b6:	7dfa      	ldrb	r2, [r7, #23]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	32ae      	adds	r2, #174	; 0xae
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d014      	beq.n	80096f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096c6:	7dfa      	ldrb	r2, [r7, #23]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096ce:	7dfa      	ldrb	r2, [r7, #23]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	32ae      	adds	r2, #174	; 0xae
 80096d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	7afa      	ldrb	r2, [r7, #11]
 80096dc:	4611      	mov	r1, r2
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	4798      	blx	r3
 80096e2:	4603      	mov	r3, r0
 80096e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096e6:	7dbb      	ldrb	r3, [r7, #22]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096ec:	7dbb      	ldrb	r3, [r7, #22]
 80096ee:	e000      	b.n	80096f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d014      	beq.n	8009760 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00e      	beq.n	8009760 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6852      	ldr	r2, [r2, #4]
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	4611      	mov	r1, r2
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	4798      	blx	r3
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800975c:	2303      	movs	r3, #3
 800975e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009760:	2340      	movs	r3, #64	; 0x40
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fc35 	bl	800afd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2240      	movs	r2, #64	; 0x40
 8009778:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	2200      	movs	r2, #0
 8009780:	2180      	movs	r1, #128	; 0x80
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fc27 	bl	800afd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2240      	movs	r2, #64	; 0x40
 8009792:	621a      	str	r2, [r3, #32]

  return ret;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2204      	movs	r2, #4
 80097d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d106      	bne.n	800980c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009804:	b2da      	uxtb	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b03      	cmp	r3, #3
 800982c:	d110      	bne.n	8009850 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	32ae      	adds	r2, #174	; 0xae
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	e01c      	b.n	80098b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b03      	cmp	r3, #3
 8009886:	d115      	bne.n	80098b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	32ae      	adds	r2, #174	; 0xae
 8009892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	32ae      	adds	r2, #174	; 0xae
 80098a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	4611      	mov	r1, r2
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	32ae      	adds	r2, #174	; 0xae
 80098d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	e01c      	b.n	800991a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d115      	bne.n	8009918 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	; 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	32ae      	adds	r2, #174	; 0xae
 800990a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	4611      	mov	r1, r2
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	6852      	ldr	r2, [r2, #4]
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	4611      	mov	r1, r2
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800998a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b086      	sub	sp, #24
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d920      	bls.n	8009a1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099e2:	e013      	b.n	8009a0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099e4:	f107 030a 	add.w	r3, r7, #10
 80099e8:	4619      	mov	r1, r3
 80099ea:	6978      	ldr	r0, [r7, #20]
 80099ec:	f000 f81b 	bl	8009a26 <USBD_GetNextDesc>
 80099f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d108      	bne.n	8009a0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	789b      	ldrb	r3, [r3, #2]
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d008      	beq.n	8009a1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	885b      	ldrh	r3, [r3, #2]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	897b      	ldrh	r3, [r7, #10]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d8e5      	bhi.n	80099e4 <USBD_GetEpDesc+0x32>
 8009a18:	e000      	b.n	8009a1c <USBD_GetEpDesc+0x6a>
          break;
 8009a1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a1c:	693b      	ldr	r3, [r7, #16]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	881a      	ldrh	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	3301      	adds	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a7e:	8a3b      	ldrh	r3, [r7, #16]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	b21a      	sxth	r2, r3
 8009a84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	b21b      	sxth	r3, r3
 8009a8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a8e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab2:	2b40      	cmp	r3, #64	; 0x40
 8009ab4:	d005      	beq.n	8009ac2 <USBD_StdDevReq+0x26>
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d857      	bhi.n	8009b6a <USBD_StdDevReq+0xce>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00f      	beq.n	8009ade <USBD_StdDevReq+0x42>
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d153      	bne.n	8009b6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	32ae      	adds	r2, #174	; 0xae
 8009acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]
      break;
 8009adc:	e04a      	b.n	8009b74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b09      	cmp	r3, #9
 8009ae4:	d83b      	bhi.n	8009b5e <USBD_StdDevReq+0xc2>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <USBD_StdDevReq+0x50>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009b55 	.word	0x08009b55
 8009af4:	08009b5f 	.word	0x08009b5f
 8009af8:	08009b4b 	.word	0x08009b4b
 8009afc:	08009b5f 	.word	0x08009b5f
 8009b00:	08009b1f 	.word	0x08009b1f
 8009b04:	08009b15 	.word	0x08009b15
 8009b08:	08009b5f 	.word	0x08009b5f
 8009b0c:	08009b37 	.word	0x08009b37
 8009b10:	08009b29 	.word	0x08009b29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa3c 	bl	8009f94 <USBD_GetDescriptor>
          break;
 8009b1c:	e024      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fbcb 	bl	800a2bc <USBD_SetAddress>
          break;
 8009b26:	e01f      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fc0a 	bl	800a344 <USBD_SetConfig>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]
          break;
 8009b34:	e018      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fcad 	bl	800a498 <USBD_GetConfig>
          break;
 8009b3e:	e013      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fcde 	bl	800a504 <USBD_GetStatus>
          break;
 8009b48:	e00e      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fd0d 	bl	800a56c <USBD_SetFeature>
          break;
 8009b52:	e009      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fd31 	bl	800a5be <USBD_ClrFeature>
          break;
 8009b5c:	e004      	b.n	8009b68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fd88 	bl	800a676 <USBD_CtlError>
          break;
 8009b66:	bf00      	nop
      }
      break;
 8009b68:	e004      	b.n	8009b74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fd82 	bl	800a676 <USBD_CtlError>
      break;
 8009b72:	bf00      	nop
  }

  return ret;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop

08009b80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d005      	beq.n	8009ba6 <USBD_StdItfReq+0x26>
 8009b9a:	2b40      	cmp	r3, #64	; 0x40
 8009b9c:	d852      	bhi.n	8009c44 <USBD_StdItfReq+0xc4>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <USBD_StdItfReq+0x26>
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d14e      	bne.n	8009c44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d840      	bhi.n	8009c36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	889b      	ldrh	r3, [r3, #4]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d836      	bhi.n	8009c2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	889b      	ldrh	r3, [r3, #4]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fed9 	bl	800997e <USBD_CoreFindIF>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	2bff      	cmp	r3, #255	; 0xff
 8009bd4:	d01d      	beq.n	8009c12 <USBD_StdItfReq+0x92>
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11a      	bne.n	8009c12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bdc:	7bba      	ldrb	r2, [r7, #14]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32ae      	adds	r2, #174	; 0xae
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00f      	beq.n	8009c0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bec:	7bba      	ldrb	r2, [r7, #14]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bf4:	7bba      	ldrb	r2, [r7, #14]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32ae      	adds	r2, #174	; 0xae
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	4798      	blx	r3
 8009c06:	4603      	mov	r3, r0
 8009c08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c0a:	e004      	b.n	8009c16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c10:	e001      	b.n	8009c16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c12:	2303      	movs	r3, #3
 8009c14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	88db      	ldrh	r3, [r3, #6]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d110      	bne.n	8009c40 <USBD_StdItfReq+0xc0>
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10d      	bne.n	8009c40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fdf1 	bl	800a80c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c2a:	e009      	b.n	8009c40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fd21 	bl	800a676 <USBD_CtlError>
          break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fd1c 	bl	800a676 <USBD_CtlError>
          break;
 8009c3e:	e000      	b.n	8009c42 <USBD_StdItfReq+0xc2>
          break;
 8009c40:	bf00      	nop
      }
      break;
 8009c42:	e004      	b.n	8009c4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fd15 	bl	800a676 <USBD_CtlError>
      break;
 8009c4c:	bf00      	nop
  }

  return ret;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	889b      	ldrh	r3, [r3, #4]
 8009c6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d007      	beq.n	8009c88 <USBD_StdEPReq+0x30>
 8009c78:	2b40      	cmp	r3, #64	; 0x40
 8009c7a:	f200 817f 	bhi.w	8009f7c <USBD_StdEPReq+0x324>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d02a      	beq.n	8009cd8 <USBD_StdEPReq+0x80>
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	f040 817a 	bne.w	8009f7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fe83 	bl	8009998 <USBD_CoreFindEP>
 8009c92:	4603      	mov	r3, r0
 8009c94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c96:	7b7b      	ldrb	r3, [r7, #13]
 8009c98:	2bff      	cmp	r3, #255	; 0xff
 8009c9a:	f000 8174 	beq.w	8009f86 <USBD_StdEPReq+0x32e>
 8009c9e:	7b7b      	ldrb	r3, [r7, #13]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 8170 	bne.w	8009f86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009ca6:	7b7a      	ldrb	r2, [r7, #13]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cae:	7b7a      	ldrb	r2, [r7, #13]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	32ae      	adds	r2, #174	; 0xae
 8009cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 8163 	beq.w	8009f86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009cc0:	7b7a      	ldrb	r2, [r7, #13]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	32ae      	adds	r2, #174	; 0xae
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cd6:	e156      	b.n	8009f86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d008      	beq.n	8009cf2 <USBD_StdEPReq+0x9a>
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	f300 8145 	bgt.w	8009f70 <USBD_StdEPReq+0x318>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 809b 	beq.w	8009e22 <USBD_StdEPReq+0x1ca>
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d03c      	beq.n	8009d6a <USBD_StdEPReq+0x112>
 8009cf0:	e13e      	b.n	8009f70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d002      	beq.n	8009d04 <USBD_StdEPReq+0xac>
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d016      	beq.n	8009d30 <USBD_StdEPReq+0xd8>
 8009d02:	e02c      	b.n	8009d5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00d      	beq.n	8009d26 <USBD_StdEPReq+0xce>
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	2b80      	cmp	r3, #128	; 0x80
 8009d0e:	d00a      	beq.n	8009d26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 f9a3 	bl	800b060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d1a:	2180      	movs	r1, #128	; 0x80
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 f99f 	bl	800b060 <USBD_LL_StallEP>
 8009d22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d24:	e020      	b.n	8009d68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fca4 	bl	800a676 <USBD_CtlError>
              break;
 8009d2e:	e01b      	b.n	8009d68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	885b      	ldrh	r3, [r3, #2]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10e      	bne.n	8009d56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00b      	beq.n	8009d56 <USBD_StdEPReq+0xfe>
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	2b80      	cmp	r3, #128	; 0x80
 8009d42:	d008      	beq.n	8009d56 <USBD_StdEPReq+0xfe>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	88db      	ldrh	r3, [r3, #6]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d104      	bne.n	8009d56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 f985 	bl	800b060 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fd58 	bl	800a80c <USBD_CtlSendStatus>

              break;
 8009d5c:	e004      	b.n	8009d68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc88 	bl	800a676 <USBD_CtlError>
              break;
 8009d66:	bf00      	nop
          }
          break;
 8009d68:	e107      	b.n	8009f7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d002      	beq.n	8009d7c <USBD_StdEPReq+0x124>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d016      	beq.n	8009da8 <USBD_StdEPReq+0x150>
 8009d7a:	e04b      	b.n	8009e14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00d      	beq.n	8009d9e <USBD_StdEPReq+0x146>
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b80      	cmp	r3, #128	; 0x80
 8009d86:	d00a      	beq.n	8009d9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 f967 	bl	800b060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d92:	2180      	movs	r1, #128	; 0x80
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 f963 	bl	800b060 <USBD_LL_StallEP>
 8009d9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d9c:	e040      	b.n	8009e20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fc68 	bl	800a676 <USBD_CtlError>
              break;
 8009da6:	e03b      	b.n	8009e20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	885b      	ldrh	r3, [r3, #2]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d136      	bne.n	8009e1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 f96d 	bl	800b09e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fd21 	bl	800a80c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff fde2 	bl	8009998 <USBD_CoreFindEP>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dd8:	7b7b      	ldrb	r3, [r7, #13]
 8009dda:	2bff      	cmp	r3, #255	; 0xff
 8009ddc:	d01f      	beq.n	8009e1e <USBD_StdEPReq+0x1c6>
 8009dde:	7b7b      	ldrb	r3, [r7, #13]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11c      	bne.n	8009e1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009de4:	7b7a      	ldrb	r2, [r7, #13]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009dec:	7b7a      	ldrb	r2, [r7, #13]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	32ae      	adds	r2, #174	; 0xae
 8009df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d010      	beq.n	8009e1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dfc:	7b7a      	ldrb	r2, [r7, #13]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	32ae      	adds	r2, #174	; 0xae
 8009e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4798      	blx	r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e12:	e004      	b.n	8009e1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fc2d 	bl	800a676 <USBD_CtlError>
              break;
 8009e1c:	e000      	b.n	8009e20 <USBD_StdEPReq+0x1c8>
              break;
 8009e1e:	bf00      	nop
          }
          break;
 8009e20:	e0ab      	b.n	8009f7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d002      	beq.n	8009e34 <USBD_StdEPReq+0x1dc>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d032      	beq.n	8009e98 <USBD_StdEPReq+0x240>
 8009e32:	e097      	b.n	8009f64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <USBD_StdEPReq+0x1f2>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b80      	cmp	r3, #128	; 0x80
 8009e3e:	d004      	beq.n	8009e4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fc17 	bl	800a676 <USBD_CtlError>
                break;
 8009e48:	e091      	b.n	8009f6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	da0b      	bge.n	8009e6a <USBD_StdEPReq+0x212>
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	3310      	adds	r3, #16
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	e00b      	b.n	8009e82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	4413      	add	r3, r2
 8009e80:	3304      	adds	r3, #4
 8009e82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fc61 	bl	800a758 <USBD_CtlSendData>
              break;
 8009e96:	e06a      	b.n	8009f6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da11      	bge.n	8009ec4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 020f 	and.w	r2, r3, #15
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	3324      	adds	r3, #36	; 0x24
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d117      	bne.n	8009eea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fbda 	bl	800a676 <USBD_CtlError>
                  break;
 8009ec2:	e054      	b.n	8009f6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	f003 020f 	and.w	r2, r3, #15
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fbc7 	bl	800a676 <USBD_CtlError>
                  break;
 8009ee8:	e041      	b.n	8009f6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da0b      	bge.n	8009f0a <USBD_StdEPReq+0x2b2>
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	3310      	adds	r3, #16
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	4413      	add	r3, r2
 8009f06:	3304      	adds	r3, #4
 8009f08:	e00b      	b.n	8009f22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4413      	add	r3, r2
 8009f20:	3304      	adds	r3, #4
 8009f22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <USBD_StdEPReq+0x2d8>
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d103      	bne.n	8009f38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e00e      	b.n	8009f56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f8cd 	bl	800b0dc <USBD_LL_IsStallEP>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e002      	b.n	8009f56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fbfb 	bl	800a758 <USBD_CtlSendData>
              break;
 8009f62:	e004      	b.n	8009f6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fb85 	bl	800a676 <USBD_CtlError>
              break;
 8009f6c:	bf00      	nop
          }
          break;
 8009f6e:	e004      	b.n	8009f7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fb7f 	bl	800a676 <USBD_CtlError>
          break;
 8009f78:	bf00      	nop
      }
      break;
 8009f7a:	e005      	b.n	8009f88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb79 	bl	800a676 <USBD_CtlError>
      break;
 8009f84:	e000      	b.n	8009f88 <USBD_StdEPReq+0x330>
      break;
 8009f86:	bf00      	nop
  }

  return ret;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b0e      	cmp	r3, #14
 8009fb6:	f200 8152 	bhi.w	800a25e <USBD_GetDescriptor+0x2ca>
 8009fba:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <USBD_GetDescriptor+0x2c>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	0800a031 	.word	0x0800a031
 8009fc4:	0800a049 	.word	0x0800a049
 8009fc8:	0800a089 	.word	0x0800a089
 8009fcc:	0800a25f 	.word	0x0800a25f
 8009fd0:	0800a25f 	.word	0x0800a25f
 8009fd4:	0800a1ff 	.word	0x0800a1ff
 8009fd8:	0800a22b 	.word	0x0800a22b
 8009fdc:	0800a25f 	.word	0x0800a25f
 8009fe0:	0800a25f 	.word	0x0800a25f
 8009fe4:	0800a25f 	.word	0x0800a25f
 8009fe8:	0800a25f 	.word	0x0800a25f
 8009fec:	0800a25f 	.word	0x0800a25f
 8009ff0:	0800a25f 	.word	0x0800a25f
 8009ff4:	0800a25f 	.word	0x0800a25f
 8009ff8:	08009ffd 	.word	0x08009ffd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7c12      	ldrb	r2, [r2, #16]
 800a014:	f107 0108 	add.w	r1, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a01e:	e126      	b.n	800a26e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fb27 	bl	800a676 <USBD_CtlError>
        err++;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	3301      	adds	r3, #1
 800a02c:	72fb      	strb	r3, [r7, #11]
      break;
 800a02e:	e11e      	b.n	800a26e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7c12      	ldrb	r2, [r2, #16]
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
      break;
 800a046:	e112      	b.n	800a26e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	7c1b      	ldrb	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10d      	bne.n	800a06c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a058:	f107 0208 	add.w	r2, r7, #8
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
 800a060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	2202      	movs	r2, #2
 800a068:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a06a:	e100      	b.n	800a26e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	f107 0208 	add.w	r2, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3301      	adds	r3, #1
 800a082:	2202      	movs	r2, #2
 800a084:	701a      	strb	r2, [r3, #0]
      break;
 800a086:	e0f2      	b.n	800a26e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	885b      	ldrh	r3, [r3, #2]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b05      	cmp	r3, #5
 800a090:	f200 80ac 	bhi.w	800a1ec <USBD_GetDescriptor+0x258>
 800a094:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <USBD_GetDescriptor+0x108>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0e9 	.word	0x0800a0e9
 800a0a4:	0800a11d 	.word	0x0800a11d
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a185 	.word	0x0800a185
 800a0b0:	0800a1b9 	.word	0x0800a1b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e091      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 facb 	bl	800a676 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e089      	b.n	800a1fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e077      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fab1 	bl	800a676 <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e06f      	b.n	800a1fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e05d      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa97 	bl	800a676 <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e055      	b.n	800a1fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e043      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa7d 	bl	800a676 <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e03b      	b.n	800a1fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e029      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa63 	bl	800a676 <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e021      	b.n	800a1fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e00f      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa49 	bl	800a676 <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e007      	b.n	800a1fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa41 	bl	800a676 <USBD_CtlError>
          err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1fa:	bf00      	nop
      }
      break;
 800a1fc:	e037      	b.n	800a26e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7c1b      	ldrb	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d109      	bne.n	800a21a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	f107 0208 	add.w	r2, r7, #8
 800a212:	4610      	mov	r0, r2
 800a214:	4798      	blx	r3
 800a216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a218:	e029      	b.n	800a26e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa2a 	bl	800a676 <USBD_CtlError>
        err++;
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	3301      	adds	r3, #1
 800a226:	72fb      	strb	r3, [r7, #11]
      break;
 800a228:	e021      	b.n	800a26e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	7c1b      	ldrb	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10d      	bne.n	800a24e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	f107 0208 	add.w	r2, r7, #8
 800a23e:	4610      	mov	r0, r2
 800a240:	4798      	blx	r3
 800a242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3301      	adds	r3, #1
 800a248:	2207      	movs	r2, #7
 800a24a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a24c:	e00f      	b.n	800a26e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fa10 	bl	800a676 <USBD_CtlError>
        err++;
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	3301      	adds	r3, #1
 800a25a:	72fb      	strb	r3, [r7, #11]
      break;
 800a25c:	e007      	b.n	800a26e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa08 	bl	800a676 <USBD_CtlError>
      err++;
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	3301      	adds	r3, #1
 800a26a:	72fb      	strb	r3, [r7, #11]
      break;
 800a26c:	bf00      	nop
  }

  if (err != 0U)
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d11e      	bne.n	800a2b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d016      	beq.n	800a2aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a27c:	893b      	ldrh	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00e      	beq.n	800a2a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88da      	ldrh	r2, [r3, #6]
 800a286:	893b      	ldrh	r3, [r7, #8]
 800a288:	4293      	cmp	r3, r2
 800a28a:	bf28      	it	cs
 800a28c:	4613      	movcs	r3, r2
 800a28e:	b29b      	uxth	r3, r3
 800a290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a292:	893b      	ldrh	r3, [r7, #8]
 800a294:	461a      	mov	r2, r3
 800a296:	68f9      	ldr	r1, [r7, #12]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fa5d 	bl	800a758 <USBD_CtlSendData>
 800a29e:	e009      	b.n	800a2b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9e7 	bl	800a676 <USBD_CtlError>
 800a2a8:	e004      	b.n	800a2b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 faae 	bl	800a80c <USBD_CtlSendStatus>
 800a2b0:	e000      	b.n	800a2b4 <USBD_GetDescriptor+0x320>
    return;
 800a2b2:	bf00      	nop
  }
}
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop

0800a2bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d131      	bne.n	800a332 <USBD_SetAddress+0x76>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88db      	ldrh	r3, [r3, #6]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d12d      	bne.n	800a332 <USBD_SetAddress+0x76>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	885b      	ldrh	r3, [r3, #2]
 800a2da:	2b7f      	cmp	r3, #127	; 0x7f
 800a2dc:	d829      	bhi.n	800a332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d104      	bne.n	800a300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f9bc 	bl	800a676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	e01d      	b.n	800a33c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7bfa      	ldrb	r2, [r7, #15]
 800a304:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 ff11 	bl	800b134 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa7a 	bl	800a80c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2202      	movs	r2, #2
 800a322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a326:	e009      	b.n	800a33c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a330:	e004      	b.n	800a33c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f99e 	bl	800a676 <USBD_CtlError>
  }
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	885b      	ldrh	r3, [r3, #2]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	4b4e      	ldr	r3, [pc, #312]	; (800a494 <USBD_SetConfig+0x150>)
 800a35a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a35c:	4b4d      	ldr	r3, [pc, #308]	; (800a494 <USBD_SetConfig+0x150>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d905      	bls.n	800a370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f985 	bl	800a676 <USBD_CtlError>
    return USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e08c      	b.n	800a48a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d002      	beq.n	800a382 <USBD_SetConfig+0x3e>
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d029      	beq.n	800a3d4 <USBD_SetConfig+0x90>
 800a380:	e075      	b.n	800a46e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a382:	4b44      	ldr	r3, [pc, #272]	; (800a494 <USBD_SetConfig+0x150>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d020      	beq.n	800a3cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a38a:	4b42      	ldr	r3, [pc, #264]	; (800a494 <USBD_SetConfig+0x150>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a394:	4b3f      	ldr	r3, [pc, #252]	; (800a494 <USBD_SetConfig+0x150>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7fe ffbd 	bl	800931a <USBD_SetClassConfig>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d008      	beq.n	800a3bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f962 	bl	800a676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3ba:	e065      	b.n	800a488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fa25 	bl	800a80c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3ca:	e05d      	b.n	800a488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fa1d 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a3d2:	e059      	b.n	800a488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3d4:	4b2f      	ldr	r3, [pc, #188]	; (800a494 <USBD_SetConfig+0x150>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d112      	bne.n	800a402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3e4:	4b2b      	ldr	r3, [pc, #172]	; (800a494 <USBD_SetConfig+0x150>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ee:	4b29      	ldr	r3, [pc, #164]	; (800a494 <USBD_SetConfig+0x150>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7fe ffac 	bl	8009352 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa06 	bl	800a80c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a400:	e042      	b.n	800a488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a402:	4b24      	ldr	r3, [pc, #144]	; (800a494 <USBD_SetConfig+0x150>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d02a      	beq.n	800a466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7fe ff9a 	bl	8009352 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a41e:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <USBD_SetConfig+0x150>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a428:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <USBD_SetConfig+0x150>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7fe ff73 	bl	800931a <USBD_SetClassConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00f      	beq.n	800a45e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f918 	bl	800a676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fe ff7f 	bl	8009352 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a45c:	e014      	b.n	800a488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f9d4 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a464:	e010      	b.n	800a488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9d0 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a46c:	e00c      	b.n	800a488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f900 	bl	800a676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <USBD_SetConfig+0x150>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7fe ff68 	bl	8009352 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a482:	2303      	movs	r3, #3
 800a484:	73fb      	strb	r3, [r7, #15]
      break;
 800a486:	bf00      	nop
  }

  return ret;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20000408 	.word	0x20000408

0800a498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	88db      	ldrh	r3, [r3, #6]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d004      	beq.n	800a4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f8e2 	bl	800a676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4b2:	e023      	b.n	800a4fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	dc02      	bgt.n	800a4c6 <USBD_GetConfig+0x2e>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dc03      	bgt.n	800a4cc <USBD_GetConfig+0x34>
 800a4c4:	e015      	b.n	800a4f2 <USBD_GetConfig+0x5a>
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d00b      	beq.n	800a4e2 <USBD_GetConfig+0x4a>
 800a4ca:	e012      	b.n	800a4f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f93c 	bl	800a758 <USBD_CtlSendData>
        break;
 800a4e0:	e00c      	b.n	800a4fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f934 	bl	800a758 <USBD_CtlSendData>
        break;
 800a4f0:	e004      	b.n	800a4fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8be 	bl	800a676 <USBD_CtlError>
        break;
 800a4fa:	bf00      	nop
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a514:	b2db      	uxtb	r3, r3
 800a516:	3b01      	subs	r3, #1
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d81e      	bhi.n	800a55a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	88db      	ldrh	r3, [r3, #6]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d004      	beq.n	800a52e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f8a5 	bl	800a676 <USBD_CtlError>
        break;
 800a52c:	e01a      	b.n	800a564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f043 0202 	orr.w	r2, r3, #2
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	330c      	adds	r3, #12
 800a54e:	2202      	movs	r2, #2
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f900 	bl	800a758 <USBD_CtlSendData>
      break;
 800a558:	e004      	b.n	800a564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f88a 	bl	800a676 <USBD_CtlError>
      break;
 800a562:	bf00      	nop
  }
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d107      	bne.n	800a58e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f940 	bl	800a80c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a58c:	e013      	b.n	800a5b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	885b      	ldrh	r3, [r3, #2]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d10b      	bne.n	800a5ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	889b      	ldrh	r3, [r3, #4]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f930 	bl	800a80c <USBD_CtlSendStatus>
}
 800a5ac:	e003      	b.n	800a5b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f860 	bl	800a676 <USBD_CtlError>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d80b      	bhi.n	800a5ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	885b      	ldrh	r3, [r3, #2]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d10c      	bne.n	800a5f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f910 	bl	800a80c <USBD_CtlSendStatus>
      }
      break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f840 	bl	800a676 <USBD_CtlError>
      break;
 800a5f6:	e000      	b.n	800a5fa <USBD_ClrFeature+0x3c>
      break;
 800a5f8:	bf00      	nop
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	781a      	ldrb	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fa17 	bl	8009a60 <SWAPBYTE>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fa0a 	bl	8009a60 <SWAPBYTE>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff f9fd 	bl	8009a60 <SWAPBYTE>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	80da      	strh	r2, [r3, #6]
}
 800a66e:	bf00      	nop
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a680:	2180      	movs	r1, #128	; 0x80
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fcec 	bl	800b060 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fce8 	bl	800b060 <USBD_LL_StallEP>
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d036      	beq.n	800a71c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6b2:	6938      	ldr	r0, [r7, #16]
 800a6b4:	f000 f836 	bl	800a724 <USBD_GetLen>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	4413      	add	r3, r2
 800a6de:	2203      	movs	r2, #3
 800a6e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6e8:	e013      	b.n	800a712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	7812      	ldrb	r2, [r2, #0]
 800a6f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	613b      	str	r3, [r7, #16]
    idx++;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	3301      	adds	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	4413      	add	r3, r2
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	3301      	adds	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e7      	bne.n	800a6ea <USBD_GetString+0x52>
 800a71a:	e000      	b.n	800a71e <USBD_GetString+0x86>
    return;
 800a71c:	bf00      	nop
  }
}
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a734:	e005      	b.n	800a742 <USBD_GetLen+0x1e>
  {
    len++;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3301      	adds	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	3301      	adds	r3, #1
 800a740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1f5      	bne.n	800a736 <USBD_GetLen+0x12>
  }

  return len;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2202      	movs	r2, #2
 800a768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fcf7 	bl	800b172 <USBD_LL_Transmit>

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fce6 	bl	800b172 <USBD_LL_Transmit>

  return USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2203      	movs	r2, #3
 800a7c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fcea 	bl	800b1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fcd9 	bl	800b1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2204      	movs	r2, #4
 800a818:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a81c:	2300      	movs	r3, #0
 800a81e:	2200      	movs	r2, #0
 800a820:	2100      	movs	r1, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fca5 	bl	800b172 <USBD_LL_Transmit>

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a842:	2300      	movs	r3, #0
 800a844:	2200      	movs	r2, #0
 800a846:	2100      	movs	r1, #0
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fcb3 	bl	800b1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a85c:	2200      	movs	r2, #0
 800a85e:	4912      	ldr	r1, [pc, #72]	; (800a8a8 <MX_USB_DEVICE_Init+0x50>)
 800a860:	4812      	ldr	r0, [pc, #72]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a862:	f7fe fcdd 	bl	8009220 <USBD_Init>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a86c:	f7f7 f84a 	bl	8001904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a870:	490f      	ldr	r1, [pc, #60]	; (800a8b0 <MX_USB_DEVICE_Init+0x58>)
 800a872:	480e      	ldr	r0, [pc, #56]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a874:	f7fe fd04 	bl	8009280 <USBD_RegisterClass>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a87e:	f7f7 f841 	bl	8001904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a882:	490c      	ldr	r1, [pc, #48]	; (800a8b4 <MX_USB_DEVICE_Init+0x5c>)
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a886:	f7fe fc3b 	bl	8009100 <USBD_CDC_RegisterInterface>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a890:	f7f7 f838 	bl	8001904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a894:	4805      	ldr	r0, [pc, #20]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a896:	f7fe fd29 	bl	80092ec <USBD_Start>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8a0:	f7f7 f830 	bl	8001904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8a4:	bf00      	nop
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200000b0 	.word	0x200000b0
 800a8ac:	2000040c 	.word	0x2000040c
 800a8b0:	2000001c 	.word	0x2000001c
 800a8b4:	2000009c 	.word	0x2000009c

0800a8b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4905      	ldr	r1, [pc, #20]	; (800a8d4 <CDC_Init_FS+0x1c>)
 800a8c0:	4805      	ldr	r0, [pc, #20]	; (800a8d8 <CDC_Init_FS+0x20>)
 800a8c2:	f7fe fc37 	bl	8009134 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8c6:	4905      	ldr	r1, [pc, #20]	; (800a8dc <CDC_Init_FS+0x24>)
 800a8c8:	4803      	ldr	r0, [pc, #12]	; (800a8d8 <CDC_Init_FS+0x20>)
 800a8ca:	f7fe fc55 	bl	8009178 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20000ee8 	.word	0x20000ee8
 800a8d8:	2000040c 	.word	0x2000040c
 800a8dc:	200006e8 	.word	0x200006e8

0800a8e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	2b23      	cmp	r3, #35	; 0x23
 800a904:	d84a      	bhi.n	800a99c <CDC_Control_FS+0xac>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <CDC_Control_FS+0x1c>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a99d 	.word	0x0800a99d
 800a910:	0800a99d 	.word	0x0800a99d
 800a914:	0800a99d 	.word	0x0800a99d
 800a918:	0800a99d 	.word	0x0800a99d
 800a91c:	0800a99d 	.word	0x0800a99d
 800a920:	0800a99d 	.word	0x0800a99d
 800a924:	0800a99d 	.word	0x0800a99d
 800a928:	0800a99d 	.word	0x0800a99d
 800a92c:	0800a99d 	.word	0x0800a99d
 800a930:	0800a99d 	.word	0x0800a99d
 800a934:	0800a99d 	.word	0x0800a99d
 800a938:	0800a99d 	.word	0x0800a99d
 800a93c:	0800a99d 	.word	0x0800a99d
 800a940:	0800a99d 	.word	0x0800a99d
 800a944:	0800a99d 	.word	0x0800a99d
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a99d 	.word	0x0800a99d
 800a958:	0800a99d 	.word	0x0800a99d
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a99d 	.word	0x0800a99d
 800a964:	0800a99d 	.word	0x0800a99d
 800a968:	0800a99d 	.word	0x0800a99d
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a99d 	.word	0x0800a99d
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a99d 	.word	0x0800a99d
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a99d 	.word	0x0800a99d
 800a994:	0800a99d 	.word	0x0800a99d
 800a998:	0800a99d 	.word	0x0800a99d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a99c:	bf00      	nop
  }

  return (USBD_OK);
 800a99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4809      	ldr	r0, [pc, #36]	; (800a9e0 <CDC_Receive_FS+0x34>)
 800a9ba:	f7fe fbdd 	bl	8009178 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9be:	4808      	ldr	r0, [pc, #32]	; (800a9e0 <CDC_Receive_FS+0x34>)
 800a9c0:	f7fe fbf8 	bl	80091b4 <USBD_CDC_ReceivePacket>

	  //memset (buffer, '\0', 64);  // clear the buffer
	  uint8_t len = (uint8_t)*Len;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4804      	ldr	r0, [pc, #16]	; (800a9e4 <CDC_Receive_FS+0x38>)
 800a9d2:	f000 fcd9 	bl	800b388 <memcpy>
	  //memset(Buf, '\0', len);   // clear the Buf also
  return (USBD_OK);
 800a9d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	2000040c 	.word	0x2000040c
 800a9e4:	20000214 	.word	0x20000214

0800a9e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2212      	movs	r2, #18
 800aa1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa1e:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	200000d0 	.word	0x200000d0

0800aa30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	200000f0 	.word	0x200000f0

0800aa54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4907      	ldr	r1, [pc, #28]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa6a:	4808      	ldr	r0, [pc, #32]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa6c:	f7ff fe14 	bl	800a698 <USBD_GetString>
 800aa70:	e004      	b.n	800aa7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4904      	ldr	r1, [pc, #16]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa78:	f7ff fe0e 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	200016e8 	.word	0x200016e8
 800aa8c:	0800b3cc 	.word	0x0800b3cc

0800aa90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	4904      	ldr	r1, [pc, #16]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aaa2:	f7ff fdf9 	bl	800a698 <USBD_GetString>
  return USBD_StrDesc;
 800aaa6:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	200016e8 	.word	0x200016e8
 800aab4:	0800b3e4 	.word	0x0800b3e4

0800aab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	221a      	movs	r2, #26
 800aac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaca:	f000 f855 	bl	800ab78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aace:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	200000f4 	.word	0x200000f4

0800aadc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaf2:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaf4:	f7ff fdd0 	bl	800a698 <USBD_GetString>
 800aaf8:	e004      	b.n	800ab04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aafe:	4805      	ldr	r0, [pc, #20]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab00:	f7ff fdca 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	200016e8 	.word	0x200016e8
 800ab14:	0800b3f8 	.word	0x0800b3f8

0800ab18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4907      	ldr	r1, [pc, #28]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab2e:	4808      	ldr	r0, [pc, #32]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab30:	f7ff fdb2 	bl	800a698 <USBD_GetString>
 800ab34:	e004      	b.n	800ab40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab3a:	4805      	ldr	r0, [pc, #20]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab3c:	f7ff fdac 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200016e8 	.word	0x200016e8
 800ab50:	0800b404 	.word	0x0800b404

0800ab54 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	220c      	movs	r2, #12
 800ab64:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab66:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	200000e4 	.word	0x200000e4

0800ab78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <Get_SerialNum+0x44>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <Get_SerialNum+0x48>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab8a:	4b0e      	ldr	r3, [pc, #56]	; (800abc4 <Get_SerialNum+0x4c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4413      	add	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d009      	beq.n	800abb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab9e:	2208      	movs	r2, #8
 800aba0:	4909      	ldr	r1, [pc, #36]	; (800abc8 <Get_SerialNum+0x50>)
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 f814 	bl	800abd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aba8:	2204      	movs	r2, #4
 800abaa:	4908      	ldr	r1, [pc, #32]	; (800abcc <Get_SerialNum+0x54>)
 800abac:	68b8      	ldr	r0, [r7, #8]
 800abae:	f000 f80f 	bl	800abd0 <IntToUnicode>
  }
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	1fff7a10 	.word	0x1fff7a10
 800abc0:	1fff7a14 	.word	0x1fff7a14
 800abc4:	1fff7a18 	.word	0x1fff7a18
 800abc8:	200000f6 	.word	0x200000f6
 800abcc:	20000106 	.word	0x20000106

0800abd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	4613      	mov	r3, r2
 800abdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]
 800abe6:	e027      	b.n	800ac38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	0f1b      	lsrs	r3, r3, #28
 800abec:	2b09      	cmp	r3, #9
 800abee:	d80b      	bhi.n	800ac08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	0f1b      	lsrs	r3, r3, #28
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4619      	mov	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	440b      	add	r3, r1
 800ac00:	3230      	adds	r2, #48	; 0x30
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	e00a      	b.n	800ac1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	0f1b      	lsrs	r3, r3, #28
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4619      	mov	r1, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	440b      	add	r3, r1
 800ac18:	3237      	adds	r2, #55	; 0x37
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	011b      	lsls	r3, r3, #4
 800ac22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	3301      	adds	r3, #1
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	3301      	adds	r3, #1
 800ac36:	75fb      	strb	r3, [r7, #23]
 800ac38:	7dfa      	ldrb	r2, [r7, #23]
 800ac3a:	79fb      	ldrb	r3, [r7, #7]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d3d3      	bcc.n	800abe8 <IntToUnicode+0x18>
  }
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
	...

0800ac50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b0a0      	sub	sp, #128	; 0x80
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	605a      	str	r2, [r3, #4]
 800ac62:	609a      	str	r2, [r3, #8]
 800ac64:	60da      	str	r2, [r3, #12]
 800ac66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac68:	f107 0310 	add.w	r3, r7, #16
 800ac6c:	225c      	movs	r2, #92	; 0x5c
 800ac6e:	2100      	movs	r1, #0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fb97 	bl	800b3a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac7e:	d149      	bne.n	800ad14 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ac80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ac86:	2300      	movs	r3, #0
 800ac88:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac8a:	f107 0310 	add.w	r3, r7, #16
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f9 fbec 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ac9a:	f7f6 fe33 	bl	8001904 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	4b1e      	ldr	r3, [pc, #120]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800aca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca6:	4a1d      	ldr	r2, [pc, #116]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800aca8:	f043 0301 	orr.w	r3, r3, #1
 800acac:	6313      	str	r3, [r2, #48]	; 0x30
 800acae:	4b1b      	ldr	r3, [pc, #108]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acc0:	2302      	movs	r3, #2
 800acc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc4:	2300      	movs	r3, #0
 800acc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acc8:	2303      	movs	r3, #3
 800acca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800accc:	230a      	movs	r3, #10
 800acce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800acd4:	4619      	mov	r1, r3
 800acd6:	4812      	ldr	r0, [pc, #72]	; (800ad20 <HAL_PCD_MspInit+0xd0>)
 800acd8:	f7f7 fe38 	bl	800294c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800acdc:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800acde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace0:	4a0e      	ldr	r2, [pc, #56]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800ace2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace6:	6353      	str	r3, [r2, #52]	; 0x34
 800ace8:	2300      	movs	r3, #0
 800acea:	60bb      	str	r3, [r7, #8]
 800acec:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800acee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800acf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acf6:	6453      	str	r3, [r2, #68]	; 0x44
 800acf8:	4b08      	ldr	r3, [pc, #32]	; (800ad1c <HAL_PCD_MspInit+0xcc>)
 800acfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad00:	60bb      	str	r3, [r7, #8]
 800ad02:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad04:	2200      	movs	r2, #0
 800ad06:	2100      	movs	r1, #0
 800ad08:	2043      	movs	r0, #67	; 0x43
 800ad0a:	f7f7 fdc6 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad0e:	2043      	movs	r0, #67	; 0x43
 800ad10:	f7f7 fddf 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad14:	bf00      	nop
 800ad16:	3780      	adds	r7, #128	; 0x80
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	40020000 	.word	0x40020000

0800ad24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7fe fb23 	bl	8009386 <USBD_LL_SetupStage>
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad5a:	78fa      	ldrb	r2, [r7, #3]
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	4619      	mov	r1, r3
 800ad72:	f7fe fb5d 	bl	8009430 <USBD_LL_DataOutStage>
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad90:	78fa      	ldrb	r2, [r7, #3]
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	4613      	mov	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	334c      	adds	r3, #76	; 0x4c
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	4619      	mov	r1, r3
 800ada6:	f7fe fbf6 	bl	8009596 <USBD_LL_DataInStage>
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fd2a 	bl	800981a <USBD_LL_SOF>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800add6:	2301      	movs	r3, #1
 800add8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
 800ade6:	e008      	b.n	800adfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d102      	bne.n	800adf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800adf0:	2301      	movs	r3, #1
 800adf2:	73fb      	strb	r3, [r7, #15]
 800adf4:	e001      	b.n	800adfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800adf6:	f7f6 fd85 	bl	8001904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae00:	7bfa      	ldrb	r2, [r7, #15]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fe fcca 	bl	800979e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fc72 	bl	80096fa <USBD_LL_Reset>
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fcc5 	bl	80097be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	6812      	ldr	r2, [r2, #0]
 800ae42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae54:	4b04      	ldr	r3, [pc, #16]	; (800ae68 <HAL_PCD_SuspendCallback+0x48>)
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	4a03      	ldr	r2, [pc, #12]	; (800ae68 <HAL_PCD_SuspendCallback+0x48>)
 800ae5a:	f043 0306 	orr.w	r3, r3, #6
 800ae5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed00 	.word	0xe000ed00

0800ae6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fcb5 	bl	80097ea <USBD_LL_Resume>
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fd0d 	bl	80098be <USBD_LL_IsoOUTIncomplete>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fcc9 	bl	800985a <USBD_LL_IsoINIncomplete>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fe fd1f 	bl	8009922 <USBD_LL_DevConnected>
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe fd1c 	bl	8009938 <USBD_LL_DevDisconnected>
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d13c      	bne.n	800af92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af18:	4a20      	ldr	r2, [pc, #128]	; (800af9c <USBD_LL_Init+0x94>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <USBD_LL_Init+0x94>)
 800af24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af28:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <USBD_LL_Init+0x94>)
 800af2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <USBD_LL_Init+0x94>)
 800af32:	2206      	movs	r2, #6
 800af34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af36:	4b19      	ldr	r3, [pc, #100]	; (800af9c <USBD_LL_Init+0x94>)
 800af38:	2202      	movs	r2, #2
 800af3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <USBD_LL_Init+0x94>)
 800af3e:	2200      	movs	r2, #0
 800af40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af42:	4b16      	ldr	r3, [pc, #88]	; (800af9c <USBD_LL_Init+0x94>)
 800af44:	2202      	movs	r2, #2
 800af46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af48:	4b14      	ldr	r3, [pc, #80]	; (800af9c <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <USBD_LL_Init+0x94>)
 800af50:	2200      	movs	r2, #0
 800af52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <USBD_LL_Init+0x94>)
 800af56:	2200      	movs	r2, #0
 800af58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <USBD_LL_Init+0x94>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <USBD_LL_Init+0x94>)
 800af62:	2200      	movs	r2, #0
 800af64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <USBD_LL_Init+0x94>)
 800af68:	f7f7 fe9d 	bl	8002ca6 <HAL_PCD_Init>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af72:	f7f6 fcc7 	bl	8001904 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af76:	2180      	movs	r1, #128	; 0x80
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <USBD_LL_Init+0x94>)
 800af7a:	f7f9 f928 	bl	80041ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af7e:	2240      	movs	r2, #64	; 0x40
 800af80:	2100      	movs	r1, #0
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <USBD_LL_Init+0x94>)
 800af84:	f7f9 f8dc 	bl	8004140 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	2101      	movs	r1, #1
 800af8c:	4803      	ldr	r0, [pc, #12]	; (800af9c <USBD_LL_Init+0x94>)
 800af8e:	f7f9 f8d7 	bl	8004140 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200018e8 	.word	0x200018e8

0800afa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f7 ff99 	bl	8002eee <HAL_PCD_Start>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 f990 	bl	800b2e8 <USBD_Get_USB_Status>
 800afc8:	4603      	mov	r3, r0
 800afca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	461a      	mov	r2, r3
 800afe4:	4603      	mov	r3, r0
 800afe6:	70fb      	strb	r3, [r7, #3]
 800afe8:	460b      	mov	r3, r1
 800afea:	70bb      	strb	r3, [r7, #2]
 800afec:	4613      	mov	r3, r2
 800afee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800affe:	78bb      	ldrb	r3, [r7, #2]
 800b000:	883a      	ldrh	r2, [r7, #0]
 800b002:	78f9      	ldrb	r1, [r7, #3]
 800b004:	f7f8 fc97 	bl	8003936 <HAL_PCD_EP_Open>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f96a 	bl	800b2e8 <USBD_Get_USB_Status>
 800b014:	4603      	mov	r3, r0
 800b016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b018:	7bbb      	ldrb	r3, [r7, #14]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b03c:	78fa      	ldrb	r2, [r7, #3]
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7f8 fce0 	bl	8003a06 <HAL_PCD_EP_Close>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 f94b 	bl	800b2e8 <USBD_Get_USB_Status>
 800b052:	4603      	mov	r3, r0
 800b054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b056:	7bbb      	ldrb	r3, [r7, #14]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b07a:	78fa      	ldrb	r2, [r7, #3]
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f8 fdb8 	bl	8003bf4 <HAL_PCD_EP_SetStall>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 f92c 	bl	800b2e8 <USBD_Get_USB_Status>
 800b090:	4603      	mov	r3, r0
 800b092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b094:	7bbb      	ldrb	r3, [r7, #14]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0b8:	78fa      	ldrb	r2, [r7, #3]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f8 fdfd 	bl	8003cbc <HAL_PCD_EP_ClrStall>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 f90d 	bl	800b2e8 <USBD_Get_USB_Status>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	da0b      	bge.n	800b110 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0fe:	68f9      	ldr	r1, [r7, #12]
 800b100:	4613      	mov	r3, r2
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	333e      	adds	r3, #62	; 0x3e
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	e00b      	b.n	800b128 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b116:	68f9      	ldr	r1, [r7, #12]
 800b118:	4613      	mov	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b126:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b14e:	78fa      	ldrb	r2, [r7, #3]
 800b150:	4611      	mov	r1, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f7f8 fbca 	bl	80038ec <HAL_PCD_SetAddress>
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f8c2 	bl	800b2e8 <USBD_Get_USB_Status>
 800b164:	4603      	mov	r3, r0
 800b166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b168:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b086      	sub	sp, #24
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
 800b17e:	460b      	mov	r3, r1
 800b180:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b190:	7af9      	ldrb	r1, [r7, #11]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	f7f8 fce3 	bl	8003b60 <HAL_PCD_EP_Transmit>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 f8a1 	bl	800b2e8 <USBD_Get_USB_Status>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	607a      	str	r2, [r7, #4]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1d2:	7af9      	ldrb	r1, [r7, #11]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	f7f8 fc5f 	bl	8003a9a <HAL_PCD_EP_Receive>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f880 	bl	800b2e8 <USBD_Get_USB_Status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b208:	78fa      	ldrb	r2, [r7, #3]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7f8 fc8f 	bl	8003b30 <HAL_PCD_EP_GetRxCount>
 800b212:	4603      	mov	r3, r0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <HAL_PCDEx_LPM_Callback+0x18>
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d01f      	beq.n	800b272 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b232:	e03b      	b.n	800b2ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b23c:	f7f6 faf6 	bl	800182c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b240:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	4a1b      	ldr	r2, [pc, #108]	; (800b2b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b246:	f023 0306 	bic.w	r3, r3, #6
 800b24a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b25e:	f023 0301 	bic.w	r3, r3, #1
 800b262:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fabd 	bl	80097ea <USBD_LL_Resume>
    break;
 800b270:	e01c      	b.n	800b2ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	6812      	ldr	r2, [r2, #0]
 800b280:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fa94 	bl	80097be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b29e:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b2a4:	f043 0306 	orr.w	r3, r3, #6
 800b2a8:	6113      	str	r3, [r2, #16]
    break;
 800b2aa:	bf00      	nop
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	e000ed00 	.word	0xe000ed00

0800b2b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2c0:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <USBD_static_malloc+0x18>)
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20001df4 	.word	0x20001df4

0800b2d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]

}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d817      	bhi.n	800b32c <USBD_Get_USB_Status+0x44>
 800b2fc:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <USBD_Get_USB_Status+0x1c>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b31b 	.word	0x0800b31b
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b327 	.word	0x0800b327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
    break;
 800b318:	e00b      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b31a:	2303      	movs	r3, #3
 800b31c:	73fb      	strb	r3, [r7, #15]
    break;
 800b31e:	e008      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]
    break;
 800b324:	e005      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	73fb      	strb	r3, [r7, #15]
    break;
 800b32a:	e002      	b.n	800b332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	73fb      	strb	r3, [r7, #15]
    break;
 800b330:	bf00      	nop
  }
  return usb_status;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <__libc_init_array>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	4d0d      	ldr	r5, [pc, #52]	; (800b378 <__libc_init_array+0x38>)
 800b344:	4c0d      	ldr	r4, [pc, #52]	; (800b37c <__libc_init_array+0x3c>)
 800b346:	1b64      	subs	r4, r4, r5
 800b348:	10a4      	asrs	r4, r4, #2
 800b34a:	2600      	movs	r6, #0
 800b34c:	42a6      	cmp	r6, r4
 800b34e:	d109      	bne.n	800b364 <__libc_init_array+0x24>
 800b350:	4d0b      	ldr	r5, [pc, #44]	; (800b380 <__libc_init_array+0x40>)
 800b352:	4c0c      	ldr	r4, [pc, #48]	; (800b384 <__libc_init_array+0x44>)
 800b354:	f000 f82e 	bl	800b3b4 <_init>
 800b358:	1b64      	subs	r4, r4, r5
 800b35a:	10a4      	asrs	r4, r4, #2
 800b35c:	2600      	movs	r6, #0
 800b35e:	42a6      	cmp	r6, r4
 800b360:	d105      	bne.n	800b36e <__libc_init_array+0x2e>
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	f855 3b04 	ldr.w	r3, [r5], #4
 800b368:	4798      	blx	r3
 800b36a:	3601      	adds	r6, #1
 800b36c:	e7ee      	b.n	800b34c <__libc_init_array+0xc>
 800b36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b372:	4798      	blx	r3
 800b374:	3601      	adds	r6, #1
 800b376:	e7f2      	b.n	800b35e <__libc_init_array+0x1e>
 800b378:	0800b434 	.word	0x0800b434
 800b37c:	0800b434 	.word	0x0800b434
 800b380:	0800b434 	.word	0x0800b434
 800b384:	0800b438 	.word	0x0800b438

0800b388 <memcpy>:
 800b388:	440a      	add	r2, r1
 800b38a:	4291      	cmp	r1, r2
 800b38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b390:	d100      	bne.n	800b394 <memcpy+0xc>
 800b392:	4770      	bx	lr
 800b394:	b510      	push	{r4, lr}
 800b396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b39e:	4291      	cmp	r1, r2
 800b3a0:	d1f9      	bne.n	800b396 <memcpy+0xe>
 800b3a2:	bd10      	pop	{r4, pc}

0800b3a4 <memset>:
 800b3a4:	4402      	add	r2, r0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d100      	bne.n	800b3ae <memset+0xa>
 800b3ac:	4770      	bx	lr
 800b3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b2:	e7f9      	b.n	800b3a8 <memset+0x4>

0800b3b4 <_init>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr

0800b3c0 <_fini>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	bf00      	nop
 800b3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c6:	bc08      	pop	{r3}
 800b3c8:	469e      	mov	lr, r3
 800b3ca:	4770      	bx	lr
