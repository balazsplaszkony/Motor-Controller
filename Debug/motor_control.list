
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc0  08009bc0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bc8  08009bc8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08009bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e9c  20000110  08009ce0  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  08009ce0  00021fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0ed  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ca3  00000000  00000000  0003f22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  000457a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a77  00000000  00000000  00046e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006eee  00000000  00000000  0005c8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0006379d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006554  00000000  00000000  000637f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009b48 	.word	0x08009b48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	08009b48 	.word	0x08009b48

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <PIDContollerUpdate>:
	PID.output = 0;
	PID.setpoint = 0;
	PID.updated = false;
}

void PIDContollerUpdate(float measurement){
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	ed87 0a01 	vstr	s0, [r7, #4]

	float error = PID.setpoint - measurement;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000514:	ed93 7a03 	vldr	s14, [r3, #12]
 8000518:	edd7 7a01 	vldr	s15, [r7, #4]
 800051c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000520:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = PID.Kp * error;
 8000524:	4b35      	ldr	r3, [pc, #212]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000526:	edd3 7a00 	vldr	s15, [r3]
 800052a:	ed97 7a05 	vldr	s14, [r7, #20]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	edc7 7a04 	vstr	s15, [r7, #16]

    PID.integral += PID.Ki * error;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000538:	ed93 7a01 	vldr	s14, [r3, #4]
 800053c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000546:	edd3 7a04 	vldr	s15, [r3, #16]
 800054a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000550:	edc3 7a04 	vstr	s15, [r3, #16]

    // Limit the integral term to prevent windup
    if (PID.integral > MAX_PID_OUTPUT) {
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000556:	edd3 7a04 	vldr	s15, [r3, #16]
 800055a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000600 <PIDContollerUpdate+0xf8>
 800055e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000566:	dd03      	ble.n	8000570 <PIDContollerUpdate+0x68>
    		PID.integral = MAX_PID_OUTPUT;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <PIDContollerUpdate+0xf4>)
 800056a:	4a26      	ldr	r2, [pc, #152]	; (8000604 <PIDContollerUpdate+0xfc>)
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	e00b      	b.n	8000588 <PIDContollerUpdate+0x80>
        }
    else if (PID.integral < MIN_PID_OUTPUT) {
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000572:	edd3 7a04 	vldr	s15, [r3, #16]
 8000576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057e:	d503      	bpl.n	8000588 <PIDContollerUpdate+0x80>
    		PID.integral = MIN_PID_OUTPUT;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
        }

    float derivative = PID.Kd * (error - PID.last_error);
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <PIDContollerUpdate+0xf4>)
 800058a:	ed93 7a02 	vldr	s14, [r3, #8]
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000590:	edd3 7a05 	vldr	s15, [r3, #20]
 8000594:	edd7 6a05 	vldr	s13, [r7, #20]
 8000598:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800059c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a0:	edc7 7a03 	vstr	s15, [r7, #12]

    PID.output = proportional + PID.integral + derivative;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80005aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005be:	ee17 2a90 	vmov	r2, s15
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c4:	619a      	str	r2, [r3, #24]

    // Limit the output to within the allowable range
    if (PID.output > MAX_PID_OUTPUT) {
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ce:	d904      	bls.n	80005da <PIDContollerUpdate+0xd2>
    	PID.output = MAX_PID_OUTPUT;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	e001      	b.n	80005de <PIDContollerUpdate+0xd6>
      }
    else if (PID.output < MIN_PID_OUTPUT) {
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005dc:	699b      	ldr	r3, [r3, #24]
    	PID.output = MIN_PID_OUTPUT;
      }
    PID.output += PID_OUTPUT_OFFSET;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e8:	6193      	str	r3, [r2, #24]

    PID.last_error = error;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	6153      	str	r3, [r2, #20]

}
 80005f0:	bf00      	nop
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	2000012c 	.word	0x2000012c
 8000600:	447a0000 	.word	0x447a0000
 8000604:	447a0000 	.word	0x447a0000

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC1_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC1_Init+0x98>)
 800066a:	f000 ff11 	bl	8001490 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 fbac 	bl	8000dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	2301      	movs	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC1_Init+0x98>)
 800068a:	f000 ff45 	bl	8001518 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 fb9c 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000014c 	.word	0x2000014c
 80006a4:	40012000 	.word	0x40012000
 80006a8:	0f000001 	.word	0x0f000001

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d127      	bne.n	800071e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_ADC_MspInit+0x84>)
 800071a:	f001 fa5f 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40012000 	.word	0x40012000
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <GetTotalTime>:

	characteristic.updated = true;
}

uint32_t GetTotalTime()
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	return characteristic.rise_time + characteristic.fall_time + characteristic.hold_time;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <GetTotalTime+0x20>)
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <GetTotalTime+0x20>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	441a      	add	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <GetTotalTime+0x20>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4413      	add	r3, r2
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000194 	.word	0x20000194

08000758 <isCharacteristicUpdated>:
{
	return (characteristic.maximum_RPM - characteristic.baseRPM) / characteristic.delta_falling;
}

bool isCharacteristicUpdated()
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
	bool retval = characteristic.updated;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000764:	71fb      	strb	r3, [r7, #7]
	if(characteristic.updated)
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d011      	beq.n	8000796 <isCharacteristicUpdated+0x3e>
		characteristic.updated = !characteristic.updated;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf14      	ite	ne
 800077e:	2301      	movne	r3, #1
 8000780:	2300      	moveq	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f083 0301 	eor.w	r3, r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000792:	f883 2020 	strb.w	r2, [r3, #32]

	return retval;
 8000796:	79fb      	ldrb	r3, [r7, #7]
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000194 	.word	0x20000194

080007a8 <CalculateSetPoint>:

uint32_t CalculateSetPoint(bool reset)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	static uint32_t counter = 0;
	static uint32_t setpoint = 0;
	if(reset)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <CalculateSetPoint+0x20>
	{
		counter = 0;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <CalculateSetPoint+0xd4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
		setpoint = characteristic.baseRPM;
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <CalculateSetPoint+0xd8>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <CalculateSetPoint+0xdc>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e010      	b.n	80007ea <CalculateSetPoint+0x42>
	}

	else
		counter = (counter + 1) % (MOTOR_TIM7_FREQ * GetTotalTime());
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <CalculateSetPoint+0xd4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5c      	adds	r4, r3, #1
 80007ce:	f7ff ffb1 	bl	8000734 <GetTotalTime>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	fbb4 f2f3 	udiv	r2, r4, r3
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	1ae3      	subs	r3, r4, r3
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <CalculateSetPoint+0xd4>)
 80007e8:	6013      	str	r3, [r2, #0]

	if(counter < MOTOR_TIM7_FREQ * characteristic.rise_time)
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <CalculateSetPoint+0xd8>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80007f2:	fb03 f202 	mul.w	r2, r3, r2
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <CalculateSetPoint+0xd4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d907      	bls.n	800080e <CalculateSetPoint+0x66>
		setpoint += characteristic.delta_rising;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <CalculateSetPoint+0xd8>)
 8000800:	699a      	ldr	r2, [r3, #24]
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <CalculateSetPoint+0xdc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <CalculateSetPoint+0xdc>)
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	e030      	b.n	8000870 <CalculateSetPoint+0xc8>

	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <CalculateSetPoint+0xd8>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f242 7210 	movw	r2, #10000	; 0x2710
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <CalculateSetPoint+0xd4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d20c      	bcs.n	800083c <CalculateSetPoint+0x94>
			counter < MOTOR_TIM7_FREQ * characteristic.rise_time + characteristic.hold_time)
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <CalculateSetPoint+0xd8>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f242 7210 	movw	r2, #10000	; 0x2710
 800082a:	fb03 f202 	mul.w	r2, r3, r2
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <CalculateSetPoint+0xd8>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	441a      	add	r2, r3
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <CalculateSetPoint+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 8000838:	429a      	cmp	r2, r3
 800083a:	d819      	bhi.n	8000870 <CalculateSetPoint+0xc8>
	{
		;
	}

	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <CalculateSetPoint+0xd8>)
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <CalculateSetPoint+0xd8>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4413      	add	r3, r2
 8000846:	f242 7210 	movw	r2, #10000	; 0x2710
 800084a:	fb03 f202 	mul.w	r2, r3, r2
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <CalculateSetPoint+0xd4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d20c      	bcs.n	8000870 <CalculateSetPoint+0xc8>
			(setpoint >= characteristic.baseRPM))
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <CalculateSetPoint+0xd8>)
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <CalculateSetPoint+0xdc>)
 800085c:	681b      	ldr	r3, [r3, #0]
	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800085e:	429a      	cmp	r2, r3
 8000860:	d806      	bhi.n	8000870 <CalculateSetPoint+0xc8>
		setpoint -= characteristic.delta_falling;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <CalculateSetPoint+0xd8>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <CalculateSetPoint+0xdc>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <CalculateSetPoint+0xdc>)
 800086e:	6013      	str	r3, [r2, #0]

	return setpoint;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <CalculateSetPoint+0xdc>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200001b8 	.word	0x200001b8
 8000880:	20000194 	.word	0x20000194
 8000884:	200001bc 	.word	0x200001bc

08000888 <enterCriticalSection>:
 *
 *  Created on: May 13, 2023
 *      Author: plasz
 */
#include "compontents.h"
void enterCriticalSection() {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
    __disable_irq();  // Disable interrupts globally
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <exitCriticalSection>:

void exitCriticalSection() {
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800089e:	b662      	cpsie	i
}
 80008a0:	bf00      	nop
    __enable_irq();  // Enable interrupts globally
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <GetDigits>:
#include "display.h"

volatile uint8_t Digits[2];

void GetDigits(uint8_t number)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	enterCriticalSection();
 80008b6:	f7ff ffe7 	bl	8000888 <enterCriticalSection>
	Digits[0] = convertTo7Segment((number / 10));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <GetDigits+0x58>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f820 	bl	800090c <convertTo7Segment>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <GetDigits+0x5c>)
 80008d2:	701a      	strb	r2, [r3, #0]
    Digits[1] = convertTo7Segment((number % 10));
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <GetDigits+0x58>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	08d9      	lsrs	r1, r3, #3
 80008de:	460b      	mov	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f80e 	bl	800090c <convertTo7Segment>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <GetDigits+0x5c>)
 80008f6:	705a      	strb	r2, [r3, #1]
    exitCriticalSection();
 80008f8:	f7ff ffcf 	bl	800089a <exitCriticalSection>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	cccccccd 	.word	0xcccccccd
 8000908:	200001c0 	.word	0x200001c0

0800090c <convertTo7Segment>:

uint8_t convertTo7Segment(uint8_t value) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
    switch (value) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b09      	cmp	r3, #9
 800091a:	d835      	bhi.n	8000988 <convertTo7Segment+0x7c>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <convertTo7Segment+0x18>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	0800094d 	.word	0x0800094d
 8000928:	08000953 	.word	0x08000953
 800092c:	08000959 	.word	0x08000959
 8000930:	0800095f 	.word	0x0800095f
 8000934:	08000965 	.word	0x08000965
 8000938:	0800096b 	.word	0x0800096b
 800093c:	08000971 	.word	0x08000971
 8000940:	08000977 	.word	0x08000977
 8000944:	0800097d 	.word	0x0800097d
 8000948:	08000983 	.word	0x08000983
        case 0:
            value = ~0x3F;  // Inverted value
 800094c:	23c0      	movs	r3, #192	; 0xc0
 800094e:	71fb      	strb	r3, [r7, #7]
            break;
 8000950:	e01d      	b.n	800098e <convertTo7Segment+0x82>
        case 1:
            value = ~0x06;  // Inverted value
 8000952:	23f9      	movs	r3, #249	; 0xf9
 8000954:	71fb      	strb	r3, [r7, #7]
            break;
 8000956:	e01a      	b.n	800098e <convertTo7Segment+0x82>
        case 2:
            value = ~0x5B;  // Inverted value
 8000958:	23a4      	movs	r3, #164	; 0xa4
 800095a:	71fb      	strb	r3, [r7, #7]
            break;
 800095c:	e017      	b.n	800098e <convertTo7Segment+0x82>
        case 3:
            value = ~0x4F;  // Inverted value
 800095e:	23b0      	movs	r3, #176	; 0xb0
 8000960:	71fb      	strb	r3, [r7, #7]
            break;
 8000962:	e014      	b.n	800098e <convertTo7Segment+0x82>
        case 4:
            value = ~0x66;  // Inverted value
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	71fb      	strb	r3, [r7, #7]
            break;
 8000968:	e011      	b.n	800098e <convertTo7Segment+0x82>
        case 5:
            value = ~0x6D;  // Inverted value
 800096a:	2392      	movs	r3, #146	; 0x92
 800096c:	71fb      	strb	r3, [r7, #7]
            break;
 800096e:	e00e      	b.n	800098e <convertTo7Segment+0x82>
        case 6:
            value = ~0x7D;  // Inverted value
 8000970:	2382      	movs	r3, #130	; 0x82
 8000972:	71fb      	strb	r3, [r7, #7]
            break;
 8000974:	e00b      	b.n	800098e <convertTo7Segment+0x82>
        case 7:
            value = ~0x07;  // Inverted value
 8000976:	23f8      	movs	r3, #248	; 0xf8
 8000978:	71fb      	strb	r3, [r7, #7]
            break;
 800097a:	e008      	b.n	800098e <convertTo7Segment+0x82>
        case 8:
            value = ~0x7F;  // Inverted value
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	71fb      	strb	r3, [r7, #7]
            break;
 8000980:	e005      	b.n	800098e <convertTo7Segment+0x82>
        case 9:
            value = ~0x6F;  // Inverted value
 8000982:	2390      	movs	r3, #144	; 0x90
 8000984:	71fb      	strb	r3, [r7, #7]
            break;
 8000986:	e002      	b.n	800098e <convertTo7Segment+0x82>

        default:
            // Handle unsupported values or return a default value
            value = 0xFF;  // Blank segment (all segments turned off)
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	71fb      	strb	r3, [r7, #7]
            break;
 800098c:	bf00      	nop
    }
    return value;
 800098e:	79fb      	ldrb	r3, [r7, #7]
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DisplayValue>:

void DisplayValue(int32_t value)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if(value < 0)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da02      	bge.n	80009b0 <DisplayValue+0x14>
		value = -value;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	425b      	negs	r3, r3
 80009ae:	607b      	str	r3, [r7, #4]
	GetDigits(value);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff79 	bl	80008ac <GetDigits>
	SPI_EnableChip(true);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 faf6 	bl	8000fac <SPI_EnableChip>
	SPI_SEND(Digits, 2);
 80009c0:	2102      	movs	r1, #2
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <DisplayValue+0x40>)
 80009c4:	f000 fb04 	bl	8000fd0 <SPI_SEND>
	SPI_EnableChip(false);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 faef 	bl	8000fac <SPI_EnableChip>
	EnableDisplays(true);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 f806 	bl	80009e0 <EnableDisplays>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001c0 	.word	0x200001c0

080009e0 <EnableDisplays>:

void EnableDisplays(bool enable)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, !enable);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f083 0301 	eor.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <EnableDisplays+0x28>)
 80009fa:	f001 fa83 	bl	8001f04 <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020800 	.word	0x40020800

08000a0c <GetQEPValue>:
	HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_2);
}

// Enkóder érték kiolvasása
uint16_t GetQEPValue()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
//	return (uint16_t)HAL_TIM_ReadCapturedValue(&Tim1Handle, TIM_CHANNEL_1);

    static uint16_t previousCount = 0;
    static uint32_t previousTime = 0;

    uint16_t currentCount = (uint16_t)Tim1Handle.Instance->CNT;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <GetQEPValue+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	83fb      	strh	r3, [r7, #30]
    uint32_t currentTime = HAL_GetTick();
 8000a1a:	f000 fd09 	bl	8001430 <HAL_GetTick>
 8000a1e:	61b8      	str	r0, [r7, #24]

    uint16_t countDiff = currentCount - previousCount;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <GetQEPValue+0x8c>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	8bfa      	ldrh	r2, [r7, #30]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	82fb      	strh	r3, [r7, #22]
    uint32_t timeDiff = currentTime - previousTime;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <GetQEPValue+0x90>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	613b      	str	r3, [r7, #16]

    float rotations = (float)countDiff / (MOTOR_RES_ENC * 4.0f); // Number of rotations since the previous reading
 8000a34:	8afb      	ldrh	r3, [r7, #22]
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a3e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000aa0 <GetQEPValue+0x94>
 8000a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a46:	edc7 7a03 	vstr	s15, [r7, #12]
    float elapsedMinutes = (float)timeDiff / (1000.0f * 60.0f); // Elapsed time in minutes
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a54:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000aa4 <GetQEPValue+0x98>
 8000a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5c:	edc7 7a02 	vstr	s15, [r7, #8]

    float rpm = rotations / elapsedMinutes; // Rotations per minute
 8000a60:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a64:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a6c:	edc7 7a01 	vstr	s15, [r7, #4]

    previousCount = currentCount;
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <GetQEPValue+0x8c>)
 8000a72:	8bfb      	ldrh	r3, [r7, #30]
 8000a74:	8013      	strh	r3, [r2, #0]
    previousTime = currentTime;
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <GetQEPValue+0x90>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6013      	str	r3, [r2, #0]

    return (uint16_t)rpm;
 8000a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	ee17 3a90 	vmov	r3, s15
 8000a88:	b29b      	uxth	r3, r3
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001c4 	.word	0x200001c4
 8000a98:	2000020c 	.word	0x2000020c
 8000a9c:	20000210 	.word	0x20000210
 8000aa0:	42800000 	.word	0x42800000
 8000aa4:	476a6000 	.word	0x476a6000

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a4a      	ldr	r2, [pc, #296]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a43      	ldr	r2, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a35      	ldr	r2, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2120      	movs	r1, #32
 8000b32:	4830      	ldr	r0, [pc, #192]	; (8000bf4 <MX_GPIO_Init+0x14c>)
 8000b34:	f001 f9e6 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedPC_Pin|LedPos_Pin|CS_SEG_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f241 0190 	movw	r1, #4240	; 0x1090
 8000b3e:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b40:	f001 f9e0 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b4c:	f001 f9da 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedSpeed_GPIO_Port, LedSpeed_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000b56:	f001 f9d5 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b72:	f001 f833 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b76:	2320      	movs	r3, #32
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x14c>)
 8000b8e:	f001 f825 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LedPC_Pin|LedPos_Pin|EN_SEG_Pin|CS_SEG_Pin;
 8000b92:	f241 4390 	movw	r3, #5264	; 0x1490
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000bac:	f001 f816 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PC_Pin|ModeSelect_Pin|asd_Pin;
 8000bb0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000bc6:	f001 f809 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedSpeed_Pin;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedSpeed_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000be2:	f000 fffb 	bl	8001bdc <HAL_GPIO_Init>

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <InitAF>:

/* USER CODE BEGIN 2 */
GPIO_InitTypeDef  GPIO_InitStructure;
void InitAF()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
// DC-DC DRIVE VA-VB MOTOR PWM TIM1

GPIO_InitStructure.Pin = MOTOR_AQE_PIN | MOTOR_BQE_PIN;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <InitAF+0x34>)
 8000c06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c0a:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF1_TIM1;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <InitAF+0x34>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_PWM_PORT, &GPIO_InitStructure);
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <InitAF+0x34>)
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <InitAF+0x38>)
 8000c16:	f000 ffe1 	bl	8001bdc <HAL_GPIO_Init>

// DC-DC DRIVE A_QE-B_QE-Z_QE QEP TIM3
GPIO_InitStructure.Pin = MOTOR_VA_PIN | MOTOR_VB_PIN;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <InitAF+0x34>)
 8000c1c:	22c0      	movs	r2, #192	; 0xc0
 8000c1e:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF2_TIM3;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <InitAF+0x34>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_QE_PORT, &GPIO_InitStructure);
 8000c26:	4903      	ldr	r1, [pc, #12]	; (8000c34 <InitAF+0x34>)
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <InitAF+0x38>)
 8000c2a:	f000 ffd7 	bl	8001bdc <HAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000214 	.word	0x20000214
 8000c38:	40020000 	.word	0x40020000

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
int main(void)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fb8c 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f854 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f7ff ff2a 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c54:	f000 fae2 	bl	800121c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c58:	f000 f902 	bl	8000e60 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000c5c:	f7ff fcd4 	bl	8000608 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c60:	f008 f9dc 	bl	800901c <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c64:	f000 fa40 	bl	80010e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  InitAF();
 8000c68:	f7ff ffca 	bl	8000c00 <InitAF>
  //InitTimer();
  //InitMotorPWM();
  //InitQEP();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	481e      	ldr	r0, [pc, #120]	; (8000cec <main+0xb0>)
 8000c72:	f001 f947 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2110      	movs	r1, #16
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <main+0xb4>)
 8000c7c:	f001 f942 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	481a      	ldr	r0, [pc, #104]	; (8000cf0 <main+0xb4>)
 8000c86:	f001 f93d 	bl	8001f04 <HAL_GPIO_WritePin>

  DisplayValue(88);
 8000c8a:	2058      	movs	r0, #88	; 0x58
 8000c8c:	f7ff fe86 	bl	800099c <DisplayValue>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static bool a = true;

	  a = !a;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <main+0xb8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf14      	ite	ne
 8000c98:	2301      	movne	r3, #1
 8000c9a:	2300      	moveq	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <main+0xb8>)
 8000cac:	701a      	strb	r2, [r3, #0]
//	  {
//		  a = !a;
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
//		  EnableDisplays(a);
//	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, a);
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <main+0xb8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <main+0xb0>)
 8000cb8:	f001 f924 	bl	8001f04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, a);
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <main+0xb8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <main+0xb4>)
 8000cc6:	f001 f91d 	bl	8001f04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, a);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <main+0xb8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <main+0xb4>)
 8000cd4:	f001 f916 	bl	8001f04 <HAL_GPIO_WritePin>
	  EnableDisplays(a);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <main+0xb8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe7f 	bl	80009e0 <EnableDisplays>
	      // Process the received data
	      uint8_t data = rxBuffer[i];
	      // ...
	    }
	  }
	  HAL_Delay(1000);
 8000ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce6:	f000 fbaf 	bl	8001448 <HAL_Delay>
  {
 8000cea:	e7d1      	b.n	8000c90 <main+0x54>
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2234      	movs	r2, #52	; 0x34
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 ff16 	bl	8009b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <SystemClock_Config+0xd4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <SystemClock_Config+0xd4>)
 8000d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemClock_Config+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d6c:	23a8      	movs	r3, #168	; 0xa8
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d74:	2307      	movs	r3, #7
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fa15 	bl	80041b0 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d8c:	f000 f820 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2105      	movs	r1, #5
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fb8a 	bl	80034c8 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000dba:	f000 f809 	bl	8000dd0 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3750      	adds	r7, #80	; 0x50
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>

08000dda <SetPWM>:
	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_2);
}

void SetPWM(int32_t d)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	if (d > MOTOR_D_MAX)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000de8:	dd03      	ble.n	8000df2 <SetPWM+0x18>
	{
		d=MOTOR_D_MAX;
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	e004      	b.n	8000dfc <SetPWM+0x22>
	}
	else if (d < 0)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da01      	bge.n	8000dfc <SetPWM+0x22>
	{
		d=0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
	}

	// PWM csatornák beállítása SetMotorCh1 és SetMotorCh2 hívásával
	SetMotorCh1(d);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f809 	bl	8000e18 <SetMotorCh1>
	SetMotorCh2(d);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f816 	bl	8000e3c <SetMotorCh2>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SetMotorCh1>:

void SetMotorCh1(uint16_t d)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR1 = d;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SetMotorCh1+0x20>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000228 	.word	0x20000228

08000e3c <SetMotorCh2>:

void SetMotorCh2(uint16_t d)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR2 = d;
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SetMotorCh2+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000228 	.word	0x20000228

08000e60 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <MX_SPI2_Init+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e94:	2218      	movs	r2, #24
 8000e96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000eac:	220a      	movs	r2, #10
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_SPI2_Init+0x64>)
 8000eb2:	f003 fc1b 	bl	80046ec <HAL_SPI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ebc:	f7ff ff88 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000270 	.word	0x20000270
 8000ec8:	40003800 	.word	0x40003800

08000ecc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <HAL_SPI_MspInit+0xd0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d152      	bne.n	8000f94 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_SPI_MspInit+0xd4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f42:	2302      	movs	r3, #2
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <HAL_SPI_MspInit+0xd8>)
 8000f5e:	f000 fe3d 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f74:	2305      	movs	r3, #5
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <HAL_SPI_MspInit+0xdc>)
 8000f80:	f000 fe2c 	bl	8001bdc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2024      	movs	r0, #36	; 0x24
 8000f8a:	f000 fdce 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f8e:	2024      	movs	r0, #36	; 0x24
 8000f90:	f000 fde7 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400

08000fac <SPI_EnableChip>:
  }
}

/* USER CODE BEGIN 1 */
void SPI_EnableChip(uint8_t enable)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SEG_GPIO_Port, CS_SEG_Pin, enable);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <SPI_EnableChip+0x20>)
 8000fc0:	f000 ffa0 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <SPI_SEND>:

HAL_StatusTypeDef SPI_SEND(uint8_t* pData, uint16_t datasize)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi2, pData, datasize, HAL_MAX_DELAY);
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <SPI_SEND+0x24>)
 8000fe6:	f003 fc0a 	bl	80047fe <HAL_SPI_Transmit>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000270 	.word	0x20000270

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_MspInit+0x4c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x4c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 f9b8 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <SPI2_IRQHandler+0x10>)
 80010a2:	f003 fce9 	bl	8004a78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000270 	.word	0x20000270

080010b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <OTG_FS_IRQHandler+0x10>)
 80010b6:	f001 f895 	bl	80021e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001880 	.word	0x20001880

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_TIM10_Init+0x40>)
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <MX_TIM10_Init+0x44>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_TIM10_Init+0x40>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_TIM10_Init+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_TIM10_Init+0x40>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_TIM10_Init+0x40>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_TIM10_Init+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_TIM10_Init+0x40>)
 8001114:	f003 fe98 	bl	8004e48 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800111e:	f7ff fe57 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200002c8 	.word	0x200002c8
 800112c:	40014400 	.word	0x40014400

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40014400 	.word	0x40014400
 8001170:	40023800 	.word	0x40023800

08001174 <TIM7_IRQHandler>:
	HAL_TIM_Base_Start_IT(&Tim7Handle);
}

// Megszakításkezelő a TIM7 időzítőhöz
void TIM7_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim7Handle);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM7_IRQHandler+0x10>)
 800117a:	f003 feb4 	bl	8004ee6 <HAL_TIM_IRQHandler>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000310 	.word	0x20000310

08001188 <TimerHandler>:



void TimerHandler()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	if(isCharacteristicUpdated())
 800118e:	f7ff fae3 	bl	8000758 <isCharacteristicUpdated>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <TimerHandler+0x26>
	{
		//SetCharacteristic(max, base, rise, fall, hold);
		PID.setpoint = CalculateSetPoint(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fb05 	bl	80007a8 <CalculateSetPoint>
 800119e:	ee07 0a90 	vmov	s15, r0
 80011a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <TimerHandler+0x6c>)
 80011a8:	edc3 7a03 	vstr	s15, [r3, #12]
 80011ac:	e009      	b.n	80011c2 <TimerHandler+0x3a>

	}
	else{
		PID.setpoint = CalculateSetPoint(0);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fafa 	bl	80007a8 <CalculateSetPoint>
 80011b4:	ee07 0a90 	vmov	s15, r0
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <TimerHandler+0x6c>)
 80011be:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	int32_t measurement = GetQEPValue();
 80011c2:	f7ff fc23 	bl	8000a0c <GetQEPValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	607b      	str	r3, [r7, #4]

	PIDContollerUpdate(measurement);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff f996 	bl	8000508 <PIDContollerUpdate>

	SetPWM(PID.output);
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <TimerHandler+0x6c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdfa 	bl	8000dda <SetPWM>

	DisplayValue(measurement);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fbd8 	bl	800099c <DisplayValue>

}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000012c 	.word	0x2000012c

080011f8 <HAL_TIM_PeriodElapsedCallback>:
// Megszakításkezelő callback a Timer megszakításkezelőhöz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        TimerHandler();
 800120a:	f7ff ffbd 	bl	8001188 <TimerHandler>
    }
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40001400 	.word	0x40001400

0800121c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <MX_USART2_UART_Init+0x60>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001254:	f004 f82c 	bl	80052b0 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fdb7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <MX_USART2_UART_Init+0x5c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0220 	orr.w	r2, r2, #32
 8001270:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000358 	.word	0x20000358
 800127c:	40004400 	.word	0x40004400

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_UART_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12b      	bne.n	80012fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012da:	230c      	movs	r3, #12
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ea:	2307      	movs	r3, #7
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_UART_MspInit+0x8c>)
 80012f6:	f000 fc71 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004400 	.word	0x40004400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001316:	490e      	ldr	r1, [pc, #56]	; (8001350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800132c:	4c0b      	ldr	r4, [pc, #44]	; (800135c <LoopFillZerobss+0x26>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133a:	f7ff fec3 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f008 fbd7 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff fc7b 	bl	8000c3c <main>
  bx  lr    
 8001346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001354:	08009bd0 	.word	0x08009bd0
  ldr r2, =_sbss
 8001358:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800135c:	20001fac 	.word	0x20001fac

08001360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_Init+0x40>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_Init+0x40>)
 800137a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x40>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 fbc1 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fe2e 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fbd9 	bl	8001b7e <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 fba1 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000004 	.word	0x20000004
 8001400:	2000000c 	.word	0x2000000c
 8001404:	20000008 	.word	0x20000008

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000000c 	.word	0x2000000c
 800142c:	2000039c 	.word	0x2000039c

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000039c 	.word	0x2000039c

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000000c 	.word	0x2000000c

08001490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e033      	b.n	800150e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f8fc 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d6:	f023 0302 	bic.w	r3, r3, #2
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f94a 	bl	800177c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
 80014fe:	e001      	b.n	8001504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c>
 8001530:	2302      	movs	r3, #2
 8001532:	e113      	b.n	800175c <HAL_ADC_ConfigChannel+0x244>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d925      	bls.n	8001590 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	3b1e      	subs	r3, #30
 800155a:	2207      	movs	r2, #7
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43da      	mvns	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	400a      	ands	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	4603      	mov	r3, r0
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4403      	add	r3, r0
 8001582:	3b1e      	subs	r3, #30
 8001584:	409a      	lsls	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e022      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	2207      	movs	r2, #7
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4403      	add	r3, r0
 80015cc:	409a      	lsls	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d824      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b05      	subs	r3, #5
 80015f0:	221f      	movs	r2, #31
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3b05      	subs	r3, #5
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
 8001626:	e04c      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d824      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b23      	subs	r3, #35	; 0x23
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43da      	mvns	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	400a      	ands	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b23      	subs	r3, #35	; 0x23
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
 8001678:	e023      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b41      	subs	r3, #65	; 0x41
 800168c:	221f      	movs	r2, #31
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	400a      	ands	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b41      	subs	r3, #65	; 0x41
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_ADC_ConfigChannel+0x250>)
 80016c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_ADC_ConfigChannel+0x254>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d10f      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d8>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d10b      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_ADC_ConfigChannel+0x254>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_ADC_ConfigChannel+0x258>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d003      	beq.n	800170c <HAL_ADC_ConfigChannel+0x1f4>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b11      	cmp	r3, #17
 800170a:	d122      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_ADC_ConfigChannel+0x258>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d111      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_ADC_ConfigChannel+0x25c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_ADC_ConfigChannel+0x260>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9a      	lsrs	r2, r3, #18
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40012300 	.word	0x40012300
 800176c:	40012000 	.word	0x40012000
 8001770:	10000012 	.word	0x10000012
 8001774:	20000004 	.word	0x20000004
 8001778:	431bde83 	.word	0x431bde83

0800177c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001784:	4b79      	ldr	r3, [pc, #484]	; (800196c <ADC_Init+0x1f0>)
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	431a      	orrs	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	021a      	lsls	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <ADC_Init+0x1f4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d022      	beq.n	800185a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e00f      	b.n	800187a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0202 	bic.w	r2, r2, #2
 8001888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	3b01      	subs	r3, #1
 80018d4:	035a      	lsls	r2, r3, #13
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	e007      	b.n	80018f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	3b01      	subs	r3, #1
 800190c:	051a      	lsls	r2, r3, #20
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001932:	025a      	lsls	r2, r3, #9
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	029a      	lsls	r2, r3, #10
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	609a      	str	r2, [r3, #8]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40012300 	.word	0x40012300
 8001970:	0f000001 	.word	0x0f000001

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff29 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff3e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff31 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e00c      	b.n	8001bce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f38:	b08f      	sub	sp, #60	; 0x3c
 8001f3a:	af0a      	add	r7, sp, #40	; 0x28
 8001f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e116      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f007 fa4c 	bl	8009400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fd69 	bl	8005a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	687e      	ldr	r6, [r7, #4]
 8001f94:	466d      	mov	r5, sp
 8001f96:	f106 0410 	add.w	r4, r6, #16
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001faa:	1d33      	adds	r3, r6, #4
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f003 fc40 	bl	8005834 <USB_CoreInit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0d7      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fd57 	bl	8005a80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e04a      	b.n	800206e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	333d      	adds	r3, #61	; 0x3d
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	333c      	adds	r3, #60	; 0x3c
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	b298      	uxth	r0, r3
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3344      	adds	r3, #68	; 0x44
 8002014:	4602      	mov	r2, r0
 8002016:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3340      	adds	r3, #64	; 0x40
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334c      	adds	r3, #76	; 0x4c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3354      	adds	r3, #84	; 0x54
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	3301      	adds	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3af      	bcc.n	8001fd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e044      	b.n	8002108 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3301      	adds	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d3b5      	bcc.n	800207e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	687e      	ldr	r6, [r7, #4]
 800211a:	466d      	mov	r5, sp
 800211c:	f106 0410 	add.w	r4, r6, #16
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002130:	1d33      	adds	r3, r6, #4
 8002132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f003 fcef 	bl	8005b18 <USB_DevInit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e014      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 f98b 	bl	8003480 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fe31 	bl	8006dd6 <USB_DevDisconnect>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800217e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_PCD_Start+0x1c>
 8002196:	2302      	movs	r3, #2
 8002198:	e020      	b.n	80021dc <HAL_PCD_Start+0x5e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d109      	bne.n	80021be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc3a 	bl	8005a3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fde1 	bl	8006d94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b08d      	sub	sp, #52	; 0x34
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 fe9f 	bl	8006f3e <USB_GetMode>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 84b7 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fe03 	bl	8006e18 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 84ad 	beq.w	8002b74 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f004 fdf0 	bl	8006e18 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f002 0202 	and.w	r2, r2, #2
 8002250:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fdde 	bl	8006e18 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d161      	bne.n	800232a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	0c5b      	lsrs	r3, r3, #17
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d124      	bne.n	80022ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d035      	beq.n	800231a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6a38      	ldr	r0, [r7, #32]
 80022c2:	f004 fc15 	bl	8006af0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d2:	441a      	add	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e4:	441a      	add	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	621a      	str	r2, [r3, #32]
 80022ea:	e016      	b.n	800231a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	0c5b      	lsrs	r3, r3, #17
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d110      	bne.n	800231a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022fe:	2208      	movs	r2, #8
 8002300:	4619      	mov	r1, r3
 8002302:	6a38      	ldr	r0, [r7, #32]
 8002304:	f004 fbf4 	bl	8006af0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	441a      	add	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0210 	orr.w	r2, r2, #16
 8002328:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fd72 	bl	8006e18 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800233e:	f040 80a7 	bne.w	8002490 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fd77 	bl	8006e3e <USB_ReadDevAllOutEpInterrupt>
 8002350:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002352:	e099      	b.n	8002488 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 808e 	beq.w	800247c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fd9b 	bl	8006ea6 <USB_ReadDevOutEPInterrupt>
 8002370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 feef 	bl	8003174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2308      	movs	r3, #8
 80023b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 ffc5 	bl	8003344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2310      	movs	r3, #16
 80023d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d030      	beq.n	8002442 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d109      	bne.n	8002400 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	78db      	ldrb	r3, [r3, #3]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f007 f904 	bl	8009638 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	3301      	adds	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f af62 	bne.w	8002354 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fcbf 	bl	8006e18 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a4:	f040 80db 	bne.w	800265e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fce0 	bl	8006e72 <USB_ReadDevAllInEpInterrupt>
 80024b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024b8:	e0cd      	b.n	8002656 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80c2 	beq.w	800264a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fd06 	bl	8006ee2 <USB_ReadDevInEPInterrupt>
 80024d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d057      	beq.n	8002592 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	2201      	movs	r2, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69f9      	ldr	r1, [r7, #28]
 80024fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002502:	4013      	ands	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	461a      	mov	r2, r3
 8002514:	2301      	movs	r3, #1
 8002516:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d132      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334c      	adds	r3, #76	; 0x4c
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4403      	add	r3, r0
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4419      	add	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4403      	add	r3, r0
 8002554:	334c      	adds	r3, #76	; 0x4c
 8002556:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	2b00      	cmp	r3, #0
 800255c:	d113      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3354      	adds	r3, #84	; 0x54
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800257e:	461a      	mov	r2, r3
 8002580:	2101      	movs	r1, #1
 8002582:	f004 fd0d 	bl	8006fa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f006 ffce 	bl	800952e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a8:	461a      	mov	r2, r3
 80025aa:	2308      	movs	r3, #8
 80025ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c4:	461a      	mov	r2, r3
 80025c6:	2310      	movs	r3, #16
 80025c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e0:	461a      	mov	r2, r3
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d023      	beq.n	8002638 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f2:	6a38      	ldr	r0, [r7, #32]
 80025f4:	f003 fbee 	bl	8005dd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	3338      	adds	r3, #56	; 0x38
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	78db      	ldrb	r3, [r3, #3]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d108      	bne.n	8002626 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2200      	movs	r2, #0
 8002618:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f007 f81b 	bl	800965c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	2302      	movs	r3, #2
 8002636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fd08 	bl	800305a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af2e 	bne.w	80024ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fbd8 	bl	8006e18 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800266e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002672:	d122      	bne.n	80026ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800269a:	2100      	movs	r1, #0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 f995 	bl	80099cc <HAL_PCDEx_LPM_Callback>
 80026a2:	e002      	b.n	80026aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f006 ffb9 	bl	800961c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fbaa 	bl	8006e18 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d112      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f006 ff75 	bl	80095d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fb8c 	bl	8006e18 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d121      	bne.n	8002750 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800271a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d111      	bne.n	800274a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002740:	2101      	movs	r1, #1
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f007 f942 	bl	80099cc <HAL_PCDEx_LPM_Callback>
 8002748:	e002      	b.n	8002750 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f006 ff40 	bl	80095d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fb5f 	bl	8006e18 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	f040 80b7 	bne.w	80028d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2110      	movs	r1, #16
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fb26 	bl	8005dd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278c:	e046      	b.n	800281c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	440a      	add	r2, r1
 800280c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002814:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	3301      	adds	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	429a      	cmp	r2, r3
 8002824:	d3b3      	bcc.n	800278e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002834:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002838:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f043 030b 	orr.w	r3, r3, #11
 8002856:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002868:	f043 030b 	orr.w	r3, r3, #11
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	e015      	b.n	800289c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002882:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002886:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002896:	f043 030b 	orr.w	r3, r3, #11
 800289a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c0:	461a      	mov	r2, r3
 80028c2:	f004 fb6d 	bl	8006fa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fa9c 	bl	8006e18 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d124      	bne.n	8002936 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fb32 	bl	8006f5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fae7 	bl	8005ece <USB_GetDevSpeed>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681c      	ldr	r4, [r3, #0]
 800290c:	f000 fec2 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f002 ffec 	bl	80058f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 fe2c 	bl	800957e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f004 fa6c 	bl	8006e18 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d10a      	bne.n	8002960 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f006 fe09 	bl	8009562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f002 0208 	and.w	r2, r2, #8
 800295e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fa57 	bl	8006e18 <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d122      	bne.n	80029ba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002980:	2301      	movs	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	e014      	b.n	80029b0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fb27 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3e5      	bcc.n	8002986 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fa2a 	bl	8006e18 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ce:	d13b      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	2301      	movs	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e02b      	b.n	8002a2e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d115      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da12      	bge.n	8002a28 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	333f      	adds	r3, #63	; 0x3f
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fae8 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3ce      	bcc.n	80029d6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f9e3 	bl	8006e18 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a5c:	d155      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5e:	2301      	movs	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	e045      	b.n	8002af0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d12e      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da2b      	bge.n	8002aea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d121      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae6:	6053      	str	r3, [r2, #4]
            break;
 8002ae8:	e007      	b.n	8002afa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3b4      	bcc.n	8002a64 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 f982 	bl	8006e18 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d10a      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f006 fdad 	bl	8009680 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 f96c 	bl	8006e18 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d115      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f006 fd9d 	bl	800969c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e000      	b.n	8002b76 <HAL_PCD_IRQHandler+0x992>
      return;
 8002b74:	bf00      	nop
    }
  }
}
 8002b76:	3734      	adds	r7, #52	; 0x34
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}

08002b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_SetAddress+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e013      	b.n	8002bbe <HAL_PCD_SetAddress+0x42>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 f8ca 	bl	8006d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	4608      	mov	r0, r1
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	803b      	strh	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0f      	bge.n	8002c0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00f      	b.n	8002c2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c38:	883a      	ldrh	r2, [r7, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	78ba      	ldrb	r2, [r7, #2]
 8002c42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c56:	78bb      	ldrb	r3, [r7, #2]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d102      	bne.n	8002c62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_PCD_EP_Open+0xaa>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e00e      	b.n	8002c8e <HAL_PCD_EP_Open+0xc8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f94a 	bl	8005f18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0f      	bge.n	8002cca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3338      	adds	r3, #56	; 0x38
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
 8002cc8:	e00f      	b.n	8002cea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_PCD_EP_Close+0x6e>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e00e      	b.n	8002d22 <HAL_PCD_EP_Close+0x8c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 f988 	bl	8006028 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	460b      	mov	r3, r1
 8002d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f003 fc67 	bl	8006670 <USB_EP0StartXfer>
 8002da2:	e008      	b.n	8002db6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	f003 fa15 	bl	80061e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3338      	adds	r3, #56	; 0x38
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	f003 fc05 	bl	8006670 <USB_EP0StartXfer>
 8002e66:	e008      	b.n	8002e7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f003 f9b3 	bl	80061e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e050      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0f      	bge.n	8002eca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00d      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_PCD_EP_SetStall+0x82>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e01e      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fe43 	bl	8006ba0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	f004 f833 	bl	8006fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	3338      	adds	r3, #56	; 0x38
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_EP_ClrStall+0x86>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e00e      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fe4b 	bl	8006c7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0c      	bge.n	8003026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fc6a 	bl	8006920 <USB_EPStopXfer>
 800304c:	4603      	mov	r3, r0
 800304e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003050:	7afb      	ldrb	r3, [r7, #11]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d901      	bls.n	8003092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06c      	b.n	800316c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d902      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3303      	adds	r3, #3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b6:	e02b      	b.n	8003110 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3303      	adds	r3, #3
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6919      	ldr	r1, [r3, #16]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4603      	mov	r3, r0
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f003 fcbe 	bl	8006a74 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	b29b      	uxth	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	429a      	cmp	r2, r3
 8003124:	d809      	bhi.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312e:	429a      	cmp	r2, r3
 8003130:	d203      	bcs.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1be      	bne.n	80030b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	429a      	cmp	r2, r3
 8003144:	d811      	bhi.n	800316a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	43db      	mvns	r3, r3
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003166:	4013      	ands	r3, r2
 8003168:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	333c      	adds	r3, #60	; 0x3c
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d17b      	bne.n	80032a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a61      	ldr	r2, [pc, #388]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f240 80b9 	bls.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80b3 	beq.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e0a7      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e098      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 8093 	bne.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90f      	bls.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e07e      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	440b      	add	r3, r1
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d114      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800327c:	461a      	mov	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	f003 fe8e 	bl	8006fa0 <USB_EP0_OutStart>
 8003284:	e006      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f006 f92c 	bl	80094f8 <HAL_PCD_DataOutStageCallback>
 80032a0:	e046      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e032      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2320      	movs	r3, #32
 80032e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f006 f903 	bl	80094f8 <HAL_PCD_DataOutStageCallback>
 80032f2:	e01d      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800331c:	461a      	mov	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f003 fe3e 	bl	8006fa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f006 f8e4 	bl	80094f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4f54300a 	.word	0x4f54300a
 8003340:	4f54310a 	.word	0x4f54310a

08003344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	333c      	adds	r3, #60	; 0x3c
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d90e      	bls.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f006 f89b 	bl	80094d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d90c      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b8:	461a      	mov	r2, r3
 80033ba:	2101      	movs	r1, #1
 80033bc:	f003 fdf0 	bl	8006fa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	4f54300a 	.word	0x4f54300a

080033d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
 80033dc:	4613      	mov	r3, r2
 80033de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	0419      	lsls	r1, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	e028      	b.n	8003450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e00d      	b.n	800342e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	3340      	adds	r3, #64	; 0x40
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	3b01      	subs	r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d3ec      	bcc.n	8003412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	0418      	lsls	r0, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	3b01      	subs	r3, #1
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4302      	orrs	r2, r0
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	f043 0303 	orr.w	r3, r3, #3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0cc      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b68      	ldr	r3, [pc, #416]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d90c      	bls.n	8003504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0b8      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	494d      	ldr	r1, [pc, #308]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d044      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d119      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d003      	beq.n	8003586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	2b03      	cmp	r3, #3
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e06f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e067      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7fd ff3a 	bl	8001430 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fd ff36 	bl	8001430 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d20c      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e032      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	490e      	ldr	r1, [pc, #56]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364e:	f000 fb7f 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fe9a 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	08009ba8 	.word	0x08009ba8
 800368c:	20000004 	.word	0x20000004
 8003690:	20000008 	.word	0x20000008

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08009bb8 	.word	0x08009bb8

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08009bb8 	.word	0x08009bb8

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003734:	4b6f      	ldr	r3, [pc, #444]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	496c      	ldr	r1, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003752:	2301      	movs	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003762:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003768:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	4960      	ldr	r1, [pc, #384]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4955      	ldr	r1, [pc, #340]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ae:	d101      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d017      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4946      	ldr	r1, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d101      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80037f8:	2301      	movs	r3, #1
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808a 	beq.w	800391e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003832:	f7fd fdfd 	bl	8001430 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fd fdf9 	bl	8001430 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e278      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02f      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	429a      	cmp	r2, r3
 8003874:	d028      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800388c:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d114      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd fdc7 	bl	8001430 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fdc3 	bl	8001430 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e240      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d4:	d114      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	4902      	ldr	r1, [pc, #8]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
 80038f0:	e00c      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42470e40 	.word	0x42470e40
 8003900:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a49      	ldr	r2, [pc, #292]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003906:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	4944      	ldr	r1, [pc, #272]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391a:	4313      	orrs	r3, r2
 800391c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003930:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003932:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003968:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	492e      	ldr	r1, [pc, #184]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	4926      	ldr	r1, [pc, #152]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a2:	d101      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80039a4:	2301      	movs	r3, #1
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e4:	4911      	ldr	r1, [pc, #68]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d101      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80039f6:	2301      	movs	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a08:	f040 80ff 	bne.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fd0d 	bl	8001430 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a18:	e00e      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a1a:	f7fd fd09 	bl	8001430 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d907      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e188      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	424711e0 	.word	0x424711e0
 8003a34:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a38:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ea      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d028      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d124      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a6c:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	431a      	orrs	r2, r3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	4961      	ldr	r1, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d035      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae0:	d130      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ae2:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	0f1b      	lsrs	r3, r3, #28
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4943      	ldr	r1, [pc, #268]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f023 021f 	bic.w	r2, r3, #31
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	493d      	ldr	r1, [pc, #244]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d029      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d124      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b72:	0f1b      	lsrs	r3, r3, #28
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	071b      	lsls	r3, r3, #28
 8003b9c:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fc24 	bl	8001430 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd fc20 	bl	8001430 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e09f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 8095 	bne.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fd fc0a 	bl	8001430 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1e:	e00f      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c20:	f7fd fc06 	bl	8001430 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d908      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e085      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	42470068 	.word	0x42470068
 8003c3c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d0e8      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d127      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	4928      	ldr	r1, [pc, #160]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	4922      	ldr	r1, [pc, #136]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01d      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cda:	d118      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	4910      	ldr	r1, [pc, #64]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fb8c 	bl	8001430 <HAL_GetTick>
 8003d18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fd fb88 	bl	8001430 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e007      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d1ef      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3730      	adds	r7, #48	; 0x30
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	42470070 	.word	0x42470070

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b0ae      	sub	sp, #184	; 0xb8
 8003d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d76:	4bcb      	ldr	r3, [pc, #812]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	f200 8206 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x440>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08004191 	.word	0x08004191
 8003d94:	08004191 	.word	0x08004191
 8003d98:	08004191 	.word	0x08004191
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08004191 	.word	0x08004191
 8003da4:	08004191 	.word	0x08004191
 8003da8:	08004191 	.word	0x08004191
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08004191 	.word	0x08004191
 8003db4:	08004191 	.word	0x08004191
 8003db8:	08004191 	.word	0x08004191
 8003dbc:	08003fc1 	.word	0x08003fc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4bb9      	ldr	r3, [pc, #740]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003dc6:	e1e7      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc8:	4bb8      	ldr	r3, [pc, #736]	; (80040ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dce:	e1e3      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4bb4      	ldr	r3, [pc, #720]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ddc:	4bb1      	ldr	r3, [pc, #708]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d071      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de8:	4bae      	ldr	r3, [pc, #696]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	0159      	lsls	r1, r3, #5
 8003e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e20:	0150      	lsls	r0, r2, #5
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4621      	mov	r1, r4
 8003e28:	1a51      	subs	r1, r2, r1
 8003e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e40:	4649      	mov	r1, r9
 8003e42:	018b      	lsls	r3, r1, #6
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	018a      	lsls	r2, r1, #6
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1a51      	subs	r1, r2, r1
 8003e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e54:	4649      	mov	r1, r9
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e68:	4649      	mov	r1, r9
 8003e6a:	00cb      	lsls	r3, r1, #3
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e72:	4641      	mov	r1, r8
 8003e74:	00ca      	lsls	r2, r1, #3
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
 8003e82:	462b      	mov	r3, r5
 8003e84:	460a      	mov	r2, r1
 8003e86:	eb42 0303 	adc.w	r3, r2, r3
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e98:	4629      	mov	r1, r5
 8003e9a:	024b      	lsls	r3, r1, #9
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	024a      	lsls	r2, r1, #9
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ebc:	f7fc f9a2 	bl	8000204 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eca:	e067      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4621      	mov	r1, r4
 8003f08:	1a51      	subs	r1, r2, r1
 8003f0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f20:	4649      	mov	r1, r9
 8003f22:	018b      	lsls	r3, r1, #6
 8003f24:	4641      	mov	r1, r8
 8003f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	018a      	lsls	r2, r1, #6
 8003f2e:	4641      	mov	r1, r8
 8003f30:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f34:	4649      	mov	r1, r9
 8003f36:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	4692      	mov	sl, r2
 8003f50:	469b      	mov	fp, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	eb1a 0303 	adds.w	r3, sl, r3
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f84:	2200      	movs	r2, #0
 8003f86:	673b      	str	r3, [r7, #112]	; 0x70
 8003f88:	677a      	str	r2, [r7, #116]	; 0x74
 8003f8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f8e:	f7fc f939 	bl	8000204 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4613      	mov	r3, r2
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fbe:	e0eb      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06b      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	2200      	movs	r2, #0
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	663b      	str	r3, [r7, #96]	; 0x60
 8003fec:	2300      	movs	r3, #0
 8003fee:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	0159      	lsls	r1, r3, #5
 8004002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004006:	0150      	lsls	r0, r2, #5
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4621      	mov	r1, r4
 800400e:	1a51      	subs	r1, r2, r1
 8004010:	61b9      	str	r1, [r7, #24]
 8004012:	4629      	mov	r1, r5
 8004014:	eb63 0301 	sbc.w	r3, r3, r1
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004026:	4659      	mov	r1, fp
 8004028:	018b      	lsls	r3, r1, #6
 800402a:	4651      	mov	r1, sl
 800402c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004030:	4651      	mov	r1, sl
 8004032:	018a      	lsls	r2, r1, #6
 8004034:	4651      	mov	r1, sl
 8004036:	ebb2 0801 	subs.w	r8, r2, r1
 800403a:	4659      	mov	r1, fp
 800403c:	eb63 0901 	sbc.w	r9, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004054:	4690      	mov	r8, r2
 8004056:	4699      	mov	r9, r3
 8004058:	4623      	mov	r3, r4
 800405a:	eb18 0303 	adds.w	r3, r8, r3
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	462b      	mov	r3, r5
 8004062:	eb49 0303 	adc.w	r3, r9, r3
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004074:	4629      	mov	r1, r5
 8004076:	024b      	lsls	r3, r1, #9
 8004078:	4621      	mov	r1, r4
 800407a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800407e:	4621      	mov	r1, r4
 8004080:	024a      	lsls	r2, r1, #9
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408a:	2200      	movs	r2, #0
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
 800408e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004090:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004094:	f7fc f8b6 	bl	8000204 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a2:	e065      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x420>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	2200      	movs	r2, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	4611      	mov	r1, r2
 80040bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
 80040c2:	2300      	movs	r3, #0
 80040c4:	657b      	str	r3, [r7, #84]	; 0x54
 80040c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4641      	mov	r1, r8
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	4649      	mov	r1, r9
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040fc:	4659      	mov	r1, fp
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4651      	mov	r1, sl
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4651      	mov	r1, sl
 800410c:	1a54      	subs	r4, r2, r1
 800410e:	4659      	mov	r1, fp
 8004110:	eb63 0501 	sbc.w	r5, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	00eb      	lsls	r3, r5, #3
 800411e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	4614      	mov	r4, r2
 8004126:	461d      	mov	r5, r3
 8004128:	4643      	mov	r3, r8
 800412a:	18e3      	adds	r3, r4, r3
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	464b      	mov	r3, r9
 8004130:	eb45 0303 	adc.w	r3, r5, r3
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004142:	4629      	mov	r1, r5
 8004144:	028b      	lsls	r3, r1, #10
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414c:	4621      	mov	r1, r4
 800414e:	028a      	lsls	r2, r1, #10
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004158:	2200      	movs	r2, #0
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
 800415c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800415e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004162:	f7fc f84f 	bl	8000204 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4613      	mov	r3, r2
 800416c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0f1b      	lsrs	r3, r3, #28
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800417e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800418e:	e003      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8004192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800419c:	4618      	mov	r0, r3
 800419e:	37b8      	adds	r7, #184	; 0xb8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e28d      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8083 	beq.w	80042d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041d0:	4b94      	ldr	r3, [pc, #592]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d019      	beq.n	8004210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041dc:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041e8:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x124>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e25a      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x90>
 8004232:	4b7c      	ldr	r3, [pc, #496]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7b      	ldr	r2, [pc, #492]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xcc>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0xb4>
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a72      	ldr	r2, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xcc>
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6b      	ldr	r2, [pc, #428]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd f8d4 	bl	8001430 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd f8d0 	bl	8001430 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e21f      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xdc>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd f8c0 	bl	8001430 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd f8bc 	bl	8001430 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e20b      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x104>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d06f      	beq.n	80043c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042e2:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d017      	beq.n	800431e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ee:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d11c      	bne.n	800434c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b44      	ldr	r3, [pc, #272]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x186>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1d3      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	e03a      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x278>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd f869 	bl	8001430 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004362:	f7fd f865 	bl	8001430 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1b4      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004374:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4925      	ldr	r1, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_OscConfig+0x278>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd f848 	bl	8001430 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fd f844 	bl	8001430 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e193      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d036      	beq.n	800443c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <HAL_RCC_OscConfig+0x27c>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd f828 	bl	8001430 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd f824 	bl	8001430 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e173      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x234>
 8004402:	e01b      	b.n	800443c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_OscConfig+0x27c>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd f811 	bl	8001430 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	e00e      	b.n	8004430 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004412:	f7fd f80d 	bl	8001430 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d907      	bls.n	8004430 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e15c      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
 800442c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8097 	beq.w	8004578 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b83      	ldr	r3, [pc, #524]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b7f      	ldr	r3, [pc, #508]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a7e      	ldr	r2, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b79      	ldr	r3, [pc, #484]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b76      	ldr	r3, [pc, #472]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a75      	ldr	r2, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fc ffcd 	bl	8001430 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7fc ffc9 	bl	8001430 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e118      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x31e>
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a65      	ldr	r2, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x358>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x340>
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a60      	ldr	r2, [pc, #384]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	4b5e      	ldr	r3, [pc, #376]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a5d      	ldr	r2, [pc, #372]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x358>
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a59      	ldr	r2, [pc, #356]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fc ff8e 	bl	8001430 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fc ff8a 	bl	8001430 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0d7      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCC_OscConfig+0x368>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fc ff78 	bl	8001430 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fc ff74 	bl	8001430 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0c1      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ee      	bne.n	8004544 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	4a3a      	ldr	r2, [pc, #232]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80ad 	beq.w	80046dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b08      	cmp	r3, #8
 800458c:	d060      	beq.n	8004650 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d145      	bne.n	8004622 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fc ff48 	bl	8001430 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fc ff44 	bl	8001430 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e093      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	071b      	lsls	r3, r3, #28
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fc ff19 	bl	8001430 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004602:	f7fc ff15 	bl	8001430 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e064      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x452>
 8004620:	e05c      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fc ff02 	bl	8001430 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fc fefe 	bl	8001430 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04d      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x480>
 800464e:	e045      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e040      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004668:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_RCC_OscConfig+0x538>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d030      	beq.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d129      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d122      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d119      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d10f      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07b      	b.n	80047f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e005      	b.n	8004724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fbc4 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0104 	and.w	r1, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0210 	and.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b088      	sub	sp, #32
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SPI_Transmit+0x22>
 800481c:	2302      	movs	r3, #2
 800481e:	e126      	b.n	8004a6e <HAL_SPI_Transmit+0x270>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004828:	f7fc fe02 	bl	8001430 <HAL_GetTick>
 800482c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004842:	e10b      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x52>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004854:	e102      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d10f      	bne.n	80048be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d14b      	bne.n	800497e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0xf6>
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d13e      	bne.n	8004972 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004918:	e02b      	b.n	8004972 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d112      	bne.n	800494e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	86da      	strh	r2, [r3, #54]	; 0x36
 800494c:	e011      	b.n	8004972 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494e:	f7fc fd6f 	bl	8001430 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d803      	bhi.n	8004966 <HAL_SPI_Transmit+0x168>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d102      	bne.n	800496c <HAL_SPI_Transmit+0x16e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004970:	e074      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ce      	bne.n	800491a <HAL_SPI_Transmit+0x11c>
 800497c:	e04c      	b.n	8004a18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SPI_Transmit+0x18e>
 8004986:	8afb      	ldrh	r3, [r7, #22]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d140      	bne.n	8004a0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049b2:	e02c      	b.n	8004a0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d113      	bne.n	80049ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80049e8:	e011      	b.n	8004a0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ea:	f7fc fd21 	bl	8001430 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d803      	bhi.n	8004a02 <HAL_SPI_Transmit+0x204>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_Transmit+0x20a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a0c:	e026      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1cd      	bne.n	80049b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f9d1 	bl	8004dc4 <SPI_EndRxTxTransaction>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e000      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10f      	bne.n	8004abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d004      	beq.n	8004abc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
    return;
 8004aba:	e0d7      	b.n	8004c6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_SPI_IRQHandler+0x66>
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	09db      	lsrs	r3, r3, #7
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
    return;
 8004adc:	e0c6      	b.n	8004c6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_SPI_IRQHandler+0x8c>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	099b      	lsrs	r3, r3, #6
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80b4 	beq.w	8004c6c <HAL_SPI_IRQHandler+0x1f4>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80ad 	beq.w	8004c6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d023      	beq.n	8004b66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d011      	beq.n	8004b4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f043 0204 	orr.w	r2, r3, #4
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	e00b      	b.n	8004b66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	693b      	ldr	r3, [r7, #16]
        return;
 8004b64:	e082      	b.n	8004c6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d014      	beq.n	8004b9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f043 0208 	orr.w	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04f      	beq.n	8004c6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bd8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_SPI_IRQHandler+0x17e>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d034      	beq.n	8004c60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0203 	bic.w	r2, r2, #3
 8004c04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_SPI_IRQHandler+0x1fc>)
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc ffbb 	bl	8001b96 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <HAL_SPI_IRQHandler+0x1fc>)
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc ffa5 	bl	8001b96 <HAL_DMA_Abort_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004c5e:	e003      	b.n	8004c68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f809 	bl	8004c78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c66:	e000      	b.n	8004c6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c68:	bf00      	nop
    return;
 8004c6a:	bf00      	nop
  }
}
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	08004c8d 	.word	0x08004c8d

08004c78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ffe6 	bl	8004c78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cc4:	f7fc fbb4 	bl	8001430 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cd4:	f7fc fbac 	bl	8001430 <HAL_GetTick>
 8004cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	015b      	lsls	r3, r3, #5
 8004ce0:	0d1b      	lsrs	r3, r3, #20
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cea:	e054      	b.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d050      	beq.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cf4:	f7fc fb9c 	bl	8001430 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d902      	bls.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d13d      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d111      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d004      	beq.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d107      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d10f      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e017      	b.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d19b      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000004 	.word	0x20000004

08004dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <SPI_EndRxTxTransaction+0x7c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <SPI_EndRxTxTransaction+0x80>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0d5b      	lsrs	r3, r3, #21
 8004ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004de0:	fb02 f303 	mul.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dee:	d112      	bne.n	8004e16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff ff5a 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e00f      	b.n	8004e36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d0f2      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x52>
 8004e30:	e000      	b.n	8004e34 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e32:	bf00      	nop
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000004 	.word	0x20000004
 8004e44:	165e9f81 	.word	0x165e9f81

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e041      	b.n	8004ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc f95e 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 f95e 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d122      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d11b      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0202 	mvn.w	r2, #2
 8004f12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8ee 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004f2e:	e005      	b.n	8004f3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8e0 	bl	80050f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8f1 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d122      	bne.n	8004f96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d11b      	bne.n	8004f96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f06f 0204 	mvn.w	r2, #4
 8004f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f8c4 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004f82:	e005      	b.n	8004f90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8b6 	bl	80050f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8c7 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d122      	bne.n	8004fea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11b      	bne.n	8004fea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0208 	mvn.w	r2, #8
 8004fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f89a 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004fd6:	e005      	b.n	8004fe4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f88c 	bl	80050f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f89d 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d122      	bne.n	800503e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b10      	cmp	r3, #16
 8005004:	d11b      	bne.n	800503e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0210 	mvn.w	r2, #16
 800500e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2208      	movs	r2, #8
 8005014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f870 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 800502a:	e005      	b.n	8005038 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f862 	bl	80050f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f873 	bl	800511e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10e      	bne.n	800506a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0201 	mvn.w	r2, #1
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fc f8c7 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d10e      	bne.n	8005096 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	2b80      	cmp	r3, #128	; 0x80
 8005084:	d107      	bne.n	8005096 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f903 	bl	800529c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d10e      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f838 	bl	8005132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d10e      	bne.n	80050ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0220 	mvn.w	r2, #32
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8cd 	bl	8005288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a40      	ldr	r2, [pc, #256]	; (800525c <TIM_Base_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <TIM_Base_SetConfig+0x118>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3b      	ldr	r2, [pc, #236]	; (8005268 <TIM_Base_SetConfig+0x120>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <TIM_Base_SetConfig+0x124>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2f      	ldr	r2, [pc, #188]	; (800525c <TIM_Base_SetConfig+0x114>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d027      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <TIM_Base_SetConfig+0x118>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d023      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <TIM_Base_SetConfig+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <TIM_Base_SetConfig+0x124>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d017      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a28      	ldr	r2, [pc, #160]	; (8005270 <TIM_Base_SetConfig+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <TIM_Base_SetConfig+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <TIM_Base_SetConfig+0x130>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <TIM_Base_SetConfig+0x134>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a24      	ldr	r2, [pc, #144]	; (8005280 <TIM_Base_SetConfig+0x138>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <TIM_Base_SetConfig+0x13c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d108      	bne.n	800520c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <TIM_Base_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0c      	ldr	r2, [pc, #48]	; (800526c <TIM_Base_SetConfig+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800
 800527c:	40001800 	.word	0x40001800
 8005280:	40001c00 	.word	0x40001c00
 8005284:	40002000 	.word	0x40002000

08005288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e03f      	b.n	8005342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fb ffd2 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f829 	bl	800534c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695a      	ldr	r2, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b0c0      	sub	sp, #256	; 0x100
 8005352:	af00      	add	r7, sp, #0
 8005354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	ea40 0301 	orr.w	r3, r0, r1
 8005374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	431a      	orrs	r2, r3
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	431a      	orrs	r2, r3
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053a4:	f021 010c 	bic.w	r1, r1, #12
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b2:	430b      	orrs	r3, r1
 80053b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	6999      	ldr	r1, [r3, #24]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	ea40 0301 	orr.w	r3, r0, r1
 80053d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b8f      	ldr	r3, [pc, #572]	; (8005618 <UART_SetConfig+0x2cc>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d005      	beq.n	80053ec <UART_SetConfig+0xa0>
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b8d      	ldr	r3, [pc, #564]	; (800561c <UART_SetConfig+0x2d0>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d104      	bne.n	80053f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ec:	f7fe f972 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 80053f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053f4:	e003      	b.n	80053fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053f6:	f7fe f959 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 80053fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	f040 810c 	bne.w	8005624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800540c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800541a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	1891      	adds	r1, r2, r2
 8005424:	65b9      	str	r1, [r7, #88]	; 0x58
 8005426:	415b      	adcs	r3, r3
 8005428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800542e:	4621      	mov	r1, r4
 8005430:	eb12 0801 	adds.w	r8, r2, r1
 8005434:	4629      	mov	r1, r5
 8005436:	eb43 0901 	adc.w	r9, r3, r1
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544e:	4690      	mov	r8, r2
 8005450:	4699      	mov	r9, r3
 8005452:	4623      	mov	r3, r4
 8005454:	eb18 0303 	adds.w	r3, r8, r3
 8005458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800545c:	462b      	mov	r3, r5
 800545e:	eb49 0303 	adc.w	r3, r9, r3
 8005462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800547a:	460b      	mov	r3, r1
 800547c:	18db      	adds	r3, r3, r3
 800547e:	653b      	str	r3, [r7, #80]	; 0x50
 8005480:	4613      	mov	r3, r2
 8005482:	eb42 0303 	adc.w	r3, r2, r3
 8005486:	657b      	str	r3, [r7, #84]	; 0x54
 8005488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800548c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005490:	f7fa feb8 	bl	8000204 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b61      	ldr	r3, [pc, #388]	; (8005620 <UART_SetConfig+0x2d4>)
 800549a:	fba3 2302 	umull	r2, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	011c      	lsls	r4, r3, #4
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80054bc:	415b      	adcs	r3, r3
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054c4:	4641      	mov	r1, r8
 80054c6:	eb12 0a01 	adds.w	sl, r2, r1
 80054ca:	4649      	mov	r1, r9
 80054cc:	eb43 0b01 	adc.w	fp, r3, r1
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e4:	4692      	mov	sl, r2
 80054e6:	469b      	mov	fp, r3
 80054e8:	4643      	mov	r3, r8
 80054ea:	eb1a 0303 	adds.w	r3, sl, r3
 80054ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054f2:	464b      	mov	r3, r9
 80054f4:	eb4b 0303 	adc.w	r3, fp, r3
 80054f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800550c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005510:	460b      	mov	r3, r1
 8005512:	18db      	adds	r3, r3, r3
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
 8005516:	4613      	mov	r3, r2
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005526:	f7fa fe6d 	bl	8000204 <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4611      	mov	r1, r2
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <UART_SetConfig+0x2d4>)
 8005532:	fba3 2301 	umull	r2, r3, r3, r1
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2264      	movs	r2, #100	; 0x64
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	1acb      	subs	r3, r1, r3
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005546:	4b36      	ldr	r3, [pc, #216]	; (8005620 <UART_SetConfig+0x2d4>)
 8005548:	fba3 2302 	umull	r2, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005554:	441c      	add	r4, r3
 8005556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555a:	2200      	movs	r2, #0
 800555c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	1891      	adds	r1, r2, r2
 800556e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005570:	415b      	adcs	r3, r3
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005578:	4641      	mov	r1, r8
 800557a:	1851      	adds	r1, r2, r1
 800557c:	6339      	str	r1, [r7, #48]	; 0x30
 800557e:	4649      	mov	r1, r9
 8005580:	414b      	adcs	r3, r1
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005590:	4659      	mov	r1, fp
 8005592:	00cb      	lsls	r3, r1, #3
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559a:	4651      	mov	r1, sl
 800559c:	00ca      	lsls	r2, r1, #3
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	4642      	mov	r2, r8
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ac:	464b      	mov	r3, r9
 80055ae:	460a      	mov	r2, r1
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055cc:	460b      	mov	r3, r1
 80055ce:	18db      	adds	r3, r3, r3
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d2:	4613      	mov	r3, r2
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055e2:	f7fa fe0f 	bl	8000204 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <UART_SetConfig+0x2d4>)
 80055ec:	fba3 1302 	umull	r1, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	2164      	movs	r1, #100	; 0x64
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3332      	adds	r3, #50	; 0x32
 80055fe:	4a08      	ldr	r2, [pc, #32]	; (8005620 <UART_SetConfig+0x2d4>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f003 0207 	and.w	r2, r3, #7
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4422      	add	r2, r4
 8005612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005614:	e105      	b.n	8005822 <UART_SetConfig+0x4d6>
 8005616:	bf00      	nop
 8005618:	40011000 	.word	0x40011000
 800561c:	40011400 	.word	0x40011400
 8005620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800562e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005636:	4642      	mov	r2, r8
 8005638:	464b      	mov	r3, r9
 800563a:	1891      	adds	r1, r2, r2
 800563c:	6239      	str	r1, [r7, #32]
 800563e:	415b      	adcs	r3, r3
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
 8005642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005646:	4641      	mov	r1, r8
 8005648:	1854      	adds	r4, r2, r1
 800564a:	4649      	mov	r1, r9
 800564c:	eb43 0501 	adc.w	r5, r3, r1
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	00eb      	lsls	r3, r5, #3
 800565a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800565e:	00e2      	lsls	r2, r4, #3
 8005660:	4614      	mov	r4, r2
 8005662:	461d      	mov	r5, r3
 8005664:	4643      	mov	r3, r8
 8005666:	18e3      	adds	r3, r4, r3
 8005668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800566c:	464b      	mov	r3, r9
 800566e:	eb45 0303 	adc.w	r3, r5, r3
 8005672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005692:	4629      	mov	r1, r5
 8005694:	008b      	lsls	r3, r1, #2
 8005696:	4621      	mov	r1, r4
 8005698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569c:	4621      	mov	r1, r4
 800569e:	008a      	lsls	r2, r1, #2
 80056a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056a4:	f7fa fdae 	bl	8000204 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b60      	ldr	r3, [pc, #384]	; (8005830 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	011c      	lsls	r4, r3, #4
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	61b9      	str	r1, [r7, #24]
 80056d0:	415b      	adcs	r3, r3
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d8:	4641      	mov	r1, r8
 80056da:	1851      	adds	r1, r2, r1
 80056dc:	6139      	str	r1, [r7, #16]
 80056de:	4649      	mov	r1, r9
 80056e0:	414b      	adcs	r3, r1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f0:	4659      	mov	r1, fp
 80056f2:	00cb      	lsls	r3, r1, #3
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fa:	4651      	mov	r1, sl
 80056fc:	00ca      	lsls	r2, r1, #3
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	4603      	mov	r3, r0
 8005704:	4642      	mov	r2, r8
 8005706:	189b      	adds	r3, r3, r2
 8005708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800570c:	464b      	mov	r3, r9
 800570e:	460a      	mov	r2, r1
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	67bb      	str	r3, [r7, #120]	; 0x78
 8005722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005730:	4649      	mov	r1, r9
 8005732:	008b      	lsls	r3, r1, #2
 8005734:	4641      	mov	r1, r8
 8005736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573a:	4641      	mov	r1, r8
 800573c:	008a      	lsls	r2, r1, #2
 800573e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005742:	f7fa fd5f 	bl	8000204 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b39      	ldr	r3, [pc, #228]	; (8005830 <UART_SetConfig+0x4e4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	; 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	3332      	adds	r3, #50	; 0x32
 800575e:	4a34      	ldr	r2, [pc, #208]	; (8005830 <UART_SetConfig+0x4e4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576a:	441c      	add	r4, r3
 800576c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005770:	2200      	movs	r2, #0
 8005772:	673b      	str	r3, [r7, #112]	; 0x70
 8005774:	677a      	str	r2, [r7, #116]	; 0x74
 8005776:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800577a:	4642      	mov	r2, r8
 800577c:	464b      	mov	r3, r9
 800577e:	1891      	adds	r1, r2, r2
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	415b      	adcs	r3, r3
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578a:	4641      	mov	r1, r8
 800578c:	1851      	adds	r1, r2, r1
 800578e:	6039      	str	r1, [r7, #0]
 8005790:	4649      	mov	r1, r9
 8005792:	414b      	adcs	r3, r1
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a2:	4659      	mov	r1, fp
 80057a4:	00cb      	lsls	r3, r1, #3
 80057a6:	4651      	mov	r1, sl
 80057a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ac:	4651      	mov	r1, sl
 80057ae:	00ca      	lsls	r2, r1, #3
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	4603      	mov	r3, r0
 80057b6:	4642      	mov	r2, r8
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80057bc:	464b      	mov	r3, r9
 80057be:	460a      	mov	r2, r1
 80057c0:	eb42 0303 	adc.w	r3, r2, r3
 80057c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	663b      	str	r3, [r7, #96]	; 0x60
 80057d0:	667a      	str	r2, [r7, #100]	; 0x64
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057de:	4649      	mov	r1, r9
 80057e0:	008b      	lsls	r3, r1, #2
 80057e2:	4641      	mov	r1, r8
 80057e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e8:	4641      	mov	r1, r8
 80057ea:	008a      	lsls	r2, r1, #2
 80057ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057f0:	f7fa fd08 	bl	8000204 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <UART_SetConfig+0x4e4>)
 80057fa:	fba3 1302 	umull	r1, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	2164      	movs	r1, #100	; 0x64
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	3332      	adds	r3, #50	; 0x32
 800580c:	4a08      	ldr	r2, [pc, #32]	; (8005830 <UART_SetConfig+0x4e4>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4422      	add	r2, r4
 8005820:	609a      	str	r2, [r3, #8]
}
 8005822:	bf00      	nop
 8005824:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005828:	46bd      	mov	sp, r7
 800582a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582e:	bf00      	nop
 8005830:	51eb851f 	.word	0x51eb851f

08005834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005834:	b084      	sub	sp, #16
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	f107 001c 	add.w	r0, r7, #28
 8005842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d122      	bne.n	8005892 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d105      	bne.n	8005886 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 fbe8 	bl	800705c <USB_CoreReset>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e01a      	b.n	80058c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fbdc 	bl	800705c <USB_CoreReset>
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ba:	e005      	b.n	80058c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10b      	bne.n	80058e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f043 0206 	orr.w	r2, r3, #6
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f2:	b004      	add	sp, #16
 80058f4:	4770      	bx	lr
	...

080058f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d165      	bne.n	80059d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a41      	ldr	r2, [pc, #260]	; (8005a14 <USB_SetTurnaroundTime+0x11c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d906      	bls.n	8005922 <USB_SetTurnaroundTime+0x2a>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a40      	ldr	r2, [pc, #256]	; (8005a18 <USB_SetTurnaroundTime+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d202      	bcs.n	8005922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800591c:	230f      	movs	r3, #15
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e062      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a3c      	ldr	r2, [pc, #240]	; (8005a18 <USB_SetTurnaroundTime+0x120>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d306      	bcc.n	8005938 <USB_SetTurnaroundTime+0x40>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <USB_SetTurnaroundTime+0x124>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d202      	bcs.n	8005938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005932:	230e      	movs	r3, #14
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e057      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a38      	ldr	r2, [pc, #224]	; (8005a1c <USB_SetTurnaroundTime+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d306      	bcc.n	800594e <USB_SetTurnaroundTime+0x56>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a37      	ldr	r2, [pc, #220]	; (8005a20 <USB_SetTurnaroundTime+0x128>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d202      	bcs.n	800594e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005948:	230d      	movs	r3, #13
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e04c      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <USB_SetTurnaroundTime+0x128>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d306      	bcc.n	8005964 <USB_SetTurnaroundTime+0x6c>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <USB_SetTurnaroundTime+0x12c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800595e:	230c      	movs	r3, #12
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e041      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <USB_SetTurnaroundTime+0x12c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d906      	bls.n	800597a <USB_SetTurnaroundTime+0x82>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a2e      	ldr	r2, [pc, #184]	; (8005a28 <USB_SetTurnaroundTime+0x130>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d802      	bhi.n	800597a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005974:	230b      	movs	r3, #11
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e036      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <USB_SetTurnaroundTime+0x130>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d906      	bls.n	8005990 <USB_SetTurnaroundTime+0x98>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <USB_SetTurnaroundTime+0x134>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d802      	bhi.n	8005990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800598a:	230a      	movs	r3, #10
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e02b      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <USB_SetTurnaroundTime+0x134>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d906      	bls.n	80059a6 <USB_SetTurnaroundTime+0xae>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a25      	ldr	r2, [pc, #148]	; (8005a30 <USB_SetTurnaroundTime+0x138>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d202      	bcs.n	80059a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059a0:	2309      	movs	r3, #9
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e020      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <USB_SetTurnaroundTime+0x138>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d306      	bcc.n	80059bc <USB_SetTurnaroundTime+0xc4>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <USB_SetTurnaroundTime+0x13c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d802      	bhi.n	80059bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059b6:	2308      	movs	r3, #8
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e015      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <USB_SetTurnaroundTime+0x13c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d906      	bls.n	80059d2 <USB_SetTurnaroundTime+0xda>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <USB_SetTurnaroundTime+0x140>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d202      	bcs.n	80059d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059cc:	2307      	movs	r3, #7
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e00a      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059d2:	2306      	movs	r3, #6
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e007      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059de:	2309      	movs	r3, #9
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e001      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059e4:	2309      	movs	r3, #9
 80059e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	029b      	lsls	r3, r3, #10
 80059fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	00d8acbf 	.word	0x00d8acbf
 8005a18:	00e4e1c0 	.word	0x00e4e1c0
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	01067380 	.word	0x01067380
 8005a24:	011a499f 	.word	0x011a499f
 8005a28:	01312cff 	.word	0x01312cff
 8005a2c:	014ca43f 	.word	0x014ca43f
 8005a30:	016e3600 	.word	0x016e3600
 8005a34:	01a6ab1f 	.word	0x01a6ab1f
 8005a38:	01e84800 	.word	0x01e84800

08005a3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d115      	bne.n	8005ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f7fb fcca 	bl	8001448 <HAL_Delay>
      ms++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fa3f 	bl	8006f3e <USB_GetMode>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d01e      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b31      	cmp	r3, #49	; 0x31
 8005aca:	d9f0      	bls.n	8005aae <USB_SetCurrentMode+0x2e>
 8005acc:	e01a      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d115      	bne.n	8005b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7fb fcb1 	bl	8001448 <HAL_Delay>
      ms++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fa26 	bl	8006f3e <USB_GetMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b31      	cmp	r3, #49	; 0x31
 8005afc:	d9f0      	bls.n	8005ae0 <USB_SetCurrentMode+0x60>
 8005afe:	e001      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e005      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b32      	cmp	r3, #50	; 0x32
 8005b08:	d101      	bne.n	8005b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e009      	b.n	8005b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3340      	adds	r3, #64	; 0x40
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0e      	cmp	r3, #14
 8005b50:	d9f2      	bls.n	8005b38 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11c      	bne.n	8005b92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b66:	f043 0302 	orr.w	r3, r3, #2
 8005b6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e005      	b.n	8005b9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	461a      	mov	r2, r3
 8005bba:	680b      	ldr	r3, [r1, #0]
 8005bbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10c      	bne.n	8005bde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f965 	bl	8005e9c <USB_SetDevSpeed>
 8005bd2:	e008      	b.n	8005be6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f960 	bl	8005e9c <USB_SetDevSpeed>
 8005bdc:	e003      	b.n	8005be6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bde:	2103      	movs	r1, #3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f95b 	bl	8005e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be6:	2110      	movs	r1, #16
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8f3 	bl	8005dd4 <USB_FlushTxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f91f 	bl	8005e3c <USB_FlushRxFifo>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e043      	b.n	8005cba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c48:	d118      	bne.n	8005c7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e013      	b.n	8005c8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e008      	b.n	8005c8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	461a      	mov	r2, r3
 8005cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3b7      	bcc.n	8005c32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e043      	b.n	8005d50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cde:	d118      	bne.n	8005d12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e013      	b.n	8005d24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e008      	b.n	8005d24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d3b7      	bcc.n	8005cc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f043 0210 	orr.w	r2, r3, #16
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <USB_DevInit+0x2b8>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dcc:	b004      	add	sp, #16
 8005dce:	4770      	bx	lr
 8005dd0:	803c3800 	.word	0x803c3800

08005dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <USB_FlushTxFifo+0x64>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e01b      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	daf2      	bge.n	8005de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	019b      	lsls	r3, r3, #6
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <USB_FlushTxFifo+0x64>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d0f0      	beq.n	8005e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	00030d40 	.word	0x00030d40

08005e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e018      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	daf2      	bge.n	8005e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d0f0      	beq.n	8005e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	e00a      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d002      	beq.n	8005f00 <USB_GetDevSpeed+0x32>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d102      	bne.n	8005f06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f00:	2302      	movs	r3, #2
 8005f02:	75fb      	strb	r3, [r7, #23]
 8005f04:	e001      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f06:	230f      	movs	r3, #15
 8005f08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d13a      	bne.n	8005faa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d155      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f90:	4313      	orrs	r3, r2
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e036      	b.n	8006018 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11a      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ffe:	430b      	orrs	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d161      	bne.n	8006108 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605a:	d11f      	bne.n	800609c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800607a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800609a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4013      	ands	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	0159      	lsls	r1, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	4619      	mov	r1, r3
 8006100:	4b35      	ldr	r3, [pc, #212]	; (80061d8 <USB_DeactivateEndpoint+0x1b0>)
 8006102:	4013      	ands	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
 8006106:	e060      	b.n	80061ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611e:	d11f      	bne.n	8006160 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <USB_DeactivateEndpoint+0x1b4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	ec337800 	.word	0xec337800
 80061dc:	eff37800 	.word	0xeff37800

080061e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 815c 	bne.w	80064ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d132      	bne.n	8006270 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006268:	0cdb      	lsrs	r3, r3, #19
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	6113      	str	r3, [r2, #16]
 800626e:	e074      	b.n	800635a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	04db      	lsls	r3, r3, #19
 800628e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6999      	ldr	r1, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	440b      	add	r3, r1
 80062cc:	1e59      	subs	r1, r3, #1
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062d8:	4b9d      	ldr	r3, [pc, #628]	; (8006550 <USB_EPStartXfer+0x370>)
 80062da:	400b      	ands	r3, r1
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006302:	69b9      	ldr	r1, [r7, #24]
 8006304:	0148      	lsls	r0, r1, #5
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	4401      	add	r1, r0
 800630a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11f      	bne.n	800635a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006338:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006358:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d14b      	bne.n	80063f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	791b      	ldrb	r3, [r3, #4]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d128      	bne.n	80063d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e00f      	b.n	80063d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e133      	b.n	8006660 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006412:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006416:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	791b      	ldrb	r3, [r3, #4]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d015      	beq.n	800644c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 811b 	beq.w	8006660 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	69f9      	ldr	r1, [r7, #28]
 8006442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006446:	4313      	orrs	r3, r2
 8006448:	634b      	str	r3, [r1, #52]	; 0x34
 800644a:	e109      	b.n	8006660 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d110      	bne.n	800647e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e00f      	b.n	800649e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6919      	ldr	r1, [r3, #16]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	b298      	uxth	r0, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fade 	bl	8006a74 <USB_WritePacket>
 80064b8:	e0d2      	b.n	8006660 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	0cdb      	lsrs	r3, r3, #19
 80064d6:	04db      	lsls	r3, r3, #19
 80064d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d126      	bne.n	8006554 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	0148      	lsls	r0, r1, #5
 8006520:	69f9      	ldr	r1, [r7, #28]
 8006522:	4401      	add	r1, r0
 8006524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006528:	4313      	orrs	r3, r2
 800652a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654a:	6113      	str	r3, [r2, #16]
 800654c:	e03a      	b.n	80065c4 <USB_EPStartXfer+0x3e4>
 800654e:	bf00      	nop
 8006550:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4413      	add	r3, r2
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	8afa      	ldrh	r2, [r7, #22]
 8006570:	fb03 f202 	mul.w	r2, r3, r2
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	8afb      	ldrh	r3, [r7, #22]
 8006588:	04d9      	lsls	r1, r3, #19
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <USB_EPStartXfer+0x48c>)
 800658c:	400b      	ands	r3, r1
 800658e:	69b9      	ldr	r1, [r7, #24]
 8006590:	0148      	lsls	r0, r1, #5
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	4401      	add	r1, r0
 8006596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	0148      	lsls	r0, r1, #5
 80065b8:	69f9      	ldr	r1, [r7, #28]
 80065ba:	4401      	add	r1, r0
 80065bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065c0:	4313      	orrs	r3, r2
 80065c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10d      	bne.n	80065e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6919      	ldr	r1, [r3, #16]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	460a      	mov	r2, r1
 80065e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d128      	bne.n	8006640 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d110      	bne.n	8006620 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e00f      	b.n	8006640 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	1ff80000 	.word	0x1ff80000

08006670 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 80ce 	bne.w	800682e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d132      	bne.n	8006700 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f8:	0cdb      	lsrs	r3, r3, #19
 80066fa:	04db      	lsls	r3, r3, #19
 80066fc:	6113      	str	r3, [r2, #16]
 80066fe:	e04e      	b.n	800679e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	0cdb      	lsrs	r3, r3, #19
 800671c:	04db      	lsls	r3, r3, #19
 800671e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800673e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006742:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d903      	bls.n	8006758 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800678e:	6939      	ldr	r1, [r7, #16]
 8006790:	0148      	lsls	r0, r1, #5
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	4401      	add	r1, r0
 8006796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800679a:	4313      	orrs	r3, r2
 800679c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d11e      	bne.n	80067e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	461a      	mov	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e097      	b.n	8006912 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006800:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8083 	beq.w	8006912 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	2101      	movs	r1, #1
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	6979      	ldr	r1, [r7, #20]
 8006824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006828:	4313      	orrs	r3, r2
 800682a:	634b      	str	r3, [r1, #52]	; 0x34
 800682c:	e071      	b.n	8006912 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	0cdb      	lsrs	r3, r3, #19
 800684a:	04db      	lsls	r3, r3, #19
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800686c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006870:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c0:	6939      	ldr	r1, [r7, #16]
 80068c2:	0148      	lsls	r0, r1, #5
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	4401      	add	r1, r0
 80068c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068cc:	4313      	orrs	r3, r2
 80068ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10d      	bne.n	80068f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	460a      	mov	r2, r1
 80068f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d14a      	bne.n	80069d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006956:	f040 8086 	bne.w	8006a66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006978:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d902      	bls.n	80069b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
          break;
 80069b6:	e056      	b.n	8006a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d0:	d0e7      	beq.n	80069a2 <USB_EPStopXfer+0x82>
 80069d2:	e048      	b.n	8006a66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ec:	d13b      	bne.n	8006a66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d902      	bls.n	8006a4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
          break;
 8006a4a:	e00c      	b.n	8006a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a64:	d0e7      	beq.n	8006a36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	; 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	460b      	mov	r3, r1
 8006a84:	71fb      	strb	r3, [r7, #7]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d123      	bne.n	8006ae2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a9a:	88bb      	ldrh	r3, [r7, #4]
 8006a9c:	3303      	adds	r3, #3
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e018      	b.n	8006ada <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	031a      	lsls	r2, r3, #12
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	3301      	adds	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3e2      	bcc.n	8006aa8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3724      	adds	r7, #36	; 0x24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b08b      	sub	sp, #44	; 0x2c
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	e014      	b.n	8006b46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	3301      	adds	r3, #1
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	3301      	adds	r3, #1
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	3301      	adds	r3, #1
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3e6      	bcc.n	8006b1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b4e:	8bfb      	ldrh	r3, [r7, #30]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01e      	beq.n	8006b92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f107 0310 	add.w	r3, r7, #16
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	701a      	strb	r2, [r3, #0]
      i++;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	3301      	adds	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b86:	8bfb      	ldrh	r3, [r7, #30]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b8c:	8bfb      	ldrh	r3, [r7, #30]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ea      	bne.n	8006b68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	372c      	adds	r7, #44	; 0x2c
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d12c      	bne.n	8006c16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db12      	blt.n	8006bf4 <USB_EPSetStall+0x54>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	e02b      	b.n	8006c6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db12      	blt.n	8006c4e <USB_EPSetStall+0xae>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00f      	beq.n	8006c4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d128      	bne.n	8006cea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d003      	beq.n	8006cc8 <USB_EPClearStall+0x4c>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	791b      	ldrb	r3, [r3, #4]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d138      	bne.n	8006d3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e027      	b.n	8006d3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d003      	beq.n	8006d1a <USB_EPClearStall+0x9e>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d10f      	bne.n	8006d3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc2:	f023 0302 	bic.w	r3, r3, #2
 8006dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e30:	68fb      	ldr	r3, [r7, #12]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	0c1b      	lsrs	r3, r3, #16
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	b29b      	uxth	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f12:	01db      	lsls	r3, r3, #7
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f30:	68bb      	ldr	r3, [r7, #8]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f78:	f023 0307 	bic.w	r3, r3, #7
 8006f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	333c      	adds	r3, #60	; 0x3c
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <USB_EP0_OutStart+0xb8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d90a      	bls.n	8006fda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd4:	d101      	bne.n	8006fda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e037      	b.n	800704a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007008:	f043 0318 	orr.w	r3, r3, #24
 800700c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007020:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10f      	bne.n	8007048 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007042:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	4f54300a 	.word	0x4f54300a

0800705c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <USB_CoreReset+0x64>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e01b      	b.n	80070b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	daf2      	bge.n	8007068 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <USB_CoreReset+0x64>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d901      	bls.n	80070a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e006      	b.n	80070b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d0f0      	beq.n	8007092 <USB_CoreReset+0x36>

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	00030d40 	.word	0x00030d40

080070c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070d4:	f002 fcc8 	bl	8009a68 <USBD_static_malloc>
 80070d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32b0      	adds	r2, #176	; 0xb0
 80070ea:	2100      	movs	r1, #0
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070f0:	2302      	movs	r3, #2
 80070f2:	e0d4      	b.n	800729e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070f8:	2100      	movs	r1, #0
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f002 fd1c 	bl	8009b38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32b0      	adds	r2, #176	; 0xb0
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32b0      	adds	r2, #176	; 0xb0
 800711a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7c1b      	ldrb	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d138      	bne.n	800719e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800712c:	4b5e      	ldr	r3, [pc, #376]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 800712e:	7819      	ldrb	r1, [r3, #0]
 8007130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007134:	2202      	movs	r2, #2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fb25 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800713c:	4b5a      	ldr	r3, [pc, #360]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	2201      	movs	r2, #1
 8007154:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007158:	7819      	ldrb	r1, [r3, #0]
 800715a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800715e:	2202      	movs	r2, #2
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 fb10 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007166:	4b51      	ldr	r3, [pc, #324]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 020f 	and.w	r2, r3, #15
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800717e:	2201      	movs	r2, #1
 8007180:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007182:	4b4b      	ldr	r3, [pc, #300]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	3326      	adds	r3, #38	; 0x26
 8007198:	2210      	movs	r2, #16
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e035      	b.n	800720a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800719e:	4b42      	ldr	r3, [pc, #264]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 80071a0:	7819      	ldrb	r1, [r3, #0]
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2202      	movs	r2, #2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 faed 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071ac:	4b3e      	ldr	r3, [pc, #248]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2201      	movs	r2, #1
 80071c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <USBD_CDC_Init+0x1e8>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	2340      	movs	r3, #64	; 0x40
 80071cc:	2202      	movs	r2, #2
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f002 fad9 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <USBD_CDC_Init+0x1e8>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 020f 	and.w	r2, r3, #15
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ec:	2201      	movs	r2, #1
 80071ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071f0:	4b2f      	ldr	r3, [pc, #188]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3326      	adds	r3, #38	; 0x26
 8007206:	2210      	movs	r2, #16
 8007208:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800720a:	4b29      	ldr	r3, [pc, #164]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	2308      	movs	r3, #8
 8007210:	2203      	movs	r2, #3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 fab7 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3324      	adds	r3, #36	; 0x24
 800722e:	2201      	movs	r2, #1
 8007230:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	33b0      	adds	r3, #176	; 0xb0
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007268:	2302      	movs	r3, #2
 800726a:	e018      	b.n	800729e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007274:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007276:	7819      	ldrb	r1, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fb6e 	bl	8009964 <USBD_LL_PrepareReceive>
 8007288:	e008      	b.n	800729c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <USBD_CDC_Init+0x1e8>)
 800728c:	7819      	ldrb	r1, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f002 fb64 	bl	8009964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000097 	.word	0x20000097
 80072ac:	20000098 	.word	0x20000098
 80072b0:	20000099 	.word	0x20000099

080072b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072c0:	4b3a      	ldr	r3, [pc, #232]	; (80073ac <USBD_CDC_DeInit+0xf8>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 fa83 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072cc:	4b37      	ldr	r3, [pc, #220]	; (80073ac <USBD_CDC_DeInit+0xf8>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3324      	adds	r3, #36	; 0x24
 80072e2:	2200      	movs	r2, #0
 80072e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072e6:	4b32      	ldr	r3, [pc, #200]	; (80073b0 <USBD_CDC_DeInit+0xfc>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 fa70 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072f2:	4b2f      	ldr	r3, [pc, #188]	; (80073b0 <USBD_CDC_DeInit+0xfc>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 fa5c 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800731a:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	2200      	movs	r2, #0
 8007332:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007334:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 020f 	and.w	r2, r3, #15
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3326      	adds	r3, #38	; 0x26
 800734a:	2200      	movs	r2, #0
 800734c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32b0      	adds	r2, #176	; 0xb0
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01f      	beq.n	80073a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	4618      	mov	r0, r3
 8007384:	f002 fb7e 	bl	8009a84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32b0      	adds	r2, #176	; 0xb0
 8007392:	2100      	movs	r1, #0
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000097 	.word	0x20000097
 80073b0:	20000098 	.word	0x20000098
 80073b4:	20000099 	.word	0x20000099

080073b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	32b0      	adds	r2, #176	; 0xb0
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0bf      	b.n	8007568 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d050      	beq.n	8007496 <USBD_CDC_Setup+0xde>
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	f040 80af 	bne.w	8007558 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d03a      	beq.n	8007478 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b25b      	sxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	da1b      	bge.n	8007444 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	33b0      	adds	r3, #176	; 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007422:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	88d2      	ldrh	r2, [r2, #6]
 8007428:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b07      	cmp	r3, #7
 8007430:	bf28      	it	cs
 8007432:	2307      	movcs	r3, #7
 8007434:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	89fa      	ldrh	r2, [r7, #14]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fd6d 	bl	8008f1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007442:	e090      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	88db      	ldrh	r3, [r3, #6]
 8007452:	2b3f      	cmp	r3, #63	; 0x3f
 8007454:	d803      	bhi.n	800745e <USBD_CDC_Setup+0xa6>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	88db      	ldrh	r3, [r3, #6]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	e000      	b.n	8007460 <USBD_CDC_Setup+0xa8>
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007466:	6939      	ldr	r1, [r7, #16]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800746e:	461a      	mov	r2, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fd7f 	bl	8008f74 <USBD_CtlPrepareRx>
      break;
 8007476:	e076      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	; 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	7850      	ldrb	r0, [r2, #1]
 800748e:	2200      	movs	r2, #0
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4798      	blx	r3
      break;
 8007494:	e067      	b.n	8007566 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b0b      	cmp	r3, #11
 800749c:	d851      	bhi.n	8007542 <USBD_CDC_Setup+0x18a>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <USBD_CDC_Setup+0xec>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074d5 	.word	0x080074d5
 80074a8:	08007551 	.word	0x08007551
 80074ac:	08007543 	.word	0x08007543
 80074b0:	08007543 	.word	0x08007543
 80074b4:	08007543 	.word	0x08007543
 80074b8:	08007543 	.word	0x08007543
 80074bc:	08007543 	.word	0x08007543
 80074c0:	08007543 	.word	0x08007543
 80074c4:	08007543 	.word	0x08007543
 80074c8:	08007543 	.word	0x08007543
 80074cc:	080074ff 	.word	0x080074ff
 80074d0:	08007529 	.word	0x08007529
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d107      	bne.n	80074f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074e0:	f107 030a 	add.w	r3, r7, #10
 80074e4:	2202      	movs	r2, #2
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fd17 	bl	8008f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ee:	e032      	b.n	8007556 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fca1 	bl	8008e3a <USBD_CtlError>
            ret = USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	75fb      	strb	r3, [r7, #23]
          break;
 80074fc:	e02b      	b.n	8007556 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d107      	bne.n	800751a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800750a:	f107 030d 	add.w	r3, r7, #13
 800750e:	2201      	movs	r2, #1
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fd02 	bl	8008f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007518:	e01d      	b.n	8007556 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fc8c 	bl	8008e3a <USBD_CtlError>
            ret = USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	75fb      	strb	r3, [r7, #23]
          break;
 8007526:	e016      	b.n	8007556 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d00f      	beq.n	8007554 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc7f 	bl	8008e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007540:	e008      	b.n	8007554 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fc78 	bl	8008e3a <USBD_CtlError>
          ret = USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	75fb      	strb	r3, [r7, #23]
          break;
 800754e:	e002      	b.n	8007556 <USBD_CDC_Setup+0x19e>
          break;
 8007550:	bf00      	nop
 8007552:	e008      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
          break;
 8007554:	bf00      	nop
      }
      break;
 8007556:	e006      	b.n	8007566 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fc6d 	bl	8008e3a <USBD_CtlError>
      ret = USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	75fb      	strb	r3, [r7, #23]
      break;
 8007564:	bf00      	nop
  }

  return (uint8_t)ret;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007582:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32b0      	adds	r2, #176	; 0xb0
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007596:	2303      	movs	r3, #3
 8007598:	e065      	b.n	8007666 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32b0      	adds	r2, #176	; 0xb0
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3318      	adds	r3, #24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02f      	beq.n	8007624 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	3318      	adds	r3, #24
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 010f 	and.w	r1, r3, #15
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	460b      	mov	r3, r1
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	440b      	add	r3, r1
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4403      	add	r3, r0
 80075ec:	3348      	adds	r3, #72	; 0x48
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d112      	bne.n	8007624 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	3318      	adds	r3, #24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007616:	78f9      	ldrb	r1, [r7, #3]
 8007618:	2300      	movs	r3, #0
 800761a:	2200      	movs	r2, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 f980 	bl	8009922 <USBD_LL_Transmit>
 8007622:	e01f      	b.n	8007664 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	33b0      	adds	r3, #176	; 0xb0
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	33b0      	adds	r3, #176	; 0xb0
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32b0      	adds	r2, #176	; 0xb0
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	32b0      	adds	r2, #176	; 0xb0
 8007694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e01a      	b.n	80076d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 f97e 	bl	80099a6 <USBD_LL_GetRxDataSize>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33b0      	adds	r3, #176	; 0xb0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076d0:	4611      	mov	r1, r2
 80076d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32b0      	adds	r2, #176	; 0xb0
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e025      	b.n	800774c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	33b0      	adds	r3, #176	; 0xb0
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01a      	beq.n	800774a <USBD_CDC_EP0_RxReady+0x6c>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800771a:	2bff      	cmp	r3, #255	; 0xff
 800771c:	d015      	beq.n	800774a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	33b0      	adds	r3, #176	; 0xb0
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007736:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800773e:	b292      	uxth	r2, r2
 8007740:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800775c:	2182      	movs	r1, #130	; 0x82
 800775e:	4818      	ldr	r0, [pc, #96]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007760:	f000 fd09 	bl	8008176 <USBD_GetEpDesc>
 8007764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007766:	2101      	movs	r1, #1
 8007768:	4815      	ldr	r0, [pc, #84]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800776a:	f000 fd04 	bl	8008176 <USBD_GetEpDesc>
 800776e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007770:	2181      	movs	r1, #129	; 0x81
 8007772:	4813      	ldr	r0, [pc, #76]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007774:	f000 fcff 	bl	8008176 <USBD_GetEpDesc>
 8007778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2210      	movs	r2, #16
 8007784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2200      	movs	r2, #0
 8007790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007794:	711a      	strb	r2, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a8:	711a      	strb	r2, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2243      	movs	r2, #67	; 0x43
 80077b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000054 	.word	0x20000054

080077c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077cc:	2182      	movs	r1, #130	; 0x82
 80077ce:	4818      	ldr	r0, [pc, #96]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077d0:	f000 fcd1 	bl	8008176 <USBD_GetEpDesc>
 80077d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077d6:	2101      	movs	r1, #1
 80077d8:	4815      	ldr	r0, [pc, #84]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077da:	f000 fccc 	bl	8008176 <USBD_GetEpDesc>
 80077de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e0:	2181      	movs	r1, #129	; 0x81
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077e4:	f000 fcc7 	bl	8008176 <USBD_GetEpDesc>
 80077e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2210      	movs	r2, #16
 80077f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	711a      	strb	r2, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f042 0202 	orr.w	r2, r2, #2
 8007808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	711a      	strb	r2, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f042 0202 	orr.w	r2, r2, #2
 800781c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2243      	movs	r2, #67	; 0x43
 8007822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000054 	.word	0x20000054

08007834 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800783c:	2182      	movs	r1, #130	; 0x82
 800783e:	4818      	ldr	r0, [pc, #96]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007840:	f000 fc99 	bl	8008176 <USBD_GetEpDesc>
 8007844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007846:	2101      	movs	r1, #1
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800784a:	f000 fc94 	bl	8008176 <USBD_GetEpDesc>
 800784e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007850:	2181      	movs	r1, #129	; 0x81
 8007852:	4813      	ldr	r0, [pc, #76]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007854:	f000 fc8f 	bl	8008176 <USBD_GetEpDesc>
 8007858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2210      	movs	r2, #16
 8007864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007874:	711a      	strb	r2, [r3, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007888:	711a      	strb	r2, [r3, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2243      	movs	r2, #67	; 0x43
 8007892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000054 	.word	0x20000054

080078a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	220a      	movs	r2, #10
 80078b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000010 	.word	0x20000010

080078c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e009      	b.n	80078ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	33b0      	adds	r3, #176	; 0xb0
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	32b0      	adds	r2, #176	; 0xb0
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	e008      	b.n	8007930 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	32b0      	adds	r2, #176	; 0xb0
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e004      	b.n	800796a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32b0      	adds	r2, #176	; 0xb0
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32b0      	adds	r2, #176	; 0xb0
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e018      	b.n	80079d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	7c1b      	ldrb	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <USBD_CDC_ReceivePacket+0x68>)
 80079b0:	7819      	ldrb	r1, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 ffd1 	bl	8009964 <USBD_LL_PrepareReceive>
 80079c2:	e008      	b.n	80079d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <USBD_CDC_ReceivePacket+0x68>)
 80079c6:	7819      	ldrb	r1, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ce:	2340      	movs	r3, #64	; 0x40
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 ffc7 	bl	8009964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000098 	.word	0x20000098

080079e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e01f      	b.n	8007a3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	79fa      	ldrb	r2, [r7, #7]
 8007a2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f001 fe41 	bl	80096b8 <USBD_LL_Init>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e025      	b.n	8007aa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	; 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00f      	beq.n	8007a98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32ae      	adds	r2, #174	; 0xae
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	f107 020e 	add.w	r2, r7, #14
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	4602      	mov	r2, r0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fe49 	bl	8009750 <USBD_LL_Start>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ad0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	4611      	mov	r1, r2
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f932 	bl	8008dc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d01a      	beq.n	8007bbc <USBD_LL_SetupStage+0x72>
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d822      	bhi.n	8007bd0 <USBD_LL_SetupStage+0x86>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <USBD_LL_SetupStage+0x4a>
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d00a      	beq.n	8007ba8 <USBD_LL_SetupStage+0x5e>
 8007b92:	e01d      	b.n	8007bd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fb5f 	bl	8008260 <USBD_StdDevReq>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba6:	e020      	b.n	8007bea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fbc7 	bl	8008344 <USBD_StdItfReq>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bba:	e016      	b.n	8007bea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fc29 	bl	800841c <USBD_StdEPReq>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bce:	e00c      	b.n	8007bea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fe16 	bl	8009810 <USBD_LL_StallEP>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
      break;
 8007be8:	bf00      	nop
  }

  return ret;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d16e      	bne.n	8007cea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	f040 8098 	bne.w	8007d50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d913      	bls.n	8007c54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	4293      	cmp	r3, r2
 8007c44:	bf28      	it	cs
 8007c46:	4613      	movcs	r3, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 f9ae 	bl	8008fae <USBD_CtlContinueRx>
 8007c52:	e07d      	b.n	8007d50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d014      	beq.n	8007c8c <USBD_LL_DataOutStage+0x98>
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d81d      	bhi.n	8007ca2 <USBD_LL_DataOutStage+0xae>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <USBD_LL_DataOutStage+0x7c>
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d003      	beq.n	8007c76 <USBD_LL_DataOutStage+0x82>
 8007c6e:	e018      	b.n	8007ca2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	75bb      	strb	r3, [r7, #22]
            break;
 8007c74:	e018      	b.n	8007ca8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	4619      	mov	r1, r3
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fa5e 	bl	8008142 <USBD_CoreFindIF>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75bb      	strb	r3, [r7, #22]
            break;
 8007c8a:	e00d      	b.n	8007ca8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fa60 	bl	800815c <USBD_CoreFindEP>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007ca0:	e002      	b.n	8007ca8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ca6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ca8:	7dbb      	ldrb	r3, [r7, #22]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d119      	bne.n	8007ce2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d113      	bne.n	8007ce2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cba:	7dba      	ldrb	r2, [r7, #22]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	32ae      	adds	r2, #174	; 0xae
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cca:	7dba      	ldrb	r2, [r7, #22]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cd2:	7dba      	ldrb	r2, [r7, #22]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	32ae      	adds	r2, #174	; 0xae
 8007cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f001 f974 	bl	8008fd0 <USBD_CtlSendStatus>
 8007ce8:	e032      	b.n	8007d50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fa31 	bl	800815c <USBD_CoreFindEP>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cfe:	7dbb      	ldrb	r3, [r7, #22]
 8007d00:	2bff      	cmp	r3, #255	; 0xff
 8007d02:	d025      	beq.n	8007d50 <USBD_LL_DataOutStage+0x15c>
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d122      	bne.n	8007d50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d117      	bne.n	8007d46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d16:	7dba      	ldrb	r2, [r7, #22]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	32ae      	adds	r2, #174	; 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00f      	beq.n	8007d46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d26:	7dba      	ldrb	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d2e:	7dba      	ldrb	r2, [r7, #22]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	32ae      	adds	r2, #174	; 0xae
 8007d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	7afa      	ldrb	r2, [r7, #11]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	4798      	blx	r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	e000      	b.n	8007d52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	460b      	mov	r3, r1
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d16f      	bne.n	8007e4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3314      	adds	r3, #20
 8007d72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d15a      	bne.n	8007e34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d914      	bls.n	8007db4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 f8d6 	bl	8008f52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da6:	2300      	movs	r3, #0
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f001 fdd9 	bl	8009964 <USBD_LL_PrepareReceive>
 8007db2:	e03f      	b.n	8007e34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d11c      	bne.n	8007dfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d316      	bcc.n	8007dfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d20f      	bcs.n	8007dfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 f8b7 	bl	8008f52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dec:	2300      	movs	r3, #0
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 fdb6 	bl	8009964 <USBD_LL_PrepareReceive>
 8007df8:	e01c      	b.n	8007e34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d10f      	bne.n	8007e26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e26:	2180      	movs	r1, #128	; 0x80
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f001 fcf1 	bl	8009810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 f8e1 	bl	8008ff6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03a      	beq.n	8007eb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fe42 	bl	8007ac8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e4c:	e032      	b.n	8007eb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f97f 	bl	800815c <USBD_CoreFindEP>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	2bff      	cmp	r3, #255	; 0xff
 8007e66:	d025      	beq.n	8007eb4 <USBD_LL_DataInStage+0x15a>
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d122      	bne.n	8007eb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d11c      	bne.n	8007eb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e7a:	7dfa      	ldrb	r2, [r7, #23]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	32ae      	adds	r2, #174	; 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d014      	beq.n	8007eb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e8a:	7dfa      	ldrb	r2, [r7, #23]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e92:	7dfa      	ldrb	r2, [r7, #23]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	32ae      	adds	r2, #174	; 0xae
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	7afa      	ldrb	r2, [r7, #11]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	4798      	blx	r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007eaa:	7dbb      	ldrb	r3, [r7, #22]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007eb0:	7dbb      	ldrb	r3, [r7, #22]
 8007eb2:	e000      	b.n	8007eb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d014      	beq.n	8007f24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00e      	beq.n	8007f24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6852      	ldr	r2, [r2, #4]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	4611      	mov	r1, r2
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f20:	2303      	movs	r3, #3
 8007f22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fc2b 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2240      	movs	r2, #64	; 0x40
 8007f3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f40:	2340      	movs	r3, #64	; 0x40
 8007f42:	2200      	movs	r2, #0
 8007f44:	2180      	movs	r1, #128	; 0x80
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fc1d 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2240      	movs	r2, #64	; 0x40
 8007f56:	621a      	str	r2, [r3, #32]

  return ret;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d106      	bne.n	8007fd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d110      	bne.n	8008014 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	32ae      	adds	r2, #174	; 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	e01c      	b.n	800807a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d115      	bne.n	8008078 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32ae      	adds	r2, #174	; 0xae
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	; 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4611      	mov	r1, r2
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32ae      	adds	r2, #174	; 0xae
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e01c      	b.n	80080de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d115      	bne.n	80080dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32ae      	adds	r2, #174	; 0xae
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	; 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6852      	ldr	r2, [r2, #4]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	4611      	mov	r1, r2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800814e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008168:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	429a      	cmp	r2, r3
 800819c:	d920      	bls.n	80081e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081a6:	e013      	b.n	80081d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081a8:	f107 030a 	add.w	r3, r7, #10
 80081ac:	4619      	mov	r1, r3
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f000 f81b 	bl	80081ea <USBD_GetNextDesc>
 80081b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	d108      	bne.n	80081d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d008      	beq.n	80081de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	885b      	ldrh	r3, [r3, #2]
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	897b      	ldrh	r3, [r7, #10]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d8e5      	bhi.n	80081a8 <USBD_GetEpDesc+0x32>
 80081dc:	e000      	b.n	80081e0 <USBD_GetEpDesc+0x6a>
          break;
 80081de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081e0:	693b      	ldr	r3, [r7, #16]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	881a      	ldrh	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	4413      	add	r3, r2
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008216:	68fb      	ldr	r3, [r7, #12]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	3301      	adds	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008242:	8a3b      	ldrh	r3, [r7, #16]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	b21a      	sxth	r2, r3
 8008248:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800824c:	4313      	orrs	r3, r2
 800824e:	b21b      	sxth	r3, r3
 8008250:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008252:	89fb      	ldrh	r3, [r7, #14]
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d005      	beq.n	8008286 <USBD_StdDevReq+0x26>
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	d857      	bhi.n	800832e <USBD_StdDevReq+0xce>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00f      	beq.n	80082a2 <USBD_StdDevReq+0x42>
 8008282:	2b20      	cmp	r3, #32
 8008284:	d153      	bne.n	800832e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	32ae      	adds	r2, #174	; 0xae
 8008290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	e04a      	b.n	8008338 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d83b      	bhi.n	8008322 <USBD_StdDevReq+0xc2>
 80082aa:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USBD_StdDevReq+0x50>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	08008305 	.word	0x08008305
 80082b4:	08008319 	.word	0x08008319
 80082b8:	08008323 	.word	0x08008323
 80082bc:	0800830f 	.word	0x0800830f
 80082c0:	08008323 	.word	0x08008323
 80082c4:	080082e3 	.word	0x080082e3
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	08008323 	.word	0x08008323
 80082d0:	080082fb 	.word	0x080082fb
 80082d4:	080082ed 	.word	0x080082ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa3c 	bl	8008758 <USBD_GetDescriptor>
          break;
 80082e0:	e024      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fbcb 	bl	8008a80 <USBD_SetAddress>
          break;
 80082ea:	e01f      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fc0a 	bl	8008b08 <USBD_SetConfig>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
          break;
 80082f8:	e018      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fcad 	bl	8008c5c <USBD_GetConfig>
          break;
 8008302:	e013      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fcde 	bl	8008cc8 <USBD_GetStatus>
          break;
 800830c:	e00e      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd0d 	bl	8008d30 <USBD_SetFeature>
          break;
 8008316:	e009      	b.n	800832c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fd31 	bl	8008d82 <USBD_ClrFeature>
          break;
 8008320:	e004      	b.n	800832c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd88 	bl	8008e3a <USBD_CtlError>
          break;
 800832a:	bf00      	nop
      }
      break;
 800832c:	e004      	b.n	8008338 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fd82 	bl	8008e3a <USBD_CtlError>
      break;
 8008336:	bf00      	nop
  }

  return ret;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop

08008344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d005      	beq.n	800836a <USBD_StdItfReq+0x26>
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d852      	bhi.n	8008408 <USBD_StdItfReq+0xc4>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <USBD_StdItfReq+0x26>
 8008366:	2b20      	cmp	r3, #32
 8008368:	d14e      	bne.n	8008408 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008370:	b2db      	uxtb	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	2b02      	cmp	r3, #2
 8008376:	d840      	bhi.n	80083fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	889b      	ldrh	r3, [r3, #4]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	d836      	bhi.n	80083f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff fed9 	bl	8008142 <USBD_CoreFindIF>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2bff      	cmp	r3, #255	; 0xff
 8008398:	d01d      	beq.n	80083d6 <USBD_StdItfReq+0x92>
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11a      	bne.n	80083d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083a0:	7bba      	ldrb	r2, [r7, #14]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32ae      	adds	r2, #174	; 0xae
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00f      	beq.n	80083d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083b0:	7bba      	ldrb	r2, [r7, #14]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083b8:	7bba      	ldrb	r2, [r7, #14]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	; 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ce:	e004      	b.n	80083da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083d0:	2303      	movs	r3, #3
 80083d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083d4:	e001      	b.n	80083da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083d6:	2303      	movs	r3, #3
 80083d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	88db      	ldrh	r3, [r3, #6]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d110      	bne.n	8008404 <USBD_StdItfReq+0xc0>
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10d      	bne.n	8008404 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fdf1 	bl	8008fd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083ee:	e009      	b.n	8008404 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fd21 	bl	8008e3a <USBD_CtlError>
          break;
 80083f8:	e004      	b.n	8008404 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fd1c 	bl	8008e3a <USBD_CtlError>
          break;
 8008402:	e000      	b.n	8008406 <USBD_StdItfReq+0xc2>
          break;
 8008404:	bf00      	nop
      }
      break;
 8008406:	e004      	b.n	8008412 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fd15 	bl	8008e3a <USBD_CtlError>
      break;
 8008410:	bf00      	nop
  }

  return ret;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	889b      	ldrh	r3, [r3, #4]
 800842e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d007      	beq.n	800844c <USBD_StdEPReq+0x30>
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	f200 817f 	bhi.w	8008740 <USBD_StdEPReq+0x324>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d02a      	beq.n	800849c <USBD_StdEPReq+0x80>
 8008446:	2b20      	cmp	r3, #32
 8008448:	f040 817a 	bne.w	8008740 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff fe83 	bl	800815c <USBD_CoreFindEP>
 8008456:	4603      	mov	r3, r0
 8008458:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800845a:	7b7b      	ldrb	r3, [r7, #13]
 800845c:	2bff      	cmp	r3, #255	; 0xff
 800845e:	f000 8174 	beq.w	800874a <USBD_StdEPReq+0x32e>
 8008462:	7b7b      	ldrb	r3, [r7, #13]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8170 	bne.w	800874a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800846a:	7b7a      	ldrb	r2, [r7, #13]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008472:	7b7a      	ldrb	r2, [r7, #13]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	32ae      	adds	r2, #174	; 0xae
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8163 	beq.w	800874a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008484:	7b7a      	ldrb	r2, [r7, #13]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	32ae      	adds	r2, #174	; 0xae
 800848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800849a:	e156      	b.n	800874a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d008      	beq.n	80084b6 <USBD_StdEPReq+0x9a>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	f300 8145 	bgt.w	8008734 <USBD_StdEPReq+0x318>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 809b 	beq.w	80085e6 <USBD_StdEPReq+0x1ca>
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d03c      	beq.n	800852e <USBD_StdEPReq+0x112>
 80084b4:	e13e      	b.n	8008734 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d002      	beq.n	80084c8 <USBD_StdEPReq+0xac>
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d016      	beq.n	80084f4 <USBD_StdEPReq+0xd8>
 80084c6:	e02c      	b.n	8008522 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <USBD_StdEPReq+0xce>
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	2b80      	cmp	r3, #128	; 0x80
 80084d2:	d00a      	beq.n	80084ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f999 	bl	8009810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f995 	bl	8009810 <USBD_LL_StallEP>
 80084e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084e8:	e020      	b.n	800852c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fca4 	bl	8008e3a <USBD_CtlError>
              break;
 80084f2:	e01b      	b.n	800852c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	885b      	ldrh	r3, [r3, #2]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10e      	bne.n	800851a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <USBD_StdEPReq+0xfe>
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b80      	cmp	r3, #128	; 0x80
 8008506:	d008      	beq.n	800851a <USBD_StdEPReq+0xfe>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	88db      	ldrh	r3, [r3, #6]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 f97b 	bl	8009810 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fd58 	bl	8008fd0 <USBD_CtlSendStatus>

              break;
 8008520:	e004      	b.n	800852c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc88 	bl	8008e3a <USBD_CtlError>
              break;
 800852a:	bf00      	nop
          }
          break;
 800852c:	e107      	b.n	800873e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d002      	beq.n	8008540 <USBD_StdEPReq+0x124>
 800853a:	2b03      	cmp	r3, #3
 800853c:	d016      	beq.n	800856c <USBD_StdEPReq+0x150>
 800853e:	e04b      	b.n	80085d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <USBD_StdEPReq+0x146>
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b80      	cmp	r3, #128	; 0x80
 800854a:	d00a      	beq.n	8008562 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f95d 	bl	8009810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f959 	bl	8009810 <USBD_LL_StallEP>
 800855e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008560:	e040      	b.n	80085e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc68 	bl	8008e3a <USBD_CtlError>
              break;
 800856a:	e03b      	b.n	80085e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d136      	bne.n	80085e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 f963 	bl	800984e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fd21 	bl	8008fd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fde2 	bl	800815c <USBD_CoreFindEP>
 8008598:	4603      	mov	r3, r0
 800859a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800859c:	7b7b      	ldrb	r3, [r7, #13]
 800859e:	2bff      	cmp	r3, #255	; 0xff
 80085a0:	d01f      	beq.n	80085e2 <USBD_StdEPReq+0x1c6>
 80085a2:	7b7b      	ldrb	r3, [r7, #13]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11c      	bne.n	80085e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085a8:	7b7a      	ldrb	r2, [r7, #13]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085b0:	7b7a      	ldrb	r2, [r7, #13]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32ae      	adds	r2, #174	; 0xae
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d010      	beq.n	80085e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085c0:	7b7a      	ldrb	r2, [r7, #13]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32ae      	adds	r2, #174	; 0xae
 80085c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085d6:	e004      	b.n	80085e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fc2d 	bl	8008e3a <USBD_CtlError>
              break;
 80085e0:	e000      	b.n	80085e4 <USBD_StdEPReq+0x1c8>
              break;
 80085e2:	bf00      	nop
          }
          break;
 80085e4:	e0ab      	b.n	800873e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d002      	beq.n	80085f8 <USBD_StdEPReq+0x1dc>
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d032      	beq.n	800865c <USBD_StdEPReq+0x240>
 80085f6:	e097      	b.n	8008728 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <USBD_StdEPReq+0x1f2>
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	d004      	beq.n	800860e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc17 	bl	8008e3a <USBD_CtlError>
                break;
 800860c:	e091      	b.n	8008732 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	da0b      	bge.n	800862e <USBD_StdEPReq+0x212>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	3310      	adds	r3, #16
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	3304      	adds	r3, #4
 800862c:	e00b      	b.n	8008646 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	3304      	adds	r3, #4
 8008646:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2202      	movs	r2, #2
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc61 	bl	8008f1c <USBD_CtlSendData>
              break;
 800865a:	e06a      	b.n	8008732 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800865c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da11      	bge.n	8008688 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d117      	bne.n	80086ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fbda 	bl	8008e3a <USBD_CtlError>
                  break;
 8008686:	e054      	b.n	8008732 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fbc7 	bl	8008e3a <USBD_CtlError>
                  break;
 80086ac:	e041      	b.n	8008732 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da0b      	bge.n	80086ce <USBD_StdEPReq+0x2b2>
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	3310      	adds	r3, #16
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	3304      	adds	r3, #4
 80086cc:	e00b      	b.n	80086e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <USBD_StdEPReq+0x2d8>
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b80      	cmp	r3, #128	; 0x80
 80086f2:	d103      	bne.n	80086fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e00e      	b.n	800871a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 f8c3 	bl	800988c <USBD_LL_IsStallEP>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e002      	b.n	800871a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2202      	movs	r2, #2
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbfb 	bl	8008f1c <USBD_CtlSendData>
              break;
 8008726:	e004      	b.n	8008732 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fb85 	bl	8008e3a <USBD_CtlError>
              break;
 8008730:	bf00      	nop
          }
          break;
 8008732:	e004      	b.n	800873e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb7f 	bl	8008e3a <USBD_CtlError>
          break;
 800873c:	bf00      	nop
      }
      break;
 800873e:	e005      	b.n	800874c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fb79 	bl	8008e3a <USBD_CtlError>
      break;
 8008748:	e000      	b.n	800874c <USBD_StdEPReq+0x330>
      break;
 800874a:	bf00      	nop
  }

  return ret;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	0a1b      	lsrs	r3, r3, #8
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	2b0e      	cmp	r3, #14
 800877a:	f200 8152 	bhi.w	8008a22 <USBD_GetDescriptor+0x2ca>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <USBD_GetDescriptor+0x2c>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087f5 	.word	0x080087f5
 8008788:	0800880d 	.word	0x0800880d
 800878c:	0800884d 	.word	0x0800884d
 8008790:	08008a23 	.word	0x08008a23
 8008794:	08008a23 	.word	0x08008a23
 8008798:	080089c3 	.word	0x080089c3
 800879c:	080089ef 	.word	0x080089ef
 80087a0:	08008a23 	.word	0x08008a23
 80087a4:	08008a23 	.word	0x08008a23
 80087a8:	08008a23 	.word	0x08008a23
 80087ac:	08008a23 	.word	0x08008a23
 80087b0:	08008a23 	.word	0x08008a23
 80087b4:	08008a23 	.word	0x08008a23
 80087b8:	08008a23 	.word	0x08008a23
 80087bc:	080087c1 	.word	0x080087c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087e2:	e126      	b.n	8008a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fb27 	bl	8008e3a <USBD_CtlError>
        err++;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	3301      	adds	r3, #1
 80087f0:	72fb      	strb	r3, [r7, #11]
      break;
 80087f2:	e11e      	b.n	8008a32 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
      break;
 800880a:	e112      	b.n	8008a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7c1b      	ldrb	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10d      	bne.n	8008830 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	2202      	movs	r2, #2
 800882c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800882e:	e100      	b.n	8008a32 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f107 0208 	add.w	r2, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
      break;
 800884a:	e0f2      	b.n	8008a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b05      	cmp	r3, #5
 8008854:	f200 80ac 	bhi.w	80089b0 <USBD_GetDescriptor+0x258>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USBD_GetDescriptor+0x108>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008879 	.word	0x08008879
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088e1 	.word	0x080088e1
 800886c:	08008915 	.word	0x08008915
 8008870:	08008949 	.word	0x08008949
 8008874:	0800897d 	.word	0x0800897d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889a:	e091      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 facb 	bl	8008e3a <USBD_CtlError>
            err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
          break;
 80088aa:	e089      	b.n	80089c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ce:	e077      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fab1 	bl	8008e3a <USBD_CtlError>
            err++;
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	3301      	adds	r3, #1
 80088dc:	72fb      	strb	r3, [r7, #11]
          break;
 80088de:	e06f      	b.n	80089c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	f107 0108 	add.w	r1, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008902:	e05d      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa97 	bl	8008e3a <USBD_CtlError>
            err++;
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	3301      	adds	r3, #1
 8008910:	72fb      	strb	r3, [r7, #11]
          break;
 8008912:	e055      	b.n	80089c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008936:	e043      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa7d 	bl	8008e3a <USBD_CtlError>
            err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
          break;
 8008946:	e03b      	b.n	80089c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896a:	e029      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa63 	bl	8008e3a <USBD_CtlError>
            err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
          break;
 800897a:	e021      	b.n	80089c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e00f      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa49 	bl	8008e3a <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e007      	b.n	80089c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa41 	bl	8008e3a <USBD_CtlError>
          err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089be:	bf00      	nop
      }
      break;
 80089c0:	e037      	b.n	8008a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7c1b      	ldrb	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f107 0208 	add.w	r2, r7, #8
 80089d6:	4610      	mov	r0, r2
 80089d8:	4798      	blx	r3
 80089da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089dc:	e029      	b.n	8008a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa2a 	bl	8008e3a <USBD_CtlError>
        err++;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	3301      	adds	r3, #1
 80089ea:	72fb      	strb	r3, [r7, #11]
      break;
 80089ec:	e021      	b.n	8008a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7c1b      	ldrb	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10d      	bne.n	8008a12 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f107 0208 	add.w	r2, r7, #8
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
 8008a06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	2207      	movs	r2, #7
 8008a0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a10:	e00f      	b.n	8008a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fa10 	bl	8008e3a <USBD_CtlError>
        err++;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a20:	e007      	b.n	8008a32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fa08 	bl	8008e3a <USBD_CtlError>
      err++;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a30:	bf00      	nop
  }

  if (err != 0U)
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11e      	bne.n	8008a76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	88db      	ldrh	r3, [r3, #6]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a40:	893b      	ldrh	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00e      	beq.n	8008a64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88da      	ldrh	r2, [r3, #6]
 8008a4a:	893b      	ldrh	r3, [r7, #8]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bf28      	it	cs
 8008a50:	4613      	movcs	r3, r2
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a56:	893b      	ldrh	r3, [r7, #8]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa5d 	bl	8008f1c <USBD_CtlSendData>
 8008a62:	e009      	b.n	8008a78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f9e7 	bl	8008e3a <USBD_CtlError>
 8008a6c:	e004      	b.n	8008a78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 faae 	bl	8008fd0 <USBD_CtlSendStatus>
 8008a74:	e000      	b.n	8008a78 <USBD_GetDescriptor+0x320>
    return;
 8008a76:	bf00      	nop
  }
}
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop

08008a80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	889b      	ldrh	r3, [r3, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d131      	bne.n	8008af6 <USBD_SetAddress+0x76>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	88db      	ldrh	r3, [r3, #6]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d12d      	bne.n	8008af6 <USBD_SetAddress+0x76>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa0:	d829      	bhi.n	8008af6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d104      	bne.n	8008ac4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f9bc 	bl	8008e3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	e01d      	b.n	8008b00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7bfa      	ldrb	r2, [r7, #15]
 8008ac8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 ff07 	bl	80098e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa7a 	bl	8008fd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	e009      	b.n	8008b00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	e004      	b.n	8008b00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f99e 	bl	8008e3a <USBD_CtlError>
  }
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	885b      	ldrh	r3, [r3, #2]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b4e      	ldr	r3, [pc, #312]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b20:	4b4d      	ldr	r3, [pc, #308]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d905      	bls.n	8008b34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f985 	bl	8008e3a <USBD_CtlError>
    return USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e08c      	b.n	8008c4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d002      	beq.n	8008b46 <USBD_SetConfig+0x3e>
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d029      	beq.n	8008b98 <USBD_SetConfig+0x90>
 8008b44:	e075      	b.n	8008c32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b46:	4b44      	ldr	r3, [pc, #272]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d020      	beq.n	8008b90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b4e:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b58:	4b3f      	ldr	r3, [pc, #252]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fe ffbd 	bl	8007ade <USBD_SetClassConfig>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f962 	bl	8008e3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b7e:	e065      	b.n	8008c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa25 	bl	8008fd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b8e:	e05d      	b.n	8008c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa1d 	bl	8008fd0 <USBD_CtlSendStatus>
      break;
 8008b96:	e059      	b.n	8008c4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b98:	4b2f      	ldr	r3, [pc, #188]	; (8008c58 <USBD_SetConfig+0x150>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d112      	bne.n	8008bc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <USBD_SetConfig+0x150>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bb2:	4b29      	ldr	r3, [pc, #164]	; (8008c58 <USBD_SetConfig+0x150>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7fe ffac 	bl	8007b16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa06 	bl	8008fd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bc4:	e042      	b.n	8008c4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bc6:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <USBD_SetConfig+0x150>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d02a      	beq.n	8008c2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe ff9a 	bl	8007b16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008be2:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <USBD_SetConfig+0x150>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <USBD_SetConfig+0x150>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fe ff73 	bl	8007ade <USBD_SetClassConfig>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00f      	beq.n	8008c22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f918 	bl	8008e3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe ff7f 	bl	8007b16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c20:	e014      	b.n	8008c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9d4 	bl	8008fd0 <USBD_CtlSendStatus>
      break;
 8008c28:	e010      	b.n	8008c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f9d0 	bl	8008fd0 <USBD_CtlSendStatus>
      break;
 8008c30:	e00c      	b.n	8008c4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f900 	bl	8008e3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c3a:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <USBD_SetConfig+0x150>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fe ff68 	bl	8007b16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4a:	bf00      	nop
  }

  return ret;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200003a0 	.word	0x200003a0

08008c5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d004      	beq.n	8008c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8e2 	bl	8008e3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c76:	e023      	b.n	8008cc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	dc02      	bgt.n	8008c8a <USBD_GetConfig+0x2e>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dc03      	bgt.n	8008c90 <USBD_GetConfig+0x34>
 8008c88:	e015      	b.n	8008cb6 <USBD_GetConfig+0x5a>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d00b      	beq.n	8008ca6 <USBD_GetConfig+0x4a>
 8008c8e:	e012      	b.n	8008cb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f93c 	bl	8008f1c <USBD_CtlSendData>
        break;
 8008ca4:	e00c      	b.n	8008cc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2201      	movs	r2, #1
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f934 	bl	8008f1c <USBD_CtlSendData>
        break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f8be 	bl	8008e3a <USBD_CtlError>
        break;
 8008cbe:	bf00      	nop
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d81e      	bhi.n	8008d1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	88db      	ldrh	r3, [r3, #6]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d004      	beq.n	8008cf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8a5 	bl	8008e3a <USBD_CtlError>
        break;
 8008cf0:	e01a      	b.n	8008d28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f043 0202 	orr.w	r2, r3, #2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	330c      	adds	r3, #12
 8008d12:	2202      	movs	r2, #2
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f900 	bl	8008f1c <USBD_CtlSendData>
      break;
 8008d1c:	e004      	b.n	8008d28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f88a 	bl	8008e3a <USBD_CtlError>
      break;
 8008d26:	bf00      	nop
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	885b      	ldrh	r3, [r3, #2]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d107      	bne.n	8008d52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f940 	bl	8008fd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d50:	e013      	b.n	8008d7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	885b      	ldrh	r3, [r3, #2]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d10b      	bne.n	8008d72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	889b      	ldrh	r3, [r3, #4]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f930 	bl	8008fd0 <USBD_CtlSendStatus>
}
 8008d70:	e003      	b.n	8008d7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f860 	bl	8008e3a <USBD_CtlError>
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d80b      	bhi.n	8008db2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d10c      	bne.n	8008dbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f910 	bl	8008fd0 <USBD_CtlSendStatus>
      }
      break;
 8008db0:	e004      	b.n	8008dbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f840 	bl	8008e3a <USBD_CtlError>
      break;
 8008dba:	e000      	b.n	8008dbe <USBD_ClrFeature+0x3c>
      break;
 8008dbc:	bf00      	nop
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fa17 	bl	8008224 <SWAPBYTE>
 8008df6:	4603      	mov	r3, r0
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff fa0a 	bl	8008224 <SWAPBYTE>
 8008e10:	4603      	mov	r3, r0
 8008e12:	461a      	mov	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff f9fd 	bl	8008224 <SWAPBYTE>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	80da      	strh	r2, [r3, #6]
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e44:	2180      	movs	r1, #128	; 0x80
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fce2 	bl	8009810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fcde 	bl	8009810 <USBD_LL_StallEP>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d036      	beq.n	8008ee0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e76:	6938      	ldr	r0, [r7, #16]
 8008e78:	f000 f836 	bl	8008ee8 <USBD_GetLen>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	3301      	adds	r3, #1
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	4413      	add	r3, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eac:	e013      	b.n	8008ed6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
    idx++;
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4413      	add	r3, r2
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e7      	bne.n	8008eae <USBD_GetString+0x52>
 8008ede:	e000      	b.n	8008ee2 <USBD_GetString+0x86>
    return;
 8008ee0:	bf00      	nop
  }
}
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ef8:	e005      	b.n	8008f06 <USBD_GetLen+0x1e>
  {
    len++;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	3301      	adds	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f5      	bne.n	8008efa <USBD_GetLen+0x12>
  }

  return len;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fced 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	2100      	movs	r1, #0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fcdc 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2203      	movs	r2, #3
 8008f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fce0 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fccf 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fc9b 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2205      	movs	r2, #5
 8009002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009006:	2300      	movs	r3, #0
 8009008:	2200      	movs	r2, #0
 800900a:	2100      	movs	r1, #0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fca9 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009020:	2200      	movs	r2, #0
 8009022:	4912      	ldr	r1, [pc, #72]	; (800906c <MX_USB_DEVICE_Init+0x50>)
 8009024:	4812      	ldr	r0, [pc, #72]	; (8009070 <MX_USB_DEVICE_Init+0x54>)
 8009026:	f7fe fcdd 	bl	80079e4 <USBD_Init>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009030:	f7f7 fece 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009034:	490f      	ldr	r1, [pc, #60]	; (8009074 <MX_USB_DEVICE_Init+0x58>)
 8009036:	480e      	ldr	r0, [pc, #56]	; (8009070 <MX_USB_DEVICE_Init+0x54>)
 8009038:	f7fe fd04 	bl	8007a44 <USBD_RegisterClass>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009042:	f7f7 fec5 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009046:	490c      	ldr	r1, [pc, #48]	; (8009078 <MX_USB_DEVICE_Init+0x5c>)
 8009048:	4809      	ldr	r0, [pc, #36]	; (8009070 <MX_USB_DEVICE_Init+0x54>)
 800904a:	f7fe fc3b 	bl	80078c4 <USBD_CDC_RegisterInterface>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009054:	f7f7 febc 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009058:	4805      	ldr	r0, [pc, #20]	; (8009070 <MX_USB_DEVICE_Init+0x54>)
 800905a:	f7fe fd29 	bl	8007ab0 <USBD_Start>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009064:	f7f7 feb4 	bl	8000dd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009068:	bf00      	nop
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200000b0 	.word	0x200000b0
 8009070:	200003a4 	.word	0x200003a4
 8009074:	2000001c 	.word	0x2000001c
 8009078:	2000009c 	.word	0x2000009c

0800907c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009080:	2200      	movs	r2, #0
 8009082:	4905      	ldr	r1, [pc, #20]	; (8009098 <CDC_Init_FS+0x1c>)
 8009084:	4805      	ldr	r0, [pc, #20]	; (800909c <CDC_Init_FS+0x20>)
 8009086:	f7fe fc37 	bl	80078f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800908a:	4905      	ldr	r1, [pc, #20]	; (80090a0 <CDC_Init_FS+0x24>)
 800908c:	4803      	ldr	r0, [pc, #12]	; (800909c <CDC_Init_FS+0x20>)
 800908e:	f7fe fc55 	bl	800793c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009092:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009094:	4618      	mov	r0, r3
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000e80 	.word	0x20000e80
 800909c:	200003a4 	.word	0x200003a4
 80090a0:	20000680 	.word	0x20000680

080090a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b23      	cmp	r3, #35	; 0x23
 80090c8:	d84a      	bhi.n	8009160 <CDC_Control_FS+0xac>
 80090ca:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <CDC_Control_FS+0x1c>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	08009161 	.word	0x08009161
 80090d4:	08009161 	.word	0x08009161
 80090d8:	08009161 	.word	0x08009161
 80090dc:	08009161 	.word	0x08009161
 80090e0:	08009161 	.word	0x08009161
 80090e4:	08009161 	.word	0x08009161
 80090e8:	08009161 	.word	0x08009161
 80090ec:	08009161 	.word	0x08009161
 80090f0:	08009161 	.word	0x08009161
 80090f4:	08009161 	.word	0x08009161
 80090f8:	08009161 	.word	0x08009161
 80090fc:	08009161 	.word	0x08009161
 8009100:	08009161 	.word	0x08009161
 8009104:	08009161 	.word	0x08009161
 8009108:	08009161 	.word	0x08009161
 800910c:	08009161 	.word	0x08009161
 8009110:	08009161 	.word	0x08009161
 8009114:	08009161 	.word	0x08009161
 8009118:	08009161 	.word	0x08009161
 800911c:	08009161 	.word	0x08009161
 8009120:	08009161 	.word	0x08009161
 8009124:	08009161 	.word	0x08009161
 8009128:	08009161 	.word	0x08009161
 800912c:	08009161 	.word	0x08009161
 8009130:	08009161 	.word	0x08009161
 8009134:	08009161 	.word	0x08009161
 8009138:	08009161 	.word	0x08009161
 800913c:	08009161 	.word	0x08009161
 8009140:	08009161 	.word	0x08009161
 8009144:	08009161 	.word	0x08009161
 8009148:	08009161 	.word	0x08009161
 800914c:	08009161 	.word	0x08009161
 8009150:	08009161 	.word	0x08009161
 8009154:	08009161 	.word	0x08009161
 8009158:	08009161 	.word	0x08009161
 800915c:	08009161 	.word	0x08009161
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009160:	bf00      	nop
  }

  return (USBD_OK);
 8009162:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4805      	ldr	r0, [pc, #20]	; (8009194 <CDC_Receive_FS+0x24>)
 800917e:	f7fe fbdd 	bl	800793c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009182:	4804      	ldr	r0, [pc, #16]	; (8009194 <CDC_Receive_FS+0x24>)
 8009184:	f7fe fbf8 	bl	8007978 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200003a4 	.word	0x200003a4

08009198 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2212      	movs	r2, #18
 80091cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200000d0 	.word	0x200000d0

080091e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2204      	movs	r2, #4
 80091f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200000f0 	.word	0x200000f0

08009204 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4907      	ldr	r1, [pc, #28]	; (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4808      	ldr	r0, [pc, #32]	; (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7ff fe1e 	bl	8008e5c <USBD_GetString>
 8009220:	e004      	b.n	800922c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4904      	ldr	r1, [pc, #16]	; (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 8009226:	4805      	ldr	r0, [pc, #20]	; (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 8009228:	f7ff fe18 	bl	8008e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20001680 	.word	0x20001680
 800923c:	08009b60 	.word	0x08009b60

08009240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4904      	ldr	r1, [pc, #16]	; (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009250:	4804      	ldr	r0, [pc, #16]	; (8009264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009252:	f7ff fe03 	bl	8008e5c <USBD_GetString>
  return USBD_StrDesc;
 8009256:	4b02      	ldr	r3, [pc, #8]	; (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20001680 	.word	0x20001680
 8009264:	08009b78 	.word	0x08009b78

08009268 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	221a      	movs	r2, #26
 8009278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800927a:	f000 f855 	bl	8009328 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800927e:	4b02      	ldr	r3, [pc, #8]	; (8009288 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200000f4 	.word	0x200000f4

0800928c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4907      	ldr	r1, [pc, #28]	; (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092a2:	4808      	ldr	r0, [pc, #32]	; (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a4:	f7ff fdda 	bl	8008e5c <USBD_GetString>
 80092a8:	e004      	b.n	80092b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4904      	ldr	r1, [pc, #16]	; (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ae:	4805      	ldr	r0, [pc, #20]	; (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092b0:	f7ff fdd4 	bl	8008e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20001680 	.word	0x20001680
 80092c4:	08009b8c 	.word	0x08009b8c

080092c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4907      	ldr	r1, [pc, #28]	; (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092de:	4808      	ldr	r0, [pc, #32]	; (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e0:	f7ff fdbc 	bl	8008e5c <USBD_GetString>
 80092e4:	e004      	b.n	80092f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4904      	ldr	r1, [pc, #16]	; (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ea:	4805      	ldr	r0, [pc, #20]	; (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ec:	f7ff fdb6 	bl	8008e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f0:	4b02      	ldr	r3, [pc, #8]	; (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20001680 	.word	0x20001680
 8009300:	08009b98 	.word	0x08009b98

08009304 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	220c      	movs	r2, #12
 8009314:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	200000e4 	.word	0x200000e4

08009328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <Get_SerialNum+0x44>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <Get_SerialNum+0x48>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <Get_SerialNum+0x4c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4413      	add	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800934e:	2208      	movs	r2, #8
 8009350:	4909      	ldr	r1, [pc, #36]	; (8009378 <Get_SerialNum+0x50>)
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f814 	bl	8009380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009358:	2204      	movs	r2, #4
 800935a:	4908      	ldr	r1, [pc, #32]	; (800937c <Get_SerialNum+0x54>)
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f000 f80f 	bl	8009380 <IntToUnicode>
  }
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	1fff7a10 	.word	0x1fff7a10
 8009370:	1fff7a14 	.word	0x1fff7a14
 8009374:	1fff7a18 	.word	0x1fff7a18
 8009378:	200000f6 	.word	0x200000f6
 800937c:	20000106 	.word	0x20000106

08009380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]
 8009396:	e027      	b.n	80093e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	2b09      	cmp	r3, #9
 800939e:	d80b      	bhi.n	80093b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0f1b      	lsrs	r3, r3, #28
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4619      	mov	r1, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	440b      	add	r3, r1
 80093b0:	3230      	adds	r2, #48	; 0x30
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e00a      	b.n	80093ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4619      	mov	r1, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	440b      	add	r3, r1
 80093c8:	3237      	adds	r2, #55	; 0x37
 80093ca:	b2d2      	uxtb	r2, r2
 80093cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	3301      	adds	r3, #1
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	3301      	adds	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
 80093e8:	7dfa      	ldrb	r2, [r7, #23]
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3d3      	bcc.n	8009398 <IntToUnicode+0x18>
  }
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
	...

08009400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b0a0      	sub	sp, #128	; 0x80
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009408:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	609a      	str	r2, [r3, #8]
 8009414:	60da      	str	r2, [r3, #12]
 8009416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	225c      	movs	r2, #92	; 0x5c
 800941e:	2100      	movs	r1, #0
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fb89 	bl	8009b38 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800942e:	d149      	bne.n	80094c4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009434:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009436:	2300      	movs	r3, #0
 8009438:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800943a:	f107 0310 	add.w	r3, r7, #16
 800943e:	4618      	mov	r0, r3
 8009440:	f7fa f95c 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800944a:	f7f7 fcc1 	bl	8000dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 8009458:	f043 0301 	orr.w	r3, r3, #1
 800945c:	6313      	str	r3, [r2, #48]	; 0x30
 800945e:	4b1b      	ldr	r3, [pc, #108]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800946a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800946e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009470:	2302      	movs	r3, #2
 8009472:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009474:	2300      	movs	r3, #0
 8009476:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009478:	2303      	movs	r3, #3
 800947a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800947c:	230a      	movs	r3, #10
 800947e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009480:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009484:	4619      	mov	r1, r3
 8009486:	4812      	ldr	r0, [pc, #72]	; (80094d0 <HAL_PCD_MspInit+0xd0>)
 8009488:	f7f8 fba8 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800948c:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 800948e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009490:	4a0e      	ldr	r2, [pc, #56]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 8009492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009496:	6353      	str	r3, [r2, #52]	; 0x34
 8009498:	2300      	movs	r3, #0
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 80094a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094a6:	6453      	str	r3, [r2, #68]	; 0x44
 80094a8:	4b08      	ldr	r3, [pc, #32]	; (80094cc <HAL_PCD_MspInit+0xcc>)
 80094aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	2043      	movs	r0, #67	; 0x43
 80094ba:	f7f8 fb36 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094be:	2043      	movs	r0, #67	; 0x43
 80094c0:	f7f8 fb4f 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094c4:	bf00      	nop
 80094c6:	3780      	adds	r7, #128	; 0x80
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40020000 	.word	0x40020000

080094d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7fe fb2d 	bl	8007b4a <USBD_LL_SetupStage>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	440b      	add	r3, r1
 8009518:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	4619      	mov	r1, r3
 8009522:	f7fe fb67 	bl	8007bf4 <USBD_LL_DataOutStage>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4613      	mov	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	334c      	adds	r3, #76	; 0x4c
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	4619      	mov	r1, r3
 8009556:	f7fe fc00 	bl	8007d5a <USBD_LL_DataInStage>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe fd34 	bl	8007fde <USBD_LL_SOF>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009586:	2301      	movs	r3, #1
 8009588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
 8009596:	e008      	b.n	80095aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d102      	bne.n	80095a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095a0:	2301      	movs	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e001      	b.n	80095aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095a6:	f7f7 fc13 	bl	8000dd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b0:	7bfa      	ldrb	r2, [r7, #15]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fcd4 	bl	8007f62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fc7c 	bl	8007ebe <USBD_LL_Reset>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fccf 	bl	8007f82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d005      	beq.n	8009610 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <HAL_PCD_SuspendCallback+0x48>)
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	4a03      	ldr	r2, [pc, #12]	; (8009618 <HAL_PCD_SuspendCallback+0x48>)
 800960a:	f043 0306 	orr.w	r3, r3, #6
 800960e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fcbf 	bl	8007fae <USBD_LL_Resume>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fd17 	bl	8008082 <USBD_LL_IsoOUTIncomplete>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fcd3 	bl	800801e <USBD_LL_IsoINIncomplete>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fd29 	bl	80080e6 <USBD_LL_DevConnected>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fd26 	bl	80080fc <USBD_LL_DevDisconnected>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d13c      	bne.n	8009742 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096c8:	4a20      	ldr	r2, [pc, #128]	; (800974c <USBD_LL_Init+0x94>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <USBD_LL_Init+0x94>)
 80096d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096d8:	4b1c      	ldr	r3, [pc, #112]	; (800974c <USBD_LL_Init+0x94>)
 80096da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <USBD_LL_Init+0x94>)
 80096e2:	2206      	movs	r2, #6
 80096e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096e6:	4b19      	ldr	r3, [pc, #100]	; (800974c <USBD_LL_Init+0x94>)
 80096e8:	2202      	movs	r2, #2
 80096ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <USBD_LL_Init+0x94>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <USBD_LL_Init+0x94>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <USBD_LL_Init+0x94>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <USBD_LL_Init+0x94>)
 8009700:	2200      	movs	r2, #0
 8009702:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <USBD_LL_Init+0x94>)
 8009706:	2200      	movs	r2, #0
 8009708:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <USBD_LL_Init+0x94>)
 800970c:	2200      	movs	r2, #0
 800970e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <USBD_LL_Init+0x94>)
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009716:	480d      	ldr	r0, [pc, #52]	; (800974c <USBD_LL_Init+0x94>)
 8009718:	f7f8 fc0d 	bl	8001f36 <HAL_PCD_Init>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009722:	f7f7 fb55 	bl	8000dd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009726:	2180      	movs	r1, #128	; 0x80
 8009728:	4808      	ldr	r0, [pc, #32]	; (800974c <USBD_LL_Init+0x94>)
 800972a:	f7f9 fe98 	bl	800345e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800972e:	2240      	movs	r2, #64	; 0x40
 8009730:	2100      	movs	r1, #0
 8009732:	4806      	ldr	r0, [pc, #24]	; (800974c <USBD_LL_Init+0x94>)
 8009734:	f7f9 fe4c 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009738:	2280      	movs	r2, #128	; 0x80
 800973a:	2101      	movs	r1, #1
 800973c:	4803      	ldr	r0, [pc, #12]	; (800974c <USBD_LL_Init+0x94>)
 800973e:	f7f9 fe47 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20001880 	.word	0x20001880

08009750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009766:	4618      	mov	r0, r3
 8009768:	f7f8 fd09 	bl	800217e <HAL_PCD_Start>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f990 	bl	8009a98 <USBD_Get_USB_Status>
 8009778:	4603      	mov	r3, r0
 800977a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977c:	7bbb      	ldrb	r3, [r7, #14]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	461a      	mov	r2, r3
 8009794:	4603      	mov	r3, r0
 8009796:	70fb      	strb	r3, [r7, #3]
 8009798:	460b      	mov	r3, r1
 800979a:	70bb      	strb	r3, [r7, #2]
 800979c:	4613      	mov	r3, r2
 800979e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097ae:	78bb      	ldrb	r3, [r7, #2]
 80097b0:	883a      	ldrh	r2, [r7, #0]
 80097b2:	78f9      	ldrb	r1, [r7, #3]
 80097b4:	f7f9 fa07 	bl	8002bc6 <HAL_PCD_EP_Open>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f96a 	bl	8009a98 <USBD_Get_USB_Status>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ec:	78fa      	ldrb	r2, [r7, #3]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f9 fa50 	bl	8002c96 <HAL_PCD_EP_Close>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f94b 	bl	8009a98 <USBD_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f7f9 fb28 	bl	8002e84 <HAL_PCD_EP_SetStall>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f92c 	bl	8009a98 <USBD_Get_USB_Status>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009844:	7bbb      	ldrb	r3, [r7, #14]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7f9 fb6d 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f90d 	bl	8009a98 <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800989e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da0b      	bge.n	80098c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	333e      	adds	r3, #62	; 0x3e
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	e00b      	b.n	80098d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7f9 f93a 	bl	8002b7c <HAL_PCD_SetAddress>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f8c2 	bl	8009a98 <USBD_Get_USB_Status>
 8009914:	4603      	mov	r3, r0
 8009916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009918:	7bbb      	ldrb	r3, [r7, #14]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
 800992e:	460b      	mov	r3, r1
 8009930:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009940:	7af9      	ldrb	r1, [r7, #11]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	f7f9 fa53 	bl	8002df0 <HAL_PCD_EP_Transmit>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f8a1 	bl	8009a98 <USBD_Get_USB_Status>
 8009956:	4603      	mov	r3, r0
 8009958:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800995a:	7dbb      	ldrb	r3, [r7, #22]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	460b      	mov	r3, r1
 8009972:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009982:	7af9      	ldrb	r1, [r7, #11]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	f7f9 f9cf 	bl	8002d2a <HAL_PCD_EP_Receive>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f880 	bl	8009a98 <USBD_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800999c:	7dbb      	ldrb	r3, [r7, #22]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099b8:	78fa      	ldrb	r2, [r7, #3]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f9 f9ff 	bl	8002dc0 <HAL_PCD_EP_GetRxCount>
 80099c2:	4603      	mov	r3, r0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_PCDEx_LPM_Callback+0x18>
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d01f      	beq.n	8009a22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80099e2:	e03b      	b.n	8009a5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80099ec:	f7f7 f984 	bl	8000cf8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f0:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <HAL_PCDEx_LPM_Callback+0x98>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	4a1b      	ldr	r2, [pc, #108]	; (8009a64 <HAL_PCDEx_LPM_Callback+0x98>)
 80099f6:	f023 0306 	bic.w	r3, r3, #6
 80099fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a0e:	f023 0301 	bic.w	r3, r3, #1
 8009a12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fac7 	bl	8007fae <USBD_LL_Resume>
    break;
 8009a20:	e01c      	b.n	8009a5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fa9e 	bl	8007f82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a54:	f043 0306 	orr.w	r3, r3, #6
 8009a58:	6113      	str	r3, [r2, #16]
    break;
 8009a5a:	bf00      	nop
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	e000ed00 	.word	0xe000ed00

08009a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <USBD_static_malloc+0x18>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	20001d8c 	.word	0x20001d8c

08009a84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]

}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d817      	bhi.n	8009adc <USBD_Get_USB_Status+0x44>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBD_Get_USB_Status+0x1c>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009acb 	.word	0x08009acb
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ad7 	.word	0x08009ad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac8:	e00b      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ace:	e008      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad4:	e005      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8009ada:	e002      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae0:	bf00      	nop
  }
  return usb_status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f000 f820 	bl	8009b48 <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	08009bc8 	.word	0x08009bc8
 8009b2c:	08009bc8 	.word	0x08009bc8
 8009b30:	08009bc8 	.word	0x08009bc8
 8009b34:	08009bcc 	.word	0x08009bcc

08009b38 <memset>:
 8009b38:	4402      	add	r2, r0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d100      	bne.n	8009b42 <memset+0xa>
 8009b40:	4770      	bx	lr
 8009b42:	f803 1b01 	strb.w	r1, [r3], #1
 8009b46:	e7f9      	b.n	8009b3c <memset+0x4>

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
