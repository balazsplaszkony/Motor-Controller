
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a274  0800a274  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a274  0800a274  0001a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a27c  0800a27c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  20000074  0800a2f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800a2f8  00020988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdf2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004407  00000000  00000000  0003ce96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014892  00000000  00000000  00043f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000069ac  00000000  00000000  0005881a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0005f1c6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000692c  00000000  00000000  0005f218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0a8 	.word	0x0800a0a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800a0a8 	.word	0x0800a0a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <PIDInit>:
 *      Author: plasz
 */
#include "PID.h"
volatile PidController PID;

void PIDInit(){
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

	PID.Kd = 0.1;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <PIDInit+0x48>)
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <PIDInit+0x4c>)
 8000f18:	609a      	str	r2, [r3, #8]
	PID.Ki = 2.5;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <PIDInit+0x48>)
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <PIDInit+0x50>)
 8000f1e:	605a      	str	r2, [r3, #4]
	PID.Kp = 2.5;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <PIDInit+0x48>)
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <PIDInit+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
	PID.integral = 0.0;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <PIDInit+0x48>)
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
	PID.last_error = 0;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <PIDInit+0x48>)
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
	PID.output = 0;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <PIDInit+0x48>)
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
	PID.setpoint = 0;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <PIDInit+0x48>)
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
	PID.updated = false;
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <PIDInit+0x48>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090
 8000f5c:	3dcccccd 	.word	0x3dcccccd
 8000f60:	40200000 	.word	0x40200000

08000f64 <PIDContollerUpdate>:

void PIDContollerUpdate(float measurement){
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	ed87 0a01 	vstr	s0, [r7, #4]



	float error = PID.setpoint - measurement;
 8000f6e:	4b70      	ldr	r3, [pc, #448]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = PID.Kp * error;
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	edc7 7a04 	vstr	s15, [r7, #16]

    PID.integral += PID.Ki * error;
 8000f92:	4b67      	ldr	r3, [pc, #412]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa0:	4b63      	ldr	r3, [pc, #396]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	4b61      	ldr	r3, [pc, #388]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fac:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = PID.Kd * (error - PID.last_error);
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fb8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fbc:	edd7 6a05 	vldr	s13, [r7, #20]
 8000fc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc8:	edc7 7a03 	vstr	s15, [r7, #12]

    if(PID.setpoint >= 0)
 8000fcc:	4b58      	ldr	r3, [pc, #352]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fce:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	db4b      	blt.n	8001074 <PIDContollerUpdate+0x110>
    {
        // Limit the integral term to prevent windup
        if (PID.integral > MAX_PID_OUTPUT) {
 8000fdc:	4b54      	ldr	r3, [pc, #336]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000fde:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fe2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001134 <PIDContollerUpdate+0x1d0>
 8000fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	dd03      	ble.n	8000ff8 <PIDContollerUpdate+0x94>
        		PID.integral = MAX_PID_OUTPUT;
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000ff2:	4a51      	ldr	r2, [pc, #324]	; (8001138 <PIDContollerUpdate+0x1d4>)
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	e00b      	b.n	8001010 <PIDContollerUpdate+0xac>
            }
        else if (PID.integral < MIN_PID_OUTPUT) {
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8000ffa:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	d503      	bpl.n	8001010 <PIDContollerUpdate+0xac>
        		PID.integral = MIN_PID_OUTPUT;
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
            }
        PID.output = proportional + PID.integral + derivative;
 8001010:	4b47      	ldr	r3, [pc, #284]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001012:	ed93 7a04 	vldr	s14, [r3, #16]
 8001016:	edd7 7a04 	vldr	s15, [r7, #16]
 800101a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800101e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	4b42      	ldr	r3, [pc, #264]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001028:	edc3 7a06 	vstr	s15, [r3, #24]

        // Limit the output to within the allowable range
        if (PID.output > MAX_PID_OUTPUT) {
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800102e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001032:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001134 <PIDContollerUpdate+0x1d0>
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	dd03      	ble.n	8001048 <PIDContollerUpdate+0xe4>
        	PID.output = MAX_PID_OUTPUT;
 8001040:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001042:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <PIDContollerUpdate+0x1d4>)
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	e00b      	b.n	8001060 <PIDContollerUpdate+0xfc>
          }
        else if (PID.output < MIN_PID_OUTPUT) {
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800104a:	edd3 7a06 	vldr	s15, [r3, #24]
 800104e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	d503      	bpl.n	8001060 <PIDContollerUpdate+0xfc>
        	PID.output = MIN_PID_OUTPUT;
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
          }
        PID.output += PID_OUTPUT_OFFSET;
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001062:	edd3 7a06 	vldr	s15, [r3, #24]
 8001066:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001134 <PIDContollerUpdate+0x1d0>
 800106a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001070:	edc3 7a06 	vstr	s15, [r3, #24]

    }

    if(PID.setpoint < -0)
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001076:	edd3 7a03 	vldr	s15, [r3, #12]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d54b      	bpl.n	800111c <PIDContollerUpdate+0x1b8>
        {
            // Limit the integral term to prevent windup
            if (PID.integral > MIN_PID_OUTPUT) {
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001086:	edd3 7a04 	vldr	s15, [r3, #16]
 800108a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd04      	ble.n	800109e <PIDContollerUpdate+0x13a>
            		PID.integral = MIN_PID_OUTPUT;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	e00c      	b.n	80010b8 <PIDContollerUpdate+0x154>
                }
            else if (PID.integral < MAX_PID_OUTPUT_NEGATIVE) {
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800113c <PIDContollerUpdate+0x1d8>
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d502      	bpl.n	80010b8 <PIDContollerUpdate+0x154>
            		PID.integral = MAX_PID_OUTPUT_NEGATIVE;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <PIDContollerUpdate+0x1dc>)
 80010b6:	611a      	str	r2, [r3, #16]
                }
            PID.output = proportional + PID.integral + derivative;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80010be:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010d0:	edc3 7a06 	vstr	s15, [r3, #24]

            // Limit the output to within the allowable range
            if (PID.output > MIN_PID_OUTPUT) {
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80010da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd04      	ble.n	80010ee <PIDContollerUpdate+0x18a>
            	PID.output = MIN_PID_OUTPUT;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	e00c      	b.n	8001108 <PIDContollerUpdate+0x1a4>
              }
            else if (PID.output < MAX_PID_OUTPUT_NEGATIVE) {
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <PIDContollerUpdate+0x1cc>)
 80010f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800113c <PIDContollerUpdate+0x1d8>
 80010f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d502      	bpl.n	8001108 <PIDContollerUpdate+0x1a4>
            	PID.output = MAX_PID_OUTPUT_NEGATIVE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <PIDContollerUpdate+0x1dc>)
 8001106:	619a      	str	r2, [r3, #24]
              }
            PID.output = PID_OUTPUT_OFFSET + PID.output;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800110a:	edd3 7a06 	vldr	s15, [r3, #24]
 800110e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001134 <PIDContollerUpdate+0x1d0>
 8001112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <PIDContollerUpdate+0x1cc>)
 8001118:	edc3 7a06 	vstr	s15, [r3, #24]
        }

    PID.last_error = error;
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <PIDContollerUpdate+0x1cc>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	6153      	str	r3, [r2, #20]

}
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000090 	.word	0x20000090
 8001134:	43fa0000 	.word	0x43fa0000
 8001138:	43fa0000 	.word	0x43fa0000
 800113c:	c3fa0000 	.word	0xc3fa0000
 8001140:	c3fa0000 	.word	0xc3fa0000

08001144 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_ADC1_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a6:	f001 fac1 	bl	800272c <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fd66 	bl	8001c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0x98>)
 80011c6:	f001 faf5 	bl	80027b4 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fd56 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_ADC_MspInit+0x7c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d127      	bne.n	800125a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_ADC_MspInit+0x80>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_ADC_MspInit+0x80>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_MspInit+0x80>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_ADC_MspInit+0x80>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_ADC_MspInit+0x80>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_ADC_MspInit+0x80>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001242:	2302      	movs	r3, #2
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_ADC_MspInit+0x84>)
 8001256:	f001 fe0f 	bl	8002e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012000 	.word	0x40012000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <CharacteristicInit>:

Characteristic characteristic;
Characteristic characteristic_new;

void CharacteristicInit()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	characteristic.maximum_RPM = 0;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <CharacteristicInit+0x70>)
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
	characteristic.baseRPM = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <CharacteristicInit+0x70>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	characteristic.rise_time = 0;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <CharacteristicInit+0x70>)
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	characteristic.fall_time = 0;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <CharacteristicInit+0x70>)
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
	characteristic.hold_time = 0;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <CharacteristicInit+0x70>)
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
	characteristic.total_time = GetTotalTime(&characteristic);
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <CharacteristicInit+0x70>)
 800129e:	f000 f880 	bl	80013a2 <GetTotalTime>
 80012a2:	eef0 7a40 	vmov.f32	s15, s0
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <CharacteristicInit+0x70>)
 80012a8:	edc3 7a05 	vstr	s15, [r3, #20]
	characteristic.delta_rising = GetDeltaRising(&characteristic);
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <CharacteristicInit+0x70>)
 80012ae:	f000 f890 	bl	80013d2 <GetDeltaRising>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <CharacteristicInit+0x70>)
 80012b8:	edc3 7a06 	vstr	s15, [r3, #24]
	characteristic.delta_falling = GetDeltaFalling(&characteristic);
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <CharacteristicInit+0x70>)
 80012be:	f000 f8a2 	bl	8001406 <GetDeltaFalling>
 80012c2:	eef0 7a40 	vmov.f32	s15, s0
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <CharacteristicInit+0x70>)
 80012c8:	edc3 7a07 	vstr	s15, [r3, #28]
	characteristic.updated = false;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <CharacteristicInit+0x70>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
	characteristic.startable = false;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <CharacteristicInit+0x70>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000f8 	.word	0x200000f8

080012e4 <SetCharacteristic>:

void SetCharacteristic(Characteristic* characteristic ,uint32_t max, uint32_t base, uint32_t rise, uint32_t fall, uint32_t hold)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
	characteristic->maximum_RPM = max;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	edc3 7a00 	vstr	s15, [r3]
	characteristic->baseRPM = base;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edc3 7a01 	vstr	s15, [r3, #4]

	characteristic->rise_time = rise;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	edc3 7a02 	vstr	s15, [r3, #8]
	characteristic->fall_time = fall;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edc3 7a03 	vstr	s15, [r3, #12]
	characteristic->hold_time = hold;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edc3 7a04 	vstr	s15, [r3, #16]

	characteristic->total_time = rise + fall + hold;
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	441a      	add	r2, r3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4413      	add	r3, r2
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	edc3 7a05 	vstr	s15, [r3, #20]
	characteristic->delta_rising = (max- base) / rise;
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edc3 7a06 	vstr	s15, [r3, #24]
	characteristic->delta_falling = (max-base)/fall;
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1ad2      	subs	r2, r2, r3
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edc3 7a07 	vstr	s15, [r3, #28]

	characteristic->updated = true;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <GetTotalTime>:

float GetTotalTime(Characteristic* characteristic)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return (characteristic->rise_time + characteristic->fall_time + characteristic->hold_time);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <GetDeltaRising>:
float GetDeltaRising(Characteristic* characteristic)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	return ((characteristic->maximum_RPM - characteristic->baseRPM) / characteristic->rise_time);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <GetDeltaFalling>:

float GetDeltaFalling(Characteristic* characteristic)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	return ((characteristic->maximum_RPM - characteristic->baseRPM) / characteristic->fall_time);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a01 	vldr	s15, [r3, #4]
 800141a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	edd3 7a03 	vldr	s15, [r3, #12]
 8001424:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001428:	eef0 7a66 	vmov.f32	s15, s13
}
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <isCharacteristicUpdated>:

bool isCharacteristicUpdated(Characteristic* characteristic)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	bool retval = characteristic->updated;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	73fb      	strb	r3, [r7, #15]
	if(characteristic->updated)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d010      	beq.n	8001476 <isCharacteristicUpdated+0x3c>
		characteristic->updated = !characteristic->updated;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f883 2020 	strb.w	r2, [r3, #32]

	return retval;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <CalculateSetPoint>:

float CalculateSetPoint(bool reset, float measurement)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	ed87 0a00 	vstr	s0, [r7]
 8001490:	71fb      	strb	r3, [r7, #7]
	static uint32_t counter = 0;
	static float setpoint = 0;
	static bool base_rpm_flag = false;

	if(reset || counter == 0 || !base_rpm_flag)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10a      	bne.n	80014ae <CalculateSetPoint+0x2a>
 8001498:	4b99      	ldr	r3, [pc, #612]	; (8001700 <CalculateSetPoint+0x27c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <CalculateSetPoint+0x2a>
 80014a0:	4b98      	ldr	r3, [pc, #608]	; (8001704 <CalculateSetPoint+0x280>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d024      	beq.n	80014f8 <CalculateSetPoint+0x74>
	{
		if(reset || counter == 0)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <CalculateSetPoint+0x38>
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <CalculateSetPoint+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <CalculateSetPoint+0x3e>
			base_rpm_flag = false;
 80014bc:	4b91      	ldr	r3, [pc, #580]	; (8001704 <CalculateSetPoint+0x280>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80014c2:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <CalculateSetPoint+0x27c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
		setpoint = characteristic.baseRPM;
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <CalculateSetPoint+0x284>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a8f      	ldr	r2, [pc, #572]	; (800170c <CalculateSetPoint+0x288>)
 80014ce:	6013      	str	r3, [r2, #0]
		//if(characteristic.baseRPM)
		if(abs((int)characteristic.baseRPM - (int)measurement) == 0)
 80014d0:	4b8d      	ldr	r3, [pc, #564]	; (8001708 <CalculateSetPoint+0x284>)
 80014d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014da:	ee17 2a90 	vmov	r2, s15
 80014de:	edd7 7a00 	vldr	s15, [r7]
 80014e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e6:	ee17 3a90 	vmov	r3, s15
 80014ea:	429a      	cmp	r2, r3
 80014ec:	f040 80d9 	bne.w	80016a2 <CalculateSetPoint+0x21e>
		base_rpm_flag = true;
 80014f0:	4b84      	ldr	r3, [pc, #528]	; (8001704 <CalculateSetPoint+0x280>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		if(abs((int)characteristic.baseRPM - (int)measurement) == 0)
 80014f6:	e0d4      	b.n	80016a2 <CalculateSetPoint+0x21e>
//		 {
//	            counter = (counter + 1) % (MOTOR_TIM7_FREQ * totalTime);
//		 }
//		 else
//			 counter = 0;
		if(counter <= PID_FREQ * characteristic.rise_time)
 80014f8:	4b81      	ldr	r3, [pc, #516]	; (8001700 <CalculateSetPoint+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f821 	bl	8000544 <__aeabi_ui2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	4b80      	ldr	r3, [pc, #512]	; (8001708 <CalculateSetPoint+0x284>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f83c 	bl	8000588 <__aeabi_f2d>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <CalculateSetPoint+0x28c>)
 8001516:	f7ff f88f 	bl	8000638 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff fb05 	bl	8000b30 <__aeabi_dcmple>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <CalculateSetPoint+0xea>
				setpoint += (characteristic.delta_rising/PID_FREQ);
 800152c:	4b77      	ldr	r3, [pc, #476]	; (800170c <CalculateSetPoint+0x288>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f829 	bl	8000588 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <CalculateSetPoint+0x284>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f822 	bl	8000588 <__aeabi_f2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b71      	ldr	r3, [pc, #452]	; (8001710 <CalculateSetPoint+0x28c>)
 800154a:	f7ff f99f 	bl	800088c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7fe feb9 	bl	80002cc <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb03 	bl	8000b6c <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <CalculateSetPoint+0x288>)
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e09a      	b.n	80016a4 <CalculateSetPoint+0x220>

			else if(counter > PID_FREQ * characteristic.rise_time &&
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <CalculateSetPoint+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe6 	bl	8000544 <__aeabi_ui2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	4b62      	ldr	r3, [pc, #392]	; (8001708 <CalculateSetPoint+0x284>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f801 	bl	8000588 <__aeabi_f2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b61      	ldr	r3, [pc, #388]	; (8001710 <CalculateSetPoint+0x28c>)
 800158c:	f7ff f854 	bl	8000638 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7ff fade 	bl	8000b58 <__aeabi_dcmpgt>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d020      	beq.n	80015e4 <CalculateSetPoint+0x160>
					counter <= PID_FREQ * (characteristic.rise_time + characteristic.hold_time))
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <CalculateSetPoint+0x27c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffcc 	bl	8000544 <__aeabi_ui2d>
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <CalculateSetPoint+0x284>)
 80015b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <CalculateSetPoint+0x284>)
 80015b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe ffe0 	bl	8000588 <__aeabi_f2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <CalculateSetPoint+0x28c>)
 80015ce:	f7ff f833 	bl	8000638 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
			else if(counter > PID_FREQ * characteristic.rise_time &&
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff faa9 	bl	8000b30 <__aeabi_dcmple>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d15f      	bne.n	80016a4 <CalculateSetPoint+0x220>
			{
				;
			}

			else if((counter > PID_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <CalculateSetPoint+0x27c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffab 	bl	8000544 <__aeabi_ui2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	4b45      	ldr	r3, [pc, #276]	; (8001708 <CalculateSetPoint+0x284>)
 80015f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <CalculateSetPoint+0x284>)
 80015fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80015fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001602:	ee17 0a90 	vmov	r0, s15
 8001606:	f7fe ffbf 	bl	8000588 <__aeabi_f2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b40      	ldr	r3, [pc, #256]	; (8001710 <CalculateSetPoint+0x28c>)
 8001610:	f7ff f812 	bl	8000638 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7ff fa9c 	bl	8000b58 <__aeabi_dcmpgt>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03e      	beq.n	80016a4 <CalculateSetPoint+0x220>
					(counter <= GetTotalTime(&characteristic) * PID_FREQ))
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <CalculateSetPoint+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff8a 	bl	8000544 <__aeabi_ui2d>
 8001630:	4604      	mov	r4, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4834      	ldr	r0, [pc, #208]	; (8001708 <CalculateSetPoint+0x284>)
 8001636:	f7ff feb4 	bl	80013a2 <GetTotalTime>
 800163a:	ee10 3a10 	vmov	r3, s0
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <CalculateSetPoint+0x28c>)
 800164a:	f7fe fff5 	bl	8000638 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
			else if((counter > PID_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7ff fa6b 	bl	8000b30 <__aeabi_dcmple>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <CalculateSetPoint+0x220>
						setpoint -= (characteristic.delta_falling/PID_FREQ);
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <CalculateSetPoint+0x288>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <CalculateSetPoint+0x284>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <CalculateSetPoint+0x28c>)
 800167e:	f7ff f905 	bl	800088c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7fe fe1d 	bl	80002c8 <__aeabi_dsub>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa69 	bl	8000b6c <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <CalculateSetPoint+0x288>)
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e000      	b.n	80016a4 <CalculateSetPoint+0x220>
		if(abs((int)characteristic.baseRPM - (int)measurement) == 0)
 80016a2:	bf00      	nop

	}
	counter++;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <CalculateSetPoint+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <CalculateSetPoint+0x27c>)
 80016ac:	6013      	str	r3, [r2, #0]
	uint32_t total_time = (uint32_t)GetTotalTime(&characteristic);
 80016ae:	4816      	ldr	r0, [pc, #88]	; (8001708 <CalculateSetPoint+0x284>)
 80016b0:	f7ff fe77 	bl	80013a2 <GetTotalTime>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016bc:	ee17 3a90 	vmov	r3, s15
 80016c0:	60fb      	str	r3, [r7, #12]
	if(total_time != 0)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <CalculateSetPoint+0x262>
		counter = counter % ((uint32_t)PID_FREQ* total_time);
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <CalculateSetPoint+0x27c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	460b      	mov	r3, r1
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <CalculateSetPoint+0x27c>)
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e002      	b.n	80016ec <CalculateSetPoint+0x268>

	else
		counter = 0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <CalculateSetPoint+0x27c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
	return setpoint;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <CalculateSetPoint+0x288>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	ee07 3a90 	vmov	s15, r3

}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000140 	.word	0x20000140
 8001704:	20000144 	.word	0x20000144
 8001708:	200000f8 	.word	0x200000f8
 800170c:	20000148 	.word	0x20000148
 8001710:	40240000 	.word	0x40240000

08001714 <enterCriticalSection>:
 *
 *  Created on: May 13, 2023
 *      Author: plasz
 */
#include "compontents.h"
void enterCriticalSection() {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
    __disable_irq();  // Disable interrupts globally
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <exitCriticalSection>:

void exitCriticalSection() {
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800172a:	b662      	cpsie	i
}
 800172c:	bf00      	nop
    __enable_irq();  // Enable interrupts globally
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <GetDigits>:
#include "display.h"

 uint8_t Digits[2];

void GetDigits(uint8_t number)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	enterCriticalSection();
 8001742:	f7ff ffe7 	bl	8001714 <enterCriticalSection>
	//diagnosztika, hogy jó értéket ad-e az encoder, ha pörög a motor és 0 lesz a kijelzőn, akkor tudom, hogy nem
	if(number > 99)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b63      	cmp	r3, #99	; 0x63
 800174a:	d901      	bls.n	8001750 <GetDigits+0x18>
		number = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]

    Digits[0] = convertTo7Segment((number % 10));
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <GetDigits+0x64>)
 8001754:	fba3 1302 	umull	r1, r3, r3, r2
 8001758:	08d9      	lsrs	r1, r3, #3
 800175a:	460b      	mov	r3, r1
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f81c 	bl	80017a4 <convertTo7Segment>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <GetDigits+0x68>)
 8001772:	701a      	strb	r2, [r3, #0]
	Digits[1] = convertTo7Segment((number / 10));
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <GetDigits+0x64>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f80f 	bl	80017a4 <convertTo7Segment>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <GetDigits+0x68>)
 800178c:	705a      	strb	r2, [r3, #1]
    exitCriticalSection();
 800178e:	f7ff ffca 	bl	8001726 <exitCriticalSection>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	cccccccd 	.word	0xcccccccd
 80017a0:	2000014c 	.word	0x2000014c

080017a4 <convertTo7Segment>:

uint8_t convertTo7Segment(uint8_t value) {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
    switch (value) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d835      	bhi.n	8001820 <convertTo7Segment+0x7c>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <convertTo7Segment+0x18>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	080017eb 	.word	0x080017eb
 80017c4:	080017f1 	.word	0x080017f1
 80017c8:	080017f7 	.word	0x080017f7
 80017cc:	080017fd 	.word	0x080017fd
 80017d0:	08001803 	.word	0x08001803
 80017d4:	08001809 	.word	0x08001809
 80017d8:	0800180f 	.word	0x0800180f
 80017dc:	08001815 	.word	0x08001815
 80017e0:	0800181b 	.word	0x0800181b
        case 0:
            value = 0x3F;
 80017e4:	233f      	movs	r3, #63	; 0x3f
 80017e6:	71fb      	strb	r3, [r7, #7]
            break;
 80017e8:	e01d      	b.n	8001826 <convertTo7Segment+0x82>
        case 1:
            value = 0x06;
 80017ea:	2306      	movs	r3, #6
 80017ec:	71fb      	strb	r3, [r7, #7]
            break;
 80017ee:	e01a      	b.n	8001826 <convertTo7Segment+0x82>
        case 2:
            value = 0x5B;
 80017f0:	235b      	movs	r3, #91	; 0x5b
 80017f2:	71fb      	strb	r3, [r7, #7]
            break;
 80017f4:	e017      	b.n	8001826 <convertTo7Segment+0x82>
        case 3:
            value = 0x4F;
 80017f6:	234f      	movs	r3, #79	; 0x4f
 80017f8:	71fb      	strb	r3, [r7, #7]
            break;
 80017fa:	e014      	b.n	8001826 <convertTo7Segment+0x82>
        case 4:
            value = 0x66;
 80017fc:	2366      	movs	r3, #102	; 0x66
 80017fe:	71fb      	strb	r3, [r7, #7]
            break;
 8001800:	e011      	b.n	8001826 <convertTo7Segment+0x82>
        case 5:
            value = 0x6D;
 8001802:	236d      	movs	r3, #109	; 0x6d
 8001804:	71fb      	strb	r3, [r7, #7]
            break;
 8001806:	e00e      	b.n	8001826 <convertTo7Segment+0x82>
        case 6:
            value = 0x7D;
 8001808:	237d      	movs	r3, #125	; 0x7d
 800180a:	71fb      	strb	r3, [r7, #7]
            break;
 800180c:	e00b      	b.n	8001826 <convertTo7Segment+0x82>
        case 7:
            value = 0x07;
 800180e:	2307      	movs	r3, #7
 8001810:	71fb      	strb	r3, [r7, #7]
            break;
 8001812:	e008      	b.n	8001826 <convertTo7Segment+0x82>
        case 8:
            value = 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	71fb      	strb	r3, [r7, #7]
            break;
 8001818:	e005      	b.n	8001826 <convertTo7Segment+0x82>
        case 9:
            value = 0x6F;
 800181a:	236f      	movs	r3, #111	; 0x6f
 800181c:	71fb      	strb	r3, [r7, #7]
            break;
 800181e:	e002      	b.n	8001826 <convertTo7Segment+0x82>

        default:
            // Handle unsupported values or return a default value
            value = 0x00;  // Blank segment (all segments turned off)
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
            break;
 8001824:	bf00      	nop
    }
    return value;
 8001826:	79fb      	ldrb	r3, [r7, #7]
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DisplayValue>:

void DisplayValue(int32_t value)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if(value < 0)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da02      	bge.n	8001848 <DisplayValue+0x14>
		value = -value;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	425b      	negs	r3, r3
 8001846:	607b      	str	r3, [r7, #4]
	GetDigits(value);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff73 	bl	8001738 <GetDigits>
	SPI_EnableChip(true);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 fbac 	bl	8001fb0 <SPI_EnableChip>
	SPI_SEND(Digits, 2);
 8001858:	2102      	movs	r1, #2
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <DisplayValue+0x3c>)
 800185c:	f000 fbba 	bl	8001fd4 <SPI_SEND>
	SPI_EnableChip(false);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 fba5 	bl	8001fb0 <SPI_EnableChip>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000014c 	.word	0x2000014c

08001874 <EnableDisplays>:

void EnableDisplays(bool enable)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, !enable);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <EnableDisplays+0x28>)
 800188e:	f001 fc87 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020800 	.word	0x40020800

080018a0 <InitEncoder>:
int32_t prevCounterValue = 0;
float rpm = 0;

// TIM3 inicializálása QEP üzemmódban
void InitEncoder()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	; 0x40
 80018a4:	af00      	add	r7, sp, #0

	  // Initialize GPIO and Timer 1 for encoder interface

	  // Configure GPIO pins for encoder signals
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80018a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2302      	movs	r3, #2
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4823      	ldr	r0, [pc, #140]	; (8001950 <InitEncoder+0xb0>)
 80018c4:	f001 fad8 	bl	8002e78 <HAL_GPIO_Init>

		// APB1: 84 MHz (TIMx: 168 MHz)
		__TIM1_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <InitEncoder+0xb4>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <InitEncoder+0xb4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6453      	str	r3, [r2, #68]	; 0x44
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <InitEncoder+0xb4>)
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]

	  // Configure Timer 1 for encoder mode
	  Tim1Handle.Instance = TIM1;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <InitEncoder+0xb8>)
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <InitEncoder+0xbc>)
 80018e8:	601a      	str	r2, [r3, #0]
	  Tim1Handle.Init.Prescaler = 0;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <InitEncoder+0xb8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
	  Tim1Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <InitEncoder+0xb8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
	  Tim1Handle.Init.Period = 0xFFFF;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <InitEncoder+0xb8>)
 80018f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fc:	60da      	str	r2, [r3, #12]
	  Tim1Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <InitEncoder+0xb8>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
	  Tim1Handle.Init.RepetitionCounter = 0;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <InitEncoder+0xb8>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
	  Tim1Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <InitEncoder+0xb8>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]

	  // Configure encoder interface mode
	  TIM_Encoder_InitTypeDef encoderConfig;
	  encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001910:	2303      	movs	r3, #3
 8001912:	60bb      	str	r3, [r7, #8]
	  encoderConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
	  encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001918:	2301      	movs	r3, #1
 800191a:	613b      	str	r3, [r7, #16]
	  encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
	  encoderConfig.IC1Filter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
	  encoderConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
	  encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
	  encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
	  encoderConfig.IC2Filter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28

	  HAL_TIM_Encoder_Init(&Tim1Handle, &encoderConfig);
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <InitEncoder+0xb8>)
 800193c:	f004 f856 	bl	80059ec <HAL_TIM_Encoder_Init>
	  HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_ALL);
 8001940:	213c      	movs	r1, #60	; 0x3c
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <InitEncoder+0xb8>)
 8001944:	f004 f902 	bl	8005b4c <HAL_TIM_Encoder_Start>
}
 8001948:	bf00      	nop
 800194a:	3740      	adds	r7, #64	; 0x40
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020000 	.word	0x40020000
 8001954:	40023800 	.word	0x40023800
 8001958:	20000150 	.word	0x20000150
 800195c:	40010000 	.word	0x40010000

08001960 <HallEncoder_GetRPM>:
//    return (uint16_t)rpm;
//
//}

float HallEncoder_GetRPM()
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
  int32_t counterValue = __HAL_TIM_GET_COUNTER(&Tim1Handle);
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HallEncoder_GetRPM+0x5c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	607b      	str	r3, [r7, #4]

  // Calculate delta counter value
  int32_t deltaCounter = counterValue - prevCounterValue;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HallEncoder_GetRPM+0x60>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	603b      	str	r3, [r7, #0]

  // Update previous counter value
  prevCounterValue = counterValue;
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HallEncoder_GetRPM+0x60>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]

  // Calculate RPM based on the resolution and time interval (100 microseconds)
  //rpm = (deltaCounter * 60  ) / 16*1000;
  rpm = deltaCounter* 10000/(2096*60);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f242 7210 	movw	r2, #10000	; 0x2710
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HallEncoder_GetRPM+0x64>)
 800198a:	fb82 1203 	smull	r1, r2, r2, r3
 800198e:	441a      	add	r2, r3
 8001990:	1412      	asrs	r2, r2, #16
 8001992:	17db      	asrs	r3, r3, #31
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HallEncoder_GetRPM+0x68>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
  return rpm;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HallEncoder_GetRPM+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	ee07 3a90 	vmov	s15, r3
}
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000150 	.word	0x20000150
 80019c0:	20000198 	.word	0x20000198
 80019c4:	856817f9 	.word	0x856817f9
 80019c8:	2000019c 	.word	0x2000019c

080019cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <MX_GPIO_Init+0x148>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <MX_GPIO_Init+0x148>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <MX_GPIO_Init+0x148>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a43      	ldr	r2, [pc, #268]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2120      	movs	r1, #32
 8001a56:	4830      	ldr	r0, [pc, #192]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001a58:	f001 fba2 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedPC_Pin|LedPos_Pin|CS_SEG_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f241 0190 	movw	r1, #4240	; 0x1090
 8001a62:	482e      	ldr	r0, [pc, #184]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001a64:	f001 fb9c 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6e:	482b      	ldr	r0, [pc, #172]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001a70:	f001 fb96 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedSpeed_GPIO_Port, LedSpeed_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	4829      	ldr	r0, [pc, #164]	; (8001b20 <MX_GPIO_Init+0x154>)
 8001a7a:	f001 fb91 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4821      	ldr	r0, [pc, #132]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001a96:	f001 f9ef 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001ab2:	f001 f9e1 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LedPC_Pin|LedPos_Pin|EN_SEG_Pin|CS_SEG_Pin;
 8001ab6:	f241 4390 	movw	r3, #5264	; 0x1490
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001ad0:	f001 f9d2 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PC_Pin|ModeSelect_Pin|asd_Pin;
 8001ad4:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_GPIO_Init+0x154>)
 8001aea:	f001 f9c5 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedSpeed_Pin;
 8001aee:	2340      	movs	r3, #64	; 0x40
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedSpeed_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_GPIO_Init+0x154>)
 8001b06:	f001 f9b7 	bl	8002e78 <HAL_GPIO_Init>

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020400 	.word	0x40020400

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f000 fd8e 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f83c 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7ff ff4c 	bl	80019cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 fc98 	bl	8002468 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b38:	f000 f994 	bl	8001e64 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001b3c:	f7ff fb02 	bl	8001144 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001b40:	f000 fb5c 	bl	80021fc <MX_TIM10_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  //CDC_Init_FS();
  //InitAF();
  InitMotorPWM();
 8001b44:	f000 f8a2 	bl	8001c8c <InitMotorPWM>
  InitEncoder();
 8001b48:	f7ff feaa 	bl	80018a0 <InitEncoder>
  CharacteristicInit();
 8001b4c:	f7ff fb90 	bl	8001270 <CharacteristicInit>
  PIDInit();
 8001b50:	f7ff f9de 	bl	8000f10 <PIDInit>
 // SetPWM(900);
//  SetPWM(1000);
//  SetPWM(0);


  InitTimer();
 8001b54:	f000 fb98 	bl	8002288 <InitTimer>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	480e      	ldr	r0, [pc, #56]	; (8001b98 <main+0x74>)
 8001b5e:	f001 fb1f 	bl	80031a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2110      	movs	r1, #16
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <main+0x78>)
 8001b68:	f001 fb1a 	bl	80031a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <main+0x78>)
 8001b72:	f001 fb15 	bl	80031a0 <HAL_GPIO_WritePin>
  EnableDisplays(true);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fe7c 	bl	8001874 <EnableDisplays>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(hasNewMessage())
 8001b7c:	f000 fcf6 	bl	800256c <hasNewMessage>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0fa      	beq.n	8001b7c <main+0x58>
	  {
		   ProcessReceivedData(rxBuffer, msg_length);
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <main+0x7c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <main+0x80>)
 8001b90:	f000 fd00 	bl	8002594 <ProcessReceivedData>
	  if(hasNewMessage())
 8001b94:	e7f2      	b.n	8001b7c <main+0x58>
 8001b96:	bf00      	nop
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	2000041c 	.word	0x2000041c
 8001ba4:	20000314 	.word	0x20000314

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2234      	movs	r2, #52	; 0x34
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f007 fc6e 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c1c:	23a8      	movs	r3, #168	; 0xa8
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c24:	2307      	movs	r3, #7
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fead 	bl	8004990 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c3c:	f000 f820 	bl	8001c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fb4c 	bl	80042fc <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c6a:	f000 f809 	bl	8001c80 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3750      	adds	r7, #80	; 0x50
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
}
 8001c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <Error_Handler+0x8>
	...

08001c8c <InitMotorPWM>:
TIM_HandleTypeDef Tim3Handle;
TIM_OC_InitTypeDef sConfigOC_PWM_Channel1;
TIM_OC_InitTypeDef sConfigOC_PWM_Channel2;
// TIM1 inicializálása PWM üzemmódban
void InitMotorPWM()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
	  // Enable GPIO clocks
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <InitMotorPWM+0x138>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <InitMotorPWM+0x138>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <InitMotorPWM+0x138>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <InitMotorPWM+0x138>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <InitMotorPWM+0x138>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <InitMotorPWM+0x138>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

	  // Configure GPIO pins as alternate functions
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;  // Example pin for channel 1
 8001cd6:	2340      	movs	r3, #64	; 0x40
 8001cd8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // Example timer and alternate function
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4838      	ldr	r0, [pc, #224]	; (8001dc8 <InitMotorPWM+0x13c>)
 8001ce6:	f001 f8c7 	bl	8002e78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;  // Example pin for channel 2
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // Example timer and alternate function
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <InitMotorPWM+0x13c>)
 8001cfa:	f001 f8bd 	bl	8002e78 <HAL_GPIO_Init>

	  // Enable timer clock
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <InitMotorPWM+0x138>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <InitMotorPWM+0x138>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <InitMotorPWM+0x138>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

	  // Configure timer
	  Tim3Handle.Instance = TIM3;  // Example timer
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <InitMotorPWM+0x140>)
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <InitMotorPWM+0x144>)
 8001d1e:	601a      	str	r2, [r3, #0]
	  Tim3Handle.Init.Prescaler = 3;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <InitMotorPWM+0x140>)
 8001d22:	2203      	movs	r2, #3
 8001d24:	605a      	str	r2, [r3, #4]
	  Tim3Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <InitMotorPWM+0x140>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
	  Tim3Handle.Init.Period = 1000;  // Example period (1kHz frequency)
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <InitMotorPWM+0x140>)
 8001d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d32:	60da      	str	r2, [r3, #12]
	  Tim3Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <InitMotorPWM+0x140>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
	  Tim3Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <InitMotorPWM+0x140>)
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	619a      	str	r2, [r3, #24]
	  HAL_TIM_PWM_Init(&Tim3Handle);
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <InitMotorPWM+0x140>)
 8001d42:	f003 fd31 	bl	80057a8 <HAL_TIM_PWM_Init>

	  // Configure PWM channels
	  sConfigOC_PWM_Channel1.OCMode = TIM_OCMODE_PWM1;
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d48:	2260      	movs	r2, #96	; 0x60
 8001d4a:	601a      	str	r2, [r3, #0]
	  sConfigOC_PWM_Channel1.Pulse = 500;  // Example duty cycle (50%)
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d52:	605a      	str	r2, [r3, #4]
	  sConfigOC_PWM_Channel1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
	  sConfigOC_PWM_Channel1.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
	  sConfigOC_PWM_Channel1.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
	  sConfigOC_PWM_Channel1.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	619a      	str	r2, [r3, #24]

	  HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &sConfigOC_PWM_Channel1, TIM_CHANNEL_1);  // Example channel 1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <InitMotorPWM+0x148>)
 8001d72:	4816      	ldr	r0, [pc, #88]	; (8001dcc <InitMotorPWM+0x140>)
 8001d74:	f004 f880 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>

	  // Update the polarity for channel 2
	  sConfigOC_PWM_Channel2.OCMode = TIM_OCMODE_PWM1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d7a:	2260      	movs	r2, #96	; 0x60
 8001d7c:	601a      	str	r2, [r3, #0]
	  sConfigOC_PWM_Channel2.Pulse = 500;  // Example duty cycle (50%)
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d84:	605a      	str	r2, [r3, #4]
	  sConfigOC_PWM_Channel2.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	609a      	str	r2, [r3, #8]
	  sConfigOC_PWM_Channel2.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
	  sConfigOC_PWM_Channel2.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
	  sConfigOC_PWM_Channel2.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	619a      	str	r2, [r3, #24]

	  HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &sConfigOC_PWM_Channel2, TIM_CHANNEL_2);  // Example channel 2
 8001da0:	2204      	movs	r2, #4
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <InitMotorPWM+0x14c>)
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <InitMotorPWM+0x140>)
 8001da6:	f004 f867 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>

	  // Start PWM generation
	  HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_1);  // Example channel 1
 8001daa:	2100      	movs	r1, #0
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <InitMotorPWM+0x140>)
 8001dae:	f003 fd55 	bl	800585c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_2);  // Example channel 2
 8001db2:	2104      	movs	r1, #4
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <InitMotorPWM+0x140>)
 8001db6:	f003 fd51 	bl	800585c <HAL_TIM_PWM_Start>
}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	200001a0 	.word	0x200001a0
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	200001e8 	.word	0x200001e8
 8001dd8:	20000204 	.word	0x20000204

08001ddc <SetPWM>:

void SetPWM(int32_t d)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if (d > MOTOR_D_MAX)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dea:	dd03      	ble.n	8001df4 <SetPWM+0x18>
	{
		d=MOTOR_D_MAX;
 8001dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	e004      	b.n	8001dfe <SetPWM+0x22>
	}
	else if (d < 0)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da01      	bge.n	8001dfe <SetPWM+0x22>
	{
		d=0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
	}

	// PWM csatornák beállítása SetMotorCh1 és SetMotorCh2 hívásával
	SetMotorCh1(d);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f80a 	bl	8001e1c <SetMotorCh1>
	SetMotorCh2(d);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f817 	bl	8001e40 <SetMotorCh2>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <SetMotorCh1>:

void SetMotorCh1(uint16_t d)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR1 = d;
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SetMotorCh1+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200001a0 	.word	0x200001a0

08001e40 <SetMotorCh2>:

void SetMotorCh2(uint16_t d)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR2 = d;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SetMotorCh2+0x20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200001a0 	.word	0x200001a0

08001e64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <MX_SPI2_Init+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e98:	2218      	movs	r2, #24
 8001e9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eb0:	220a      	movs	r2, #10
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_SPI2_Init+0x64>)
 8001eb6:	f003 f809 	bl	8004ecc <HAL_SPI_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ec0:	f7ff fede 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000220 	.word	0x20000220
 8001ecc:	40003800 	.word	0x40003800

08001ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <HAL_SPI_MspInit+0xd0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d152      	bne.n	8001f98 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_SPI_MspInit+0xd4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f46:	2302      	movs	r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001f56:	2307      	movs	r3, #7
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <HAL_SPI_MspInit+0xd8>)
 8001f62:	f000 ff89 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <HAL_SPI_MspInit+0xdc>)
 8001f84:	f000 ff78 	bl	8002e78 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2024      	movs	r0, #36	; 0x24
 8001f8e:	f000 ff1a 	bl	8002dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f92:	2024      	movs	r0, #36	; 0x24
 8001f94:	f000 ff33 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40003800 	.word	0x40003800
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <SPI_EnableChip>:
  }
}

/* USER CODE BEGIN 1 */
void SPI_EnableChip(uint8_t enable)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SEG_GPIO_Port, CS_SEG_Pin, enable);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc2:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <SPI_EnableChip+0x20>)
 8001fc4:	f001 f8ec 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40020800 	.word	0x40020800

08001fd4 <SPI_SEND>:

HAL_StatusTypeDef SPI_SEND(uint8_t* pData, uint16_t datasize)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi2, pData, datasize, HAL_MAX_DELAY);
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <SPI_SEND+0x24>)
 8001fea:	f002 fff8 	bl	8004fde <HAL_SPI_Transmit>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000220 	.word	0x20000220

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_MspInit+0x4c>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_MspInit+0x4c>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f000 fb28 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <SPI2_IRQHandler+0x10>)
 80020a6:	f003 f8d7 	bl	8005258 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000220 	.word	0x20000220

080020b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
	static int end_flag = 0;
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
	// Check if the interrupt was triggered by USART2
	  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET)
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <USART2_IRQHandler+0x8c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d135      	bne.n	8002134 <USART2_IRQHandler+0x80>
	  {
	    // Clear the RXNE flag
	    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <USART2_IRQHandler+0x8c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	601a      	str	r2, [r3, #0]

	    // Read the received data from the data register
	    uint8_t rxData = huart2.Instance->DR;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <USART2_IRQHandler+0x8c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	71fb      	strb	r3, [r7, #7]

	    if(!end_flag)
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <USART2_IRQHandler+0x90>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d125      	bne.n	800212e <USART2_IRQHandler+0x7a>
	    {
	    	 // Store the received data in the buffer
	    		    rxBuffer[rxIndex++] = rxData;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <USART2_IRQHandler+0x94>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	4917      	ldr	r1, [pc, #92]	; (8002148 <USART2_IRQHandler+0x94>)
 80020ea:	600a      	str	r2, [r1, #0]
 80020ec:	4917      	ldr	r1, [pc, #92]	; (800214c <USART2_IRQHandler+0x98>)
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	54ca      	strb	r2, [r1, r3]

	    		    // Check if a complete message has arrived
	    		    if (rxData == '\n')
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b0a      	cmp	r3, #10
 80020f6:	d112      	bne.n	800211e <USART2_IRQHandler+0x6a>
	    		    {
	    		    	end_flag = 1;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <USART2_IRQHandler+0x90>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
	    		      // Null-terminate the buffer
	    		      rxBuffer[rxIndex] = '\0';
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <USART2_IRQHandler+0x94>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <USART2_IRQHandler+0x98>)
 8002104:	2100      	movs	r1, #0
 8002106:	54d1      	strb	r1, [r2, r3]

	    		      // Set the message complete flag
	    		      usartflag = true;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <USART2_IRQHandler+0x9c>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]

	    		      // Reset the buffer index for the next message
	    		      msg_length = rxIndex;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <USART2_IRQHandler+0x94>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <USART2_IRQHandler+0xa0>)
 8002114:	6013      	str	r3, [r2, #0]
	    		      rxIndex = 0;
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <USART2_IRQHandler+0x94>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
	    }

	  }

  /* USER CODE END USART2_IRQn 1 */
}
 800211c:	e00a      	b.n	8002134 <USART2_IRQHandler+0x80>
	    		    else if (rxIndex >= BUFFER_SIZE - 1)
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <USART2_IRQHandler+0x94>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2bfe      	cmp	r3, #254	; 0xfe
 8002124:	d906      	bls.n	8002134 <USART2_IRQHandler+0x80>
	    		      rxIndex = 0;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <USART2_IRQHandler+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
}
 800212c:	e002      	b.n	8002134 <USART2_IRQHandler+0x80>
	    	end_flag = false;
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <USART2_IRQHandler+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000420 	.word	0x20000420
 8002144:	20000278 	.word	0x20000278
 8002148:	20000414 	.word	0x20000414
 800214c:	20000314 	.word	0x20000314
 8002150:	20000418 	.word	0x20000418
 8002154:	2000041c 	.word	0x2000041c

08002158 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <OTG_FS_IRQHandler+0x10>)
 800215e:	f001 f838 	bl	80031d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000046c 	.word	0x2000046c

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f007 f952 	bl	8009444 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20020000 	.word	0x20020000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	2000027c 	.word	0x2000027c
 80021d4:	20000988 	.word	0x20000988

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_TIM10_Init+0x40>)
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <MX_TIM10_Init+0x44>)
 8002204:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <MX_TIM10_Init+0x40>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MX_TIM10_Init+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MX_TIM10_Init+0x40>)
 8002214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002218:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <MX_TIM10_Init+0x40>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_TIM10_Init+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_TIM10_Init+0x40>)
 8002228:	f003 f9fe 	bl	8005628 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002232:	f7ff fd25 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000280 	.word	0x20000280
 8002240:	40014400 	.word	0x40014400

08002244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_TIM_Base_MspInit+0x3c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40014400 	.word	0x40014400
 8002284:	40023800 	.word	0x40023800

08002288 <InitTimer>:

TIM_HandleTypeDef Tim7Handle;

// TIM7 inicializálása 100 us időzítőnek
void InitTimer()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	// APB1: 42 MHz (TIMx: 84 MHz)
	__TIM7_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <InitTimer+0x70>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <InitTimer+0x70>)
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <InitTimer+0x70>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

	// TIM7: 10 kHz (TIM7_FREQ)
	Tim7Handle.Instance = TIM7;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <InitTimer+0x74>)
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <InitTimer+0x78>)
 80022ae:	601a      	str	r2, [r3, #0]
	Tim7Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <InitTimer+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
	Tim7Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <InitTimer+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
	Tim7Handle.Init.Prescaler = 8399;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <InitTimer+0x74>)
 80022be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80022c2:	605a      	str	r2, [r3, #4]
	Tim7Handle.Init.Period = 1000;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <InitTimer+0x74>)
 80022c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ca:	60da      	str	r2, [r3, #12]
	Tim7Handle.State = HAL_TIM_STATE_RESET;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <InitTimer+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	HAL_TIM_Base_Init(&Tim7Handle);
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <InitTimer+0x74>)
 80022d6:	f003 f9a7 	bl	8005628 <HAL_TIM_Base_Init>
	//HAL_TIM_Base_Start(&Tim7Handle);


	HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2037      	movs	r0, #55	; 0x37
 80022e0:	f000 fd71 	bl	8002dc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022e4:	2037      	movs	r0, #55	; 0x37
 80022e6:	f000 fd8a 	bl	8002dfe <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&Tim7Handle);
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <InitTimer+0x74>)
 80022ec:	f003 f9ec 	bl	80056c8 <HAL_TIM_Base_Start_IT>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	200002c8 	.word	0x200002c8
 8002300:	40001400 	.word	0x40001400

08002304 <TIM7_IRQHandler>:

// Megszakításkezelő a TIM7 időzítőhöz
void TIM7_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim7Handle);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM7_IRQHandler+0x10>)
 800230a:	f003 fcad 	bl	8005c68 <HAL_TIM_IRQHandler>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200002c8 	.word	0x200002c8

08002318 <TimerHandler>:



void TimerHandler()
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	static bool reset = true;
	static float last_measurement = 0.0;
	if(isCharacteristicUpdated(&characteristic_new))
 800231e:	4844      	ldr	r0, [pc, #272]	; (8002430 <TimerHandler+0x118>)
 8002320:	f7ff f88b 	bl	800143a <isCharacteristicUpdated>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <TimerHandler+0x2c>
	{
		characteristic = characteristic_new;
 800232a:	4a42      	ldr	r2, [pc, #264]	; (8002434 <TimerHandler+0x11c>)
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <TimerHandler+0x118>)
 800232e:	4614      	mov	r4, r2
 8002330:	461d      	mov	r5, r3
 8002332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	6023      	str	r3, [r4, #0]
		reset = 1;
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <TimerHandler+0x120>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
	}

	float measurement = HallEncoder_GetRPM();
 8002344:	f7ff fb0c 	bl	8001960 <HallEncoder_GetRPM>
 8002348:	ed87 0a01 	vstr	s0, [r7, #4]


	if(measurement >= -0.0001 && measurement <= 0.0001)
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe f91b 	bl	8000588 <__aeabi_f2d>
 8002352:	a333      	add	r3, pc, #204	; (adr r3, 8002420 <TimerHandler+0x108>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe fbf4 	bl	8000b44 <__aeabi_dcmpge>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <TimerHandler+0x70>
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe f910 	bl	8000588 <__aeabi_f2d>
 8002368:	a32f      	add	r3, pc, #188	; (adr r3, 8002428 <TimerHandler+0x110>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fe fbdf 	bl	8000b30 <__aeabi_dcmple>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <TimerHandler+0x70>
	{
		measurement = 0.0;
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
		last_measurement = 0.0;
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <TimerHandler+0x124>)
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e01a      	b.n	80023be <TimerHandler+0xa6>
	}

	//This needs to be added because there are spikes in the encoder's signal
	else if(fabs(measurement-last_measurement) > measurement && last_measurement != 0.0)
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <TimerHandler+0x124>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002396:	eef0 7ae7 	vabs.f32	s15, s15
 800239a:	ed97 7a01 	vldr	s14, [r7, #4]
 800239e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d50a      	bpl.n	80023be <TimerHandler+0xa6>
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <TimerHandler+0x124>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d002      	beq.n	80023be <TimerHandler+0xa6>
		measurement = last_measurement;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <TimerHandler+0x124>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	607b      	str	r3, [r7, #4]

	DisplayValue(measurement);
 80023be:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c6:	ee17 0a90 	vmov	r0, s15
 80023ca:	f7ff fa33 	bl	8001834 <DisplayValue>

	PID.setpoint = CalculateSetPoint(reset, measurement);
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <TimerHandler+0x120>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f854 	bl	8001484 <CalculateSetPoint>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <TimerHandler+0x128>)
 80023e2:	edc3 7a03 	vstr	s15, [r3, #12]

	if(reset)
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <TimerHandler+0x120>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <TimerHandler+0xdc>
		reset = false;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <TimerHandler+0x120>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]

	PIDContollerUpdate(measurement);
 80023f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80023f8:	f7fe fdb4 	bl	8000f64 <PIDContollerUpdate>
	SetPWM(PID.output);
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <TimerHandler+0x128>)
 80023fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002406:	ee17 0a90 	vmov	r0, s15
 800240a:	f7ff fce7 	bl	8001ddc <SetPWM>
	last_measurement = measurement;
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <TimerHandler+0x124>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bdb0      	pop	{r4, r5, r7, pc}
 800241c:	f3af 8000 	nop.w
 8002420:	eb1c432d 	.word	0xeb1c432d
 8002424:	bf1a36e2 	.word	0xbf1a36e2
 8002428:	eb1c432d 	.word	0xeb1c432d
 800242c:	3f1a36e2 	.word	0x3f1a36e2
 8002430:	2000011c 	.word	0x2000011c
 8002434:	200000f8 	.word	0x200000f8
 8002438:	20000004 	.word	0x20000004
 800243c:	20000310 	.word	0x20000310
 8002440:	20000090 	.word	0x20000090

08002444 <HAL_TIM_PeriodElapsedCallback>:
// Megszakításkezelő callback a Timer megszakításkezelőhöz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        TimerHandler();
 8002456:	f7ff ff5f 	bl	8002318 <TimerHandler>
    }
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40001400 	.word	0x40001400

08002468 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <MX_USART2_UART_Init+0x60>)
 8002470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 80024a0:	f004 f85d 	bl	800655e <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f7ff fbe9 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <MX_USART2_UART_Init+0x5c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0220 	orr.w	r2, r2, #32
 80024bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000420 	.word	0x20000420
 80024c8:	40004400 	.word	0x40004400

080024cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_UART_MspInit+0x94>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d133      	bne.n	8002556 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_UART_MspInit+0x98>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_UART_MspInit+0x98>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_UART_MspInit+0x98>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_UART_MspInit+0x98>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_UART_MspInit+0x98>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_UART_MspInit+0x98>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002526:	230c      	movs	r3, #12
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002536:	2307      	movs	r3, #7
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <HAL_UART_MspInit+0x9c>)
 8002542:	f000 fc99 	bl	8002e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2026      	movs	r0, #38	; 0x26
 800254c:	f000 fc3b 	bl	8002dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002550:	2026      	movs	r0, #38	; 0x26
 8002552:	f000 fc54 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40004400 	.word	0x40004400
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000

0800256c <hasNewMessage>:
//
//
//  /* USER CODE END USART1_IRQn 1 */
//}
bool hasNewMessage(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  if (usartflag)
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <hasNewMessage+0x24>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <hasNewMessage+0x18>
  {
    // Reset the message complete flag
    usartflag = false;
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <hasNewMessage+0x24>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
    return true;
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <hasNewMessage+0x1a>
  }
  return false;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000418 	.word	0x20000418

08002594 <ProcessReceivedData>:
void ProcessReceivedData(volatile uint8_t* buffer, volatile uint16_t length)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af04      	add	r7, sp, #16
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  // Separate the numeric values (ints) and store them as needed
  // You can use strtok or sscanf functions to parse the buffer

  // Example: Assuming the received data format is "int1,int2,int3\n"
  int base, top, rising, falling, hold;
  sscanf((char*)buffer, "%d,%d,%d,%d,%d", &base, &top, &rising, &falling, &hold);
 80025a0:	f107 0118 	add.w	r1, r7, #24
 80025a4:	f107 021c 	add.w	r2, r7, #28
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	460b      	mov	r3, r1
 80025bc:	490b      	ldr	r1, [pc, #44]	; (80025ec <ProcessReceivedData+0x58>)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f006 ff72 	bl	80094a8 <siscanf>
  SetCharacteristic(&characteristic_new, top, base, rising, falling, hold);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4619      	mov	r1, r3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4618      	mov	r0, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	461c      	mov	r4, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	9201      	str	r2, [sp, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	4602      	mov	r2, r0
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <ProcessReceivedData+0x5c>)
 80025de:	f7fe fe81 	bl	80012e4 <SetCharacteristic>

  // Use the parsed integer values as needed
  // ...
}
 80025e2:	bf00      	nop
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0800a0c0 	.word	0x0800a0c0
 80025f0:	2000011c 	.word	0x2000011c

080025f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800262c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f8:	480d      	ldr	r0, [pc, #52]	; (8002630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002610:	4c0b      	ldr	r4, [pc, #44]	; (8002640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261e:	f7ff fddb 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002622:	f006 ff15 	bl	8009450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7ff fa7d 	bl	8001b24 <main>
  bx  lr    
 800262a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002638:	0800a284 	.word	0x0800a284
  ldr r2, =_sbss
 800263c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002640:	20000988 	.word	0x20000988

08002644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 fb9d 	bl	8002db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff fcbe 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fbb5 	bl	8002e1a <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f000 fb7d 	bl	8002dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000000 	.word	0x20000000
 80026e4:	2000000c 	.word	0x2000000c
 80026e8:	20000008 	.word	0x20000008

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2000000c 	.word	0x2000000c
 8002710:	20000464 	.word	0x20000464

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000464 	.word	0x20000464

0800272c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e033      	b.n	80027aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fd4c 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f94a 	bl	8002a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	e001      	b.n	80027a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e113      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x244>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d925      	bls.n	800282c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43da      	mvns	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	4603      	mov	r3, r0
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4403      	add	r3, r0
 800281e:	3b1e      	subs	r3, #30
 8002820:	409a      	lsls	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e022      	b.n	8002872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	2207      	movs	r2, #7
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	4603      	mov	r3, r0
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	409a      	lsls	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d824      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b05      	subs	r3, #5
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	e04c      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b23      	subs	r3, #35	; 0x23
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43da      	mvns	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	400a      	ands	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	; 0x23
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
 8002914:	e023      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b41      	subs	r3, #65	; 0x41
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_ADC_ConfigChannel+0x250>)
 8002960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_ADC_ConfigChannel+0x254>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d10f      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1d8>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b12      	cmp	r3, #18
 8002972:	d10b      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_ADC_ConfigChannel+0x254>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12b      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x23a>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_ADC_ConfigChannel+0x258>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x1f4>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b11      	cmp	r3, #17
 80029a6:	d122      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a11      	ldr	r2, [pc, #68]	; (8002a0c <HAL_ADC_ConfigChannel+0x258>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d111      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_ADC_ConfigChannel+0x25c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_ADC_ConfigChannel+0x260>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9a      	lsrs	r2, r3, #18
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f9      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012300 	.word	0x40012300
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	10000012 	.word	0x10000012
 8002a10:	20000000 	.word	0x20000000
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a20:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <ADC_Init+0x1f0>)
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6899      	ldr	r1, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <ADC_Init+0x1f4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002abe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	e00f      	b.n	8002b16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0202 	bic.w	r2, r2, #2
 8002b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7e1b      	ldrb	r3, [r3, #24]
 8002b30:	005a      	lsls	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	035a      	lsls	r2, r3, #13
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	e007      	b.n	8002b8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	051a      	lsls	r2, r3, #20
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bce:	025a      	lsls	r2, r3, #9
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	029a      	lsls	r2, r3, #10
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	0f000001 	.word	0x0f000001

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4907      	ldr	r1, [pc, #28]	; (8002cac <__NVIC_EnableIRQ+0x38>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	; (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d301      	bcc.n	8002d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00f      	b.n	8002da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <SysTick_Config+0x40>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7ff ff8e 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <SysTick_Config+0x40>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <SysTick_Config+0x40>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff29 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd8:	f7ff ff3e 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f7ff ff8e 	bl	8002d04 <NVIC_EncodePriority>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff5d 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff31 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ffa2 	bl	8002d6c <SysTick_Config>
 8002e28:	4603      	mov	r3, r0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e00c      	b.n	8002e6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2205      	movs	r2, #5
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e165      	b.n	8003160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f040 8154 	bne.w	800315a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d130      	bne.n	8002f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80ae 	beq.w	800315a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301a:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_GPIO_Init+0x304>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x308>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d025      	beq.n	8003092 <HAL_GPIO_Init+0x21a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_Init+0x30c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <HAL_GPIO_Init+0x216>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_Init+0x310>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_Init+0x212>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x314>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x20e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_GPIO_Init+0x318>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x20a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_GPIO_Init+0x31c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x206>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_GPIO_Init+0x320>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x202>
 8003076:	2306      	movs	r3, #6
 8003078:	e00c      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800307a:	2307      	movs	r3, #7
 800307c:	e00a      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800307e:	2305      	movs	r3, #5
 8003080:	e008      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003082:	2304      	movs	r3, #4
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003086:	2303      	movs	r3, #3
 8003088:	e004      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800308a:	2302      	movs	r3, #2
 800308c:	e002      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003092:	2300      	movs	r3, #0
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f002 0203 	and.w	r2, r2, #3
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4093      	lsls	r3, r2
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a4:	4935      	ldr	r1, [pc, #212]	; (800317c <HAL_GPIO_Init+0x304>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_GPIO_Init+0x324>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_GPIO_Init+0x324>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_GPIO_Init+0x324>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_GPIO_Init+0x324>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_GPIO_Init+0x324>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_GPIO_Init+0x324>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_GPIO_Init+0x324>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_GPIO_Init+0x324>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	f67f ae96 	bls.w	8002e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40013800 	.word	0x40013800
 8003180:	40020000 	.word	0x40020000
 8003184:	40020400 	.word	0x40020400
 8003188:	40020800 	.word	0x40020800
 800318c:	40020c00 	.word	0x40020c00
 8003190:	40021000 	.word	0x40021000
 8003194:	40021400 	.word	0x40021400
 8003198:	40021800 	.word	0x40021800
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031bc:	e003      	b.n	80031c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b08d      	sub	sp, #52	; 0x34
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fc68 	bl	8007abe <USB_GetMode>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 84b7 	bne.w	8003b64 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fbcc 	bl	8007998 <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 84ad 	beq.w	8003b62 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fbb9 	bl	8007998 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f002 0202 	and.w	r2, r2, #2
 800323e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fba7 	bl	8007998 <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d161      	bne.n	8003318 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0210 	bic.w	r2, r2, #16
 8003262:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	0c5b      	lsrs	r3, r3, #17
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2b02      	cmp	r3, #2
 800328e:	d124      	bne.n	80032da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d035      	beq.n	8003308 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6a38      	ldr	r0, [r7, #32]
 80032b0:	f004 fa20 	bl	80076f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c0:	441a      	add	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	441a      	add	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
 80032d8:	e016      	b.n	8003308 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	0c5b      	lsrs	r3, r3, #17
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d110      	bne.n	8003308 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032ec:	2208      	movs	r2, #8
 80032ee:	4619      	mov	r1, r3
 80032f0:	6a38      	ldr	r0, [r7, #32]
 80032f2:	f004 f9ff 	bl	80076f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003302:	441a      	add	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0210 	orr.w	r2, r2, #16
 8003316:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 fb3b 	bl	8007998 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800332c:	f040 80a7 	bne.w	800347e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fb40 	bl	80079be <USB_ReadDevAllOutEpInterrupt>
 800333e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003340:	e099      	b.n	8003476 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808e 	beq.w	800346a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f004 fb64 	bl	8007a26 <USB_ReadDevOutEPInterrupt>
 800335e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	2301      	movs	r3, #1
 800337a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800337c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fe8e 	bl	80040a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	2308      	movs	r3, #8
 800339e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 ff64 	bl	8004270 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2310      	movs	r3, #16
 80033c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d030      	beq.n	8003430 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d109      	bne.n	80033ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	78db      	ldrb	r3, [r3, #3]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2200      	movs	r2, #0
 8003410:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f005 fe67 	bl	80090ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	461a      	mov	r2, r3
 800342c:	2302      	movs	r3, #2
 800342e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2320      	movs	r3, #32
 800344a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003468:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af62 	bne.w	8003342 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fa88 	bl	8007998 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003492:	f040 80db 	bne.w	800364c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 faa9 	bl	80079f2 <USB_ReadDevAllInEpInterrupt>
 80034a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034a6:	e0cd      	b.n	8003644 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80c2 	beq.w	8003638 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 facf 	bl	8007a62 <USB_ReadDevInEPInterrupt>
 80034c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d057      	beq.n	8003580 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f0:	4013      	ands	r3, r2
 80034f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d132      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	334c      	adds	r3, #76	; 0x4c
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4419      	add	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4403      	add	r3, r0
 8003542:	334c      	adds	r3, #76	; 0x4c
 8003544:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3354      	adds	r3, #84	; 0x54
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800356c:	461a      	mov	r2, r3
 800356e:	2101      	movs	r1, #1
 8003570:	f004 fad6 	bl	8007b20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f005 fd32 	bl	8008fe4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	2308      	movs	r3, #8
 800359a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	461a      	mov	r2, r3
 80035b4:	2310      	movs	r3, #16
 80035b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d023      	beq.n	8003626 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	6a38      	ldr	r0, [r7, #32]
 80035e2:	f003 fb1f 	bl	8006c24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	3338      	adds	r3, #56	; 0x38
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f005 fd7e 	bl	8009110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	461a      	mov	r2, r3
 8003622:	2302      	movs	r3, #2
 8003624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fca6 	bl	8003f84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	3301      	adds	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af2e 	bne.w	80034a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 f9a1 	bl	8007998 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003660:	d122      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 fe60 	bl	8009350 <HAL_PCDEx_LPM_Callback>
 8003690:	e002      	b.n	8003698 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f005 fd1c 	bl	80090d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 f973 	bl	8007998 <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d112      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f005 fcd8 	bl	8009084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036e2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 f955 	bl	8007998 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f8:	d121      	bne.n	800373e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003708:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d111      	bne.n	8003738 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800372e:	2101      	movs	r1, #1
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f005 fe0d 	bl	8009350 <HAL_PCDEx_LPM_Callback>
 8003736:	e002      	b.n	800373e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f005 fca3 	bl	8009084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f928 	bl	8007998 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	f040 80b7 	bne.w	80038c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2110      	movs	r1, #16
 8003770:	4618      	mov	r0, r3
 8003772:	f003 fa57 	bl	8006c24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377a:	e046      	b.n	800380a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003788:	461a      	mov	r2, r3
 800378a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800378e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d4:	0151      	lsls	r1, r2, #5
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	440a      	add	r2, r1
 80037da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003802:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	3301      	adds	r3, #1
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d3b3      	bcc.n	800377c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003822:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003826:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003840:	f043 030b 	orr.w	r3, r3, #11
 8003844:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003856:	f043 030b 	orr.w	r3, r3, #11
 800385a:	6453      	str	r3, [r2, #68]	; 0x44
 800385c:	e015      	b.n	800388a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003870:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003874:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f043 030b 	orr.w	r3, r3, #11
 8003888:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800389c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ae:	461a      	mov	r2, r3
 80038b0:	f004 f936 	bl	8007b20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 f865 	bl	8007998 <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d8:	d124      	bne.n	8003924 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f8fb 	bl	8007ada <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 f9cf 	bl	8006c8c <USB_GetDevSpeed>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681c      	ldr	r4, [r3, #0]
 80038fa:	f000 fde5 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80038fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	4620      	mov	r0, r4
 800390a:	f003 f8e9 	bl	8006ae0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f005 fb90 	bl	8009034 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 f835 	bl	8007998 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d10a      	bne.n	800394e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f005 fb6d 	bl	8009018 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f002 0208 	and.w	r2, r2, #8
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f004 f820 	bl	8007998 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d122      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396e:	2301      	movs	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	e014      	b.n	800399e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fac5 	bl	8003f22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	3301      	adds	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3e5      	bcc.n	8003974 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 fff3 	bl	8007998 <USB_ReadInterrupts>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039bc:	d13b      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039be:	2301      	movs	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e02b      	b.n	8003a1c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3340      	adds	r3, #64	; 0x40
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d115      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da12      	bge.n	8003a16 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	333f      	adds	r3, #63	; 0x3f
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa86 	bl	8003f22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	3301      	adds	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3ce      	bcc.n	80039c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 ffac 	bl	8007998 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4a:	d155      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	e045      	b.n	8003ade <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d12e      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da2b      	bge.n	8003ad8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d121      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad4:	6053      	str	r3, [r2, #4]
            break;
 8003ad6:	e007      	b.n	8003ae8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	3301      	adds	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3b4      	bcc.n	8003a52 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 ff4b 	bl	8007998 <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d10a      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f005 fb10 	bl	8009134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f003 ff35 	bl	8007998 <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d115      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f005 fb00 	bl	8009150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	e000      	b.n	8003b64 <HAL_PCD_IRQHandler+0x992>
      return;
 8003b62:	bf00      	nop
    }
  }
}
 8003b64:	3734      	adds	r7, #52	; 0x34
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}

08003b6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_SetAddress+0x1a>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e013      	b.n	8003bac <HAL_PCD_SetAddress+0x42>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 fed5 	bl	800794c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	70fb      	strb	r3, [r7, #3]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	803b      	strh	r3, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da0f      	bge.n	8003bfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	3338      	adds	r3, #56	; 0x38
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
 8003bf8:	e00f      	b.n	8003c1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c26:	883a      	ldrh	r2, [r7, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	78ba      	ldrb	r2, [r7, #2]
 8003c30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c44:	78bb      	ldrb	r3, [r7, #2]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d102      	bne.n	8003c50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_PCD_EP_Open+0xaa>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e00e      	b.n	8003c7c <HAL_PCD_EP_Open+0xc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 f832 	bl	8006cd6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	460b      	mov	r3, r1
 8003c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	3304      	adds	r3, #4
 8003cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc6:	7afb      	ldrb	r3, [r7, #11]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d102      	bne.n	8003ce0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	f003 fabc 	bl	8007274 <USB_EP0StartXfer>
 8003cfc:	e008      	b.n	8003d10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	f003 f86a 	bl	8006de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	460b      	mov	r3, r1
 8003d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3338      	adds	r3, #56	; 0x38
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3304      	adds	r3, #4
 8003d40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2201      	movs	r2, #1
 8003d58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d5a:	7afb      	ldrb	r3, [r7, #11]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6979      	ldr	r1, [r7, #20]
 8003d8c:	f003 fa72 	bl	8007274 <USB_EP0StartXfer>
 8003d90:	e008      	b.n	8003da4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6979      	ldr	r1, [r7, #20]
 8003da0:	f003 f820 	bl	8006de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d901      	bls.n	8003dcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e050      	b.n	8003e6e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da0f      	bge.n	8003df4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	3338      	adds	r3, #56	; 0x38
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	705a      	strb	r2, [r3, #1]
 8003df2:	e00d      	b.n	8003e10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_EP_SetStall+0x82>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e01e      	b.n	8003e6e <HAL_PCD_EP_SetStall+0xc0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fcb0 	bl	80077a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	b2d9      	uxtb	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f003 fe5e 	bl	8007b20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d901      	bls.n	8003e94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e042      	b.n	8003f1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da0f      	bge.n	8003ebc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3338      	adds	r3, #56	; 0x38
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	705a      	strb	r2, [r3, #1]
 8003eba:	e00f      	b.n	8003edc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_PCD_EP_ClrStall+0x86>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e00e      	b.n	8003f1a <HAL_PCD_EP_ClrStall+0xa4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 fcb8 	bl	8007880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da0c      	bge.n	8003f50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3338      	adds	r3, #56	; 0x38
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e00c      	b.n	8003f6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f003 fad7 	bl	8007524 <USB_EPStopXfer>
 8003f76:	4603      	mov	r3, r0
 8003f78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	3338      	adds	r3, #56	; 0x38
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3304      	adds	r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d901      	bls.n	8003fbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e06c      	b.n	8004096 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d902      	bls.n	8003fd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	3303      	adds	r3, #3
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fe0:	e02b      	b.n	800403a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d902      	bls.n	8003ffe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3303      	adds	r3, #3
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6919      	ldr	r1, [r3, #16]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004016:	b2db      	uxtb	r3, r3
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4603      	mov	r3, r0
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f003 fb2b 	bl	8007678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1a      	ldr	r2, [r3, #32]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	b29b      	uxth	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	d809      	bhi.n	8004064 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004058:	429a      	cmp	r2, r3
 800405a:	d203      	bcs.n	8004064 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1be      	bne.n	8003fe2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	429a      	cmp	r2, r3
 800406e:	d811      	bhi.n	8004094 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	2201      	movs	r2, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	43db      	mvns	r3, r3
 800408a:	6939      	ldr	r1, [r7, #16]
 800408c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004090:	4013      	ands	r3, r2
 8004092:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	333c      	adds	r3, #60	; 0x3c
 80040b8:	3304      	adds	r3, #4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d17b      	bne.n	80041ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4a61      	ldr	r2, [pc, #388]	; (8004268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	f240 80b9 	bls.w	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80b3 	beq.w	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004108:	6093      	str	r3, [r2, #8]
 800410a:	e0a7      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	461a      	mov	r2, r3
 8004124:	2320      	movs	r3, #32
 8004126:	6093      	str	r3, [r2, #8]
 8004128:	e098      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 8093 	bne.w	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4a4b      	ldr	r2, [pc, #300]	; (8004268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d90f      	bls.n	800415e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415a:	6093      	str	r3, [r2, #8]
 800415c:	e07e      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	3304      	adds	r3, #4
 8004172:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	0159      	lsls	r1, r3, #5
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	440b      	add	r3, r1
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d114      	bne.n	80041c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a8:	461a      	mov	r2, r3
 80041aa:	2101      	movs	r1, #1
 80041ac:	f003 fcb8 	bl	8007b20 <USB_EP0_OutStart>
 80041b0:	e006      	b.n	80041c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f004 fef1 	bl	8008fae <HAL_PCD_DataOutStageCallback>
 80041cc:	e046      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4a26      	ldr	r2, [pc, #152]	; (800426c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d124      	bne.n	8004220 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f2:	6093      	str	r3, [r2, #8]
 80041f4:	e032      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	2320      	movs	r3, #32
 8004210:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f004 fec8 	bl	8008fae <HAL_PCD_DataOutStageCallback>
 800421e:	e01d      	b.n	800425c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d114      	bne.n	8004250 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d108      	bne.n	8004250 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004248:	461a      	mov	r2, r3
 800424a:	2100      	movs	r1, #0
 800424c:	f003 fc68 	bl	8007b20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f004 fea9 	bl	8008fae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	4f54300a 	.word	0x4f54300a
 800426c:	4f54310a 	.word	0x4f54310a

08004270 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	333c      	adds	r3, #60	; 0x3c
 8004288:	3304      	adds	r3, #4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d90e      	bls.n	80042c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f004 fe60 	bl	8008f8a <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d90c      	bls.n	80042ec <PCD_EP_OutSetupPacket_int+0x7c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d108      	bne.n	80042ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e4:	461a      	mov	r2, r3
 80042e6:	2101      	movs	r1, #1
 80042e8:	f003 fc1a 	bl	8007b20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	4f54300a 	.word	0x4f54300a

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe f992 	bl	8002714 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe f98e 	bl	8002714 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f855 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe f8f2 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800a0dc 	.word	0x0800a0dc
 80044c0:	20000000 	.word	0x20000000
 80044c4:	20000008 	.word	0x20000008

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a9b      	lsrs	r3, r3, #10
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	0800a0ec 	.word	0x0800a0ec

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800450c:	f7ff ffdc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0b5b      	lsrs	r3, r3, #13
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	0800a0ec 	.word	0x0800a0ec

08004530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0ae      	sub	sp, #184	; 0xb8
 8004536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004556:	4bcb      	ldr	r3, [pc, #812]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b0c      	cmp	r3, #12
 8004560:	f200 8206 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x440>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	08004971 	.word	0x08004971
 8004574:	08004971 	.word	0x08004971
 8004578:	08004971 	.word	0x08004971
 800457c:	080045a9 	.word	0x080045a9
 8004580:	08004971 	.word	0x08004971
 8004584:	08004971 	.word	0x08004971
 8004588:	08004971 	.word	0x08004971
 800458c:	080045b1 	.word	0x080045b1
 8004590:	08004971 	.word	0x08004971
 8004594:	08004971 	.word	0x08004971
 8004598:	08004971 	.word	0x08004971
 800459c:	080047a1 	.word	0x080047a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4bb9      	ldr	r3, [pc, #740]	; (8004888 <HAL_RCC_GetSysClockFreq+0x358>)
 80045a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80045a6:	e1e7      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a8:	4bb8      	ldr	r3, [pc, #736]	; (800488c <HAL_RCC_GetSysClockFreq+0x35c>)
 80045aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045ae:	e1e3      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b0:	4bb4      	ldr	r3, [pc, #720]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045bc:	4bb1      	ldr	r3, [pc, #708]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d071      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c8:	4bae      	ldr	r3, [pc, #696]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80045d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	0159      	lsls	r1, r3, #5
 80045fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004600:	0150      	lsls	r0, r2, #5
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4621      	mov	r1, r4
 8004608:	1a51      	subs	r1, r2, r1
 800460a:	6439      	str	r1, [r7, #64]	; 0x40
 800460c:	4629      	mov	r1, r5
 800460e:	eb63 0301 	sbc.w	r3, r3, r1
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004620:	4649      	mov	r1, r9
 8004622:	018b      	lsls	r3, r1, #6
 8004624:	4641      	mov	r1, r8
 8004626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462a:	4641      	mov	r1, r8
 800462c:	018a      	lsls	r2, r1, #6
 800462e:	4641      	mov	r1, r8
 8004630:	1a51      	subs	r1, r2, r1
 8004632:	63b9      	str	r1, [r7, #56]	; 0x38
 8004634:	4649      	mov	r1, r9
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004648:	4649      	mov	r1, r9
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4641      	mov	r1, r8
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4622      	mov	r2, r4
 800465e:	189b      	adds	r3, r3, r2
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
 8004662:	462b      	mov	r3, r5
 8004664:	460a      	mov	r2, r1
 8004666:	eb42 0303 	adc.w	r3, r2, r3
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004678:	4629      	mov	r1, r5
 800467a:	024b      	lsls	r3, r1, #9
 800467c:	4621      	mov	r1, r4
 800467e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004682:	4621      	mov	r1, r4
 8004684:	024a      	lsls	r2, r1, #9
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004698:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800469c:	f7fc fab6 	bl	8000c0c <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046aa:	e067      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ac:	4b75      	ldr	r3, [pc, #468]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	099b      	lsrs	r3, r3, #6
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80046bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046c6:	2300      	movs	r3, #0
 80046c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80046ce:	4622      	mov	r2, r4
 80046d0:	462b      	mov	r3, r5
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	0159      	lsls	r1, r3, #5
 80046dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e0:	0150      	lsls	r0, r2, #5
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4621      	mov	r1, r4
 80046e8:	1a51      	subs	r1, r2, r1
 80046ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80046ec:	4629      	mov	r1, r5
 80046ee:	eb63 0301 	sbc.w	r3, r3, r1
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004700:	4649      	mov	r1, r9
 8004702:	018b      	lsls	r3, r1, #6
 8004704:	4641      	mov	r1, r8
 8004706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800470a:	4641      	mov	r1, r8
 800470c:	018a      	lsls	r2, r1, #6
 800470e:	4641      	mov	r1, r8
 8004710:	ebb2 0a01 	subs.w	sl, r2, r1
 8004714:	4649      	mov	r1, r9
 8004716:	eb63 0b01 	sbc.w	fp, r3, r1
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004726:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800472a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800472e:	4692      	mov	sl, r2
 8004730:	469b      	mov	fp, r3
 8004732:	4623      	mov	r3, r4
 8004734:	eb1a 0303 	adds.w	r3, sl, r3
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	462b      	mov	r3, r5
 800473c:	eb4b 0303 	adc.w	r3, fp, r3
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800474e:	4629      	mov	r1, r5
 8004750:	028b      	lsls	r3, r1, #10
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004758:	4621      	mov	r1, r4
 800475a:	028a      	lsls	r2, r1, #10
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004764:	2200      	movs	r2, #0
 8004766:	673b      	str	r3, [r7, #112]	; 0x70
 8004768:	677a      	str	r2, [r7, #116]	; 0x74
 800476a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800476e:	f7fc fa4d 	bl	8000c0c <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4613      	mov	r3, r2
 8004778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800477c:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	3301      	adds	r3, #1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800478e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800479e:	e0eb      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a0:	4b38      	ldr	r3, [pc, #224]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d06b      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	2200      	movs	r2, #0
 80047c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
 80047cc:	2300      	movs	r3, #0
 80047ce:	667b      	str	r3, [r7, #100]	; 0x64
 80047d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80047d4:	4622      	mov	r2, r4
 80047d6:	462b      	mov	r3, r5
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	0159      	lsls	r1, r3, #5
 80047e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e6:	0150      	lsls	r0, r2, #5
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4621      	mov	r1, r4
 80047ee:	1a51      	subs	r1, r2, r1
 80047f0:	61b9      	str	r1, [r7, #24]
 80047f2:	4629      	mov	r1, r5
 80047f4:	eb63 0301 	sbc.w	r3, r3, r1
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004806:	4659      	mov	r1, fp
 8004808:	018b      	lsls	r3, r1, #6
 800480a:	4651      	mov	r1, sl
 800480c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004810:	4651      	mov	r1, sl
 8004812:	018a      	lsls	r2, r1, #6
 8004814:	4651      	mov	r1, sl
 8004816:	ebb2 0801 	subs.w	r8, r2, r1
 800481a:	4659      	mov	r1, fp
 800481c:	eb63 0901 	sbc.w	r9, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004830:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004834:	4690      	mov	r8, r2
 8004836:	4699      	mov	r9, r3
 8004838:	4623      	mov	r3, r4
 800483a:	eb18 0303 	adds.w	r3, r8, r3
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	462b      	mov	r3, r5
 8004842:	eb49 0303 	adc.w	r3, r9, r3
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004854:	4629      	mov	r1, r5
 8004856:	024b      	lsls	r3, r1, #9
 8004858:	4621      	mov	r1, r4
 800485a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800485e:	4621      	mov	r1, r4
 8004860:	024a      	lsls	r2, r1, #9
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486a:	2200      	movs	r2, #0
 800486c:	65bb      	str	r3, [r7, #88]	; 0x58
 800486e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004874:	f7fc f9ca 	bl	8000c0c <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4613      	mov	r3, r2
 800487e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004882:	e065      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x420>
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004890:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_GetSysClockFreq+0x458>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	2200      	movs	r2, #0
 8004898:	4618      	mov	r0, r3
 800489a:	4611      	mov	r1, r2
 800489c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048a0:	653b      	str	r3, [r7, #80]	; 0x50
 80048a2:	2300      	movs	r3, #0
 80048a4:	657b      	str	r3, [r7, #84]	; 0x54
 80048a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80048aa:	4642      	mov	r2, r8
 80048ac:	464b      	mov	r3, r9
 80048ae:	f04f 0000 	mov.w	r0, #0
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	0159      	lsls	r1, r3, #5
 80048b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048bc:	0150      	lsls	r0, r2, #5
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4641      	mov	r1, r8
 80048c4:	1a51      	subs	r1, r2, r1
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	4649      	mov	r1, r9
 80048ca:	eb63 0301 	sbc.w	r3, r3, r1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048dc:	4659      	mov	r1, fp
 80048de:	018b      	lsls	r3, r1, #6
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e6:	4651      	mov	r1, sl
 80048e8:	018a      	lsls	r2, r1, #6
 80048ea:	4651      	mov	r1, sl
 80048ec:	1a54      	subs	r4, r2, r1
 80048ee:	4659      	mov	r1, fp
 80048f0:	eb63 0501 	sbc.w	r5, r3, r1
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	00eb      	lsls	r3, r5, #3
 80048fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004902:	00e2      	lsls	r2, r4, #3
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
 8004908:	4643      	mov	r3, r8
 800490a:	18e3      	adds	r3, r4, r3
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	464b      	mov	r3, r9
 8004910:	eb45 0303 	adc.w	r3, r5, r3
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004922:	4629      	mov	r1, r5
 8004924:	028b      	lsls	r3, r1, #10
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800492c:	4621      	mov	r1, r4
 800492e:	028a      	lsls	r2, r1, #10
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004938:	2200      	movs	r2, #0
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
 800493c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800493e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004942:	f7fc f963 	bl	8000c0c <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4613      	mov	r3, r2
 800494c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_RCC_GetSysClockFreq+0x458>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	0f1b      	lsrs	r3, r3, #28
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800495e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800496e:	e003      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800497c:	4618      	mov	r0, r3
 800497e:	37b8      	adds	r7, #184	; 0xb8
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	00f42400 	.word	0x00f42400

08004990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e28d      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8083 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049b0:	4b94      	ldr	r3, [pc, #592]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d019      	beq.n	80049f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049bc:	4b91      	ldr	r3, [pc, #580]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049c8:	4b8e      	ldr	r3, [pc, #568]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d4:	d00c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d6:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d112      	bne.n	8004a08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	4b84      	ldr	r3, [pc, #528]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x124>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d157      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e25a      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x90>
 8004a12:	4b7c      	ldr	r3, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a7b      	ldr	r2, [pc, #492]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0xcc>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0xb4>
 8004a2a:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a75      	ldr	r2, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0xcc>
 8004a44:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6e      	ldr	r2, [pc, #440]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a6b      	ldr	r2, [pc, #428]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fe56 	bl	8002714 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fe52 	bl	8002714 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	; 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e21f      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b61      	ldr	r3, [pc, #388]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0xdc>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fe42 	bl	8002714 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd fe3e 	bl	8002714 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e20b      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x104>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d06f      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ac2:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d017      	beq.n	8004afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ace:	4b4d      	ldr	r3, [pc, #308]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ada:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d11c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af2:	4b44      	ldr	r3, [pc, #272]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x186>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e1d3      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4937      	ldr	r1, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	e03a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b34:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <HAL_RCC_OscConfig+0x278>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fdeb 	bl	8002714 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fd fde7 	bl	8002714 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1b4      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4925      	ldr	r1, [pc, #148]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b76:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <HAL_RCC_OscConfig+0x278>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fdca 	bl	8002714 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fd fdc6 	bl	8002714 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e193      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d036      	beq.n	8004c1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbc:	f7fd fdaa 	bl	8002714 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7fd fda6 	bl	8002714 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e173      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x234>
 8004be2:	e01b      	b.n	8004c1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x27c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fd fd93 	bl	8002714 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	e00e      	b.n	8004c10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fd8f 	bl	8002714 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d907      	bls.n	8004c10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e15c      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470000 	.word	0x42470000
 8004c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c10:	4b8a      	ldr	r3, [pc, #552]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ea      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8097 	beq.w	8004d58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2e:	4b83      	ldr	r3, [pc, #524]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10f      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a7e      	ldr	r2, [pc, #504]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b7c      	ldr	r3, [pc, #496]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	4b79      	ldr	r3, [pc, #484]	; (8004e40 <HAL_RCC_OscConfig+0x4b0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d118      	bne.n	8004c98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x4b0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a75      	ldr	r2, [pc, #468]	; (8004e40 <HAL_RCC_OscConfig+0x4b0>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c72:	f7fd fd4f 	bl	8002714 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7a:	f7fd fd4b 	bl	8002714 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e118      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCC_OscConfig+0x4b0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x31e>
 8004ca0:	4b66      	ldr	r3, [pc, #408]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a65      	ldr	r2, [pc, #404]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	e01c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x358>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x340>
 8004cb6:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	4a60      	ldr	r2, [pc, #384]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a5d      	ldr	r2, [pc, #372]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0x358>
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	4a59      	ldr	r2, [pc, #356]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	6713      	str	r3, [r2, #112]	; 0x70
 8004cdc:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	4a56      	ldr	r2, [pc, #344]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004ce2:	f023 0304 	bic.w	r3, r3, #4
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf0:	f7fd fd10 	bl	8002714 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf8:	f7fd fd0c 	bl	8002714 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0d7      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ee      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x368>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fd fcfa 	bl	8002714 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d24:	f7fd fcf6 	bl	8002714 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0c1      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ee      	bne.n	8004d24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80ad 	beq.w	8004ebc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d060      	beq.n	8004e30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d145      	bne.n	8004e02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <HAL_RCC_OscConfig+0x4b4>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fcca 	bl	8002714 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fd fcc6 	bl	8002714 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e093      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	071b      	lsls	r3, r3, #28
 8004dce:	491b      	ldr	r1, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x4b4>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fd fc9b 	bl	8002714 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de2:	f7fd fc97 	bl	8002714 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e064      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x452>
 8004e00:	e05c      	b.n	8004ebc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCC_OscConfig+0x4b4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fc84 	bl	8002714 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd fc80 	bl	8002714 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e04d      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x480>
 8004e2e:	e045      	b.n	8004ebc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e040      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40007000 	.word	0x40007000
 8004e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <HAL_RCC_OscConfig+0x538>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d030      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d129      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d122      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d119      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	3b01      	subs	r3, #1
 8004e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d10f      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800

08004ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07b      	b.n	8004fd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eee:	d009      	beq.n	8004f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	61da      	str	r2, [r3, #28]
 8004ef6:	e005      	b.n	8004f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc ffd6 	bl	8001ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	ea42 0103 	orr.w	r1, r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 0104 	and.w	r1, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0210 	and.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b088      	sub	sp, #32
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_SPI_Transmit+0x22>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e126      	b.n	800524e <HAL_SPI_Transmit+0x270>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005008:	f7fd fb84 	bl	8002714 <HAL_GetTick>
 800500c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005022:	e10b      	b.n	800523c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Transmit+0x52>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005034:	e102      	b.n	800523c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2203      	movs	r2, #3
 800503a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d10f      	bne.n	800509e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800509c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c4:	d14b      	bne.n	800515e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_Transmit+0xf6>
 80050ce:	8afb      	ldrh	r3, [r7, #22]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d13e      	bne.n	8005152 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050f8:	e02b      	b.n	8005152 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d112      	bne.n	800512e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	86da      	strh	r2, [r3, #54]	; 0x36
 800512c:	e011      	b.n	8005152 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512e:	f7fd faf1 	bl	8002714 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d803      	bhi.n	8005146 <HAL_SPI_Transmit+0x168>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d102      	bne.n	800514c <HAL_SPI_Transmit+0x16e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005150:	e074      	b.n	800523c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ce      	bne.n	80050fa <HAL_SPI_Transmit+0x11c>
 800515c:	e04c      	b.n	80051f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_SPI_Transmit+0x18e>
 8005166:	8afb      	ldrh	r3, [r7, #22]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d140      	bne.n	80051ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	7812      	ldrb	r2, [r2, #0]
 8005178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005192:	e02c      	b.n	80051ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d113      	bne.n	80051ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80051c8:	e011      	b.n	80051ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ca:	f7fd faa3 	bl	8002714 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d803      	bhi.n	80051e2 <HAL_SPI_Transmit+0x204>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_Transmit+0x20a>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051ec:	e026      	b.n	800523c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1cd      	bne.n	8005194 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f9d1 	bl	80055a4 <SPI_EndRxTxTransaction>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e000      	b.n	800523c <HAL_SPI_Transmit+0x25e>
  }

error:
 800523a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800524c:	7ffb      	ldrb	r3, [r7, #31]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    return;
 800529a:	e0d7      	b.n	800544c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_SPI_IRQHandler+0x66>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
    return;
 80052bc:	e0c6      	b.n	800544c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_SPI_IRQHandler+0x8c>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80b4 	beq.w	800544c <HAL_SPI_IRQHandler+0x1f4>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80ad 	beq.w	800544c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d023      	beq.n	8005346 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d011      	beq.n	800532e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	e00b      	b.n	8005346 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	693b      	ldr	r3, [r7, #16]
        return;
 8005344:	e082      	b.n	800544c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	f043 0208 	orr.w	r2, r3, #8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d04f      	beq.n	800544a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_SPI_IRQHandler+0x17e>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d034      	beq.n	8005440 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0203 	bic.w	r2, r2, #3
 80053e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d011      	beq.n	8005412 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_SPI_IRQHandler+0x1fc>)
 80053f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fd fd19 	bl	8002e32 <HAL_DMA_Abort_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541e:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <HAL_SPI_IRQHandler+0x1fc>)
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005426:	4618      	mov	r0, r3
 8005428:	f7fd fd03 	bl	8002e32 <HAL_DMA_Abort_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800543e:	e003      	b.n	8005448 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f809 	bl	8005458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005446:	e000      	b.n	800544a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005448:	bf00      	nop
    return;
 800544a:	bf00      	nop
  }
}
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	0800546d 	.word	0x0800546d

08005458 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff ffe6 	bl	8005458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054a4:	f7fd f936 	bl	8002714 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054b4:	f7fd f92e 	bl	8002714 <HAL_GetTick>
 80054b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054ba:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	015b      	lsls	r3, r3, #5
 80054c0:	0d1b      	lsrs	r3, r3, #20
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ca:	e054      	b.n	8005576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d050      	beq.n	8005576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054d4:	f7fd f91e 	bl	8002714 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d902      	bls.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d13d      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005502:	d111      	bne.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550c:	d004      	beq.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d107      	bne.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005530:	d10f      	bne.n	8005552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e017      	b.n	8005596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3b01      	subs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d19b      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <SPI_EndRxTxTransaction+0x7c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <SPI_EndRxTxTransaction+0x80>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	0d5b      	lsrs	r3, r3, #21
 80055bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ce:	d112      	bne.n	80055f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	2180      	movs	r1, #128	; 0x80
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff ff5a 	bl	8005494 <SPI_WaitFlagStateUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e00f      	b.n	8005616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3b01      	subs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d0f2      	beq.n	80055f6 <SPI_EndRxTxTransaction+0x52>
 8005610:	e000      	b.n	8005614 <SPI_EndRxTxTransaction+0x70>
        break;
 8005612:	bf00      	nop
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000000 	.word	0x20000000
 8005624:	165e9f81 	.word	0x165e9f81

08005628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e041      	b.n	80056be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fc fdf8 	bl	8002244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 fcf0 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e04e      	b.n	800577e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a23      	ldr	r2, [pc, #140]	; (800578c <HAL_TIM_Base_Start_IT+0xc4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d022      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570a:	d01d      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <HAL_TIM_Base_Start_IT+0xc8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d018      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_TIM_Base_Start_IT+0xcc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d013      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_TIM_Base_Start_IT+0xd0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_TIM_Base_Start_IT+0xd4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x80>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d010      	beq.n	800577c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	e007      	b.n	800577c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40010400 	.word	0x40010400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40001800 	.word	0x40001800

080057a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e041      	b.n	800583e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f839 	bl	8005846 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f000 fc30 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_TIM_PWM_Start+0x24>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e022      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d109      	bne.n	800589a <HAL_TIM_PWM_Start+0x3e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e015      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d109      	bne.n	80058b4 <HAL_TIM_PWM_Start+0x58>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e008      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07c      	b.n	80059c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0x82>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start+0x92>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fdec 	bl	80064ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a2d      	ldr	r2, [pc, #180]	; (80059d0 <HAL_TIM_PWM_Start+0x174>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_TIM_PWM_Start+0xcc>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_TIM_PWM_Start+0x178>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d101      	bne.n	800592c <HAL_TIM_PWM_Start+0xd0>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_TIM_PWM_Start+0xd2>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005940:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <HAL_TIM_PWM_Start+0x174>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d01d      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_TIM_PWM_Start+0x17c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <HAL_TIM_PWM_Start+0x180>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIM_PWM_Start+0x184>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <HAL_TIM_PWM_Start+0x178>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_TIM_PWM_Start+0x188>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIM_PWM_Start+0x136>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_TIM_PWM_Start+0x18c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d111      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d010      	beq.n	80059c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	e007      	b.n	80059c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e097      	b.n	8005b30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f88f 	bl	8005b38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fb03 	bl	800604c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a8c:	f023 030c 	bic.w	r3, r3, #12
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	4313      	orrs	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d110      	bne.n	8005b9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d001      	beq.n	8005b8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e069      	b.n	8005c60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b9c:	e031      	b.n	8005c02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d110      	bne.n	8005bc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005baa:	7b3b      	ldrb	r3, [r7, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d001      	beq.n	8005bb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e055      	b.n	8005c60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc4:	e01d      	b.n	8005c02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d108      	bne.n	8005bde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	7b7b      	ldrb	r3, [r7, #13]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd8:	7b3b      	ldrb	r3, [r7, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e03e      	b.n	8005c60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_TIM_Encoder_Start+0xc4>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d008      	beq.n	8005c20 <HAL_TIM_Encoder_Start+0xd4>
 8005c0e:	e00f      	b.n	8005c30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2201      	movs	r2, #1
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fc67 	bl	80064ec <TIM_CCxChannelCmd>
      break;
 8005c1e:	e016      	b.n	8005c4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2201      	movs	r2, #1
 8005c26:	2104      	movs	r1, #4
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fc5f 	bl	80064ec <TIM_CCxChannelCmd>
      break;
 8005c2e:	e00e      	b.n	8005c4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fc57 	bl	80064ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	2104      	movs	r1, #4
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fc50 	bl	80064ec <TIM_CCxChannelCmd>
      break;
 8005c4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0202 	mvn.w	r2, #2
 8005c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9b0 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9a2 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9b3 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0204 	mvn.w	r2, #4
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f986 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f978 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f989 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0208 	mvn.w	r2, #8
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2204      	movs	r2, #4
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f95c 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f94e 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f95f 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2208      	movs	r2, #8
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f932 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f924 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f935 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc fb2c 	bl	8002444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fb99 	bl	800654a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8fa 	bl	8006038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0220 	mvn.w	r2, #32
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb63 	bl	8006536 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0ae      	b.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	f200 809f 	bhi.w	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005fe5 	.word	0x08005fe5
 8005eb4:	08005fe5 	.word	0x08005fe5
 8005eb8:	08005fe5 	.word	0x08005fe5
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005fe5 	.word	0x08005fe5
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	08005fe5 	.word	0x08005fe5
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005fe5 	.word	0x08005fe5
 8005ed4:	08005fe5 	.word	0x08005fe5
 8005ed8:	08005fe5 	.word	0x08005fe5
 8005edc:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f950 	bl	800618c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	619a      	str	r2, [r3, #24]
      break;
 8005f1e:	e064      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f9a0 	bl	800626c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	619a      	str	r2, [r3, #24]
      break;
 8005f60:	e043      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f9f5 	bl	8006358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0204 	bic.w	r2, r2, #4
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
      break;
 8005fa0:	e023      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fa49 	bl	8006440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3d      	ldr	r2, [pc, #244]	; (8006164 <TIM_Base_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3c      	ldr	r2, [pc, #240]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3b      	ldr	r2, [pc, #236]	; (800616c <TIM_Base_SetConfig+0x120>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <TIM_Base_SetConfig+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d027      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <TIM_Base_SetConfig+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d023      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <TIM_Base_SetConfig+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <TIM_Base_SetConfig+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d017      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	; (8006174 <TIM_Base_SetConfig+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a25      	ldr	r2, [pc, #148]	; (8006180 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a24      	ldr	r2, [pc, #144]	; (8006184 <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 0302 	bic.w	r3, r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a20      	ldr	r2, [pc, #128]	; (8006264 <TIM_OC1_SetConfig+0xd8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC1_SetConfig+0x64>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10c      	bne.n	800620a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0308 	bic.w	r3, r3, #8
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <TIM_OC1_SetConfig+0xd8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_OC1_SetConfig+0x8e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d111      	bne.n	800623e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400

0800626c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0210 	bic.w	r2, r3, #16
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a22      	ldr	r2, [pc, #136]	; (8006350 <TIM_OC2_SetConfig+0xe4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC2_SetConfig+0x68>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <TIM_OC2_SetConfig+0xe8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10d      	bne.n	80062f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC2_SetConfig+0xe4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x94>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a16      	ldr	r2, [pc, #88]	; (8006354 <TIM_OC2_SetConfig+0xe8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d113      	bne.n	8006328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40010000 	.word	0x40010000
 8006354:	40010400 	.word	0x40010400

08006358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <TIM_OC3_SetConfig+0xe0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC3_SetConfig+0x66>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <TIM_OC3_SetConfig+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a16      	ldr	r2, [pc, #88]	; (8006438 <TIM_OC3_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC3_SetConfig+0x92>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a15      	ldr	r2, [pc, #84]	; (800643c <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d113      	bne.n	8006412 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <TIM_OC4_SetConfig+0xa4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC4_SetConfig+0x68>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <TIM_OC4_SetConfig+0xa8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d109      	bne.n	80064bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	019b      	lsls	r3, r3, #6
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400

080064ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2201      	movs	r2, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	43db      	mvns	r3, r3
 800650e:	401a      	ands	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e03f      	b.n	80065f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d106      	bne.n	800658a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fb ffa1 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2224      	movs	r2, #36	; 0x24
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f828 	bl	80065f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065fc:	b0c0      	sub	sp, #256	; 0x100
 80065fe:	af00      	add	r7, sp, #0
 8006600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	68d9      	ldr	r1, [r3, #12]
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	ea40 0301 	orr.w	r3, r0, r1
 8006620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	431a      	orrs	r2, r3
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	431a      	orrs	r2, r3
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006650:	f021 010c 	bic.w	r1, r1, #12
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800665e:	430b      	orrs	r3, r1
 8006660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	6999      	ldr	r1, [r3, #24]
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	ea40 0301 	orr.w	r3, r0, r1
 800667e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b8f      	ldr	r3, [pc, #572]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006688:	429a      	cmp	r2, r3
 800668a:	d005      	beq.n	8006698 <UART_SetConfig+0xa0>
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b8d      	ldr	r3, [pc, #564]	; (80068c8 <UART_SetConfig+0x2d0>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d104      	bne.n	80066a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fd ff36 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 800669c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066a0:	e003      	b.n	80066aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fd ff1d 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80066a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	f040 810c 	bne.w	80068d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066ca:	4622      	mov	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	1891      	adds	r1, r2, r2
 80066d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80066d2:	415b      	adcs	r3, r3
 80066d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066da:	4621      	mov	r1, r4
 80066dc:	eb12 0801 	adds.w	r8, r2, r1
 80066e0:	4629      	mov	r1, r5
 80066e2:	eb43 0901 	adc.w	r9, r3, r1
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fa:	4690      	mov	r8, r2
 80066fc:	4699      	mov	r9, r3
 80066fe:	4623      	mov	r3, r4
 8006700:	eb18 0303 	adds.w	r3, r8, r3
 8006704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006708:	462b      	mov	r3, r5
 800670a:	eb49 0303 	adc.w	r3, r9, r3
 800670e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800671e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006726:	460b      	mov	r3, r1
 8006728:	18db      	adds	r3, r3, r3
 800672a:	653b      	str	r3, [r7, #80]	; 0x50
 800672c:	4613      	mov	r3, r2
 800672e:	eb42 0303 	adc.w	r3, r2, r3
 8006732:	657b      	str	r3, [r7, #84]	; 0x54
 8006734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800673c:	f7fa fa66 	bl	8000c0c <__aeabi_uldivmod>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <UART_SetConfig+0x2d4>)
 8006746:	fba3 2302 	umull	r2, r3, r3, r2
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	011c      	lsls	r4, r3, #4
 800674e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800675c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	1891      	adds	r1, r2, r2
 8006766:	64b9      	str	r1, [r7, #72]	; 0x48
 8006768:	415b      	adcs	r3, r3
 800676a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006770:	4641      	mov	r1, r8
 8006772:	eb12 0a01 	adds.w	sl, r2, r1
 8006776:	4649      	mov	r1, r9
 8006778:	eb43 0b01 	adc.w	fp, r3, r1
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800678c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006790:	4692      	mov	sl, r2
 8006792:	469b      	mov	fp, r3
 8006794:	4643      	mov	r3, r8
 8006796:	eb1a 0303 	adds.w	r3, sl, r3
 800679a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800679e:	464b      	mov	r3, r9
 80067a0:	eb4b 0303 	adc.w	r3, fp, r3
 80067a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067bc:	460b      	mov	r3, r1
 80067be:	18db      	adds	r3, r3, r3
 80067c0:	643b      	str	r3, [r7, #64]	; 0x40
 80067c2:	4613      	mov	r3, r2
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
 80067ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067d2:	f7fa fa1b 	bl	8000c0c <__aeabi_uldivmod>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <UART_SetConfig+0x2d4>)
 80067de:	fba3 2301 	umull	r2, r3, r3, r1
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2264      	movs	r2, #100	; 0x64
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	1acb      	subs	r3, r1, r3
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067f2:	4b36      	ldr	r3, [pc, #216]	; (80068cc <UART_SetConfig+0x2d4>)
 80067f4:	fba3 2302 	umull	r2, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006800:	441c      	add	r4, r3
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006806:	2200      	movs	r2, #0
 8006808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800680c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	1891      	adds	r1, r2, r2
 800681a:	63b9      	str	r1, [r7, #56]	; 0x38
 800681c:	415b      	adcs	r3, r3
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006824:	4641      	mov	r1, r8
 8006826:	1851      	adds	r1, r2, r1
 8006828:	6339      	str	r1, [r7, #48]	; 0x30
 800682a:	4649      	mov	r1, r9
 800682c:	414b      	adcs	r3, r1
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800683c:	4659      	mov	r1, fp
 800683e:	00cb      	lsls	r3, r1, #3
 8006840:	4651      	mov	r1, sl
 8006842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006846:	4651      	mov	r1, sl
 8006848:	00ca      	lsls	r2, r1, #3
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	4603      	mov	r3, r0
 8006850:	4642      	mov	r2, r8
 8006852:	189b      	adds	r3, r3, r2
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006858:	464b      	mov	r3, r9
 800685a:	460a      	mov	r2, r1
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006878:	460b      	mov	r3, r1
 800687a:	18db      	adds	r3, r3, r3
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
 800687e:	4613      	mov	r3, r2
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800688a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800688e:	f7fa f9bd 	bl	8000c0c <__aeabi_uldivmod>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <UART_SetConfig+0x2d4>)
 8006898:	fba3 1302 	umull	r1, r3, r3, r2
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	2164      	movs	r1, #100	; 0x64
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	3332      	adds	r3, #50	; 0x32
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <UART_SetConfig+0x2d4>)
 80068ac:	fba2 2303 	umull	r2, r3, r2, r3
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f003 0207 	and.w	r2, r3, #7
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4422      	add	r2, r4
 80068be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068c0:	e105      	b.n	8006ace <UART_SetConfig+0x4d6>
 80068c2:	bf00      	nop
 80068c4:	40011000 	.word	0x40011000
 80068c8:	40011400 	.word	0x40011400
 80068cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068e2:	4642      	mov	r2, r8
 80068e4:	464b      	mov	r3, r9
 80068e6:	1891      	adds	r1, r2, r2
 80068e8:	6239      	str	r1, [r7, #32]
 80068ea:	415b      	adcs	r3, r3
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068f2:	4641      	mov	r1, r8
 80068f4:	1854      	adds	r4, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb43 0501 	adc.w	r5, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	00eb      	lsls	r3, r5, #3
 8006906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800690a:	00e2      	lsls	r2, r4, #3
 800690c:	4614      	mov	r4, r2
 800690e:	461d      	mov	r5, r3
 8006910:	4643      	mov	r3, r8
 8006912:	18e3      	adds	r3, r4, r3
 8006914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006918:	464b      	mov	r3, r9
 800691a:	eb45 0303 	adc.w	r3, r5, r3
 800691e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800692e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800693e:	4629      	mov	r1, r5
 8006940:	008b      	lsls	r3, r1, #2
 8006942:	4621      	mov	r1, r4
 8006944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006948:	4621      	mov	r1, r4
 800694a:	008a      	lsls	r2, r1, #2
 800694c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006950:	f7fa f95c 	bl	8000c0c <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4b60      	ldr	r3, [pc, #384]	; (8006adc <UART_SetConfig+0x4e4>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	011c      	lsls	r4, r3, #4
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800696c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	61b9      	str	r1, [r7, #24]
 800697c:	415b      	adcs	r3, r3
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6139      	str	r1, [r7, #16]
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069dc:	4649      	mov	r1, r9
 80069de:	008b      	lsls	r3, r1, #2
 80069e0:	4641      	mov	r1, r8
 80069e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e6:	4641      	mov	r1, r8
 80069e8:	008a      	lsls	r2, r1, #2
 80069ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069ee:	f7fa f90d 	bl	8000c0c <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b39      	ldr	r3, [pc, #228]	; (8006adc <UART_SetConfig+0x4e4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a34      	ldr	r2, [pc, #208]	; (8006adc <UART_SetConfig+0x4e4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a16:	441c      	add	r4, r3
 8006a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a20:	677a      	str	r2, [r7, #116]	; 0x74
 8006a22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a26:	4642      	mov	r2, r8
 8006a28:	464b      	mov	r3, r9
 8006a2a:	1891      	adds	r1, r2, r2
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	415b      	adcs	r3, r3
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a36:	4641      	mov	r1, r8
 8006a38:	1851      	adds	r1, r2, r1
 8006a3a:	6039      	str	r1, [r7, #0]
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	414b      	adcs	r3, r1
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a4e:	4659      	mov	r1, fp
 8006a50:	00cb      	lsls	r3, r1, #3
 8006a52:	4651      	mov	r1, sl
 8006a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a58:	4651      	mov	r1, sl
 8006a5a:	00ca      	lsls	r2, r1, #3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4603      	mov	r3, r0
 8006a62:	4642      	mov	r2, r8
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a68:	464b      	mov	r3, r9
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	008b      	lsls	r3, r1, #2
 8006a8e:	4641      	mov	r1, r8
 8006a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a94:	4641      	mov	r1, r8
 8006a96:	008a      	lsls	r2, r1, #2
 8006a98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a9c:	f7fa f8b6 	bl	8000c0c <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <UART_SetConfig+0x4e4>)
 8006aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2164      	movs	r1, #100	; 0x64
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	; 0x32
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <UART_SetConfig+0x4e4>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4422      	add	r2, r4
 8006acc:	609a      	str	r2, [r3, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ada:	bf00      	nop
 8006adc:	51eb851f 	.word	0x51eb851f

08006ae0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d165      	bne.n	8006bc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a41      	ldr	r2, [pc, #260]	; (8006bfc <USB_SetTurnaroundTime+0x11c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d906      	bls.n	8006b0a <USB_SetTurnaroundTime+0x2a>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4a40      	ldr	r2, [pc, #256]	; (8006c00 <USB_SetTurnaroundTime+0x120>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d202      	bcs.n	8006b0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b04:	230f      	movs	r3, #15
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e062      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <USB_SetTurnaroundTime+0x120>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d306      	bcc.n	8006b20 <USB_SetTurnaroundTime+0x40>
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <USB_SetTurnaroundTime+0x124>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d202      	bcs.n	8006b20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b1a:	230e      	movs	r3, #14
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e057      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a38      	ldr	r2, [pc, #224]	; (8006c04 <USB_SetTurnaroundTime+0x124>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d306      	bcc.n	8006b36 <USB_SetTurnaroundTime+0x56>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4a37      	ldr	r2, [pc, #220]	; (8006c08 <USB_SetTurnaroundTime+0x128>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d202      	bcs.n	8006b36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b30:	230d      	movs	r3, #13
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e04c      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a33      	ldr	r2, [pc, #204]	; (8006c08 <USB_SetTurnaroundTime+0x128>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d306      	bcc.n	8006b4c <USB_SetTurnaroundTime+0x6c>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4a32      	ldr	r2, [pc, #200]	; (8006c0c <USB_SetTurnaroundTime+0x12c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d802      	bhi.n	8006b4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b46:	230c      	movs	r3, #12
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e041      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <USB_SetTurnaroundTime+0x12c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d906      	bls.n	8006b62 <USB_SetTurnaroundTime+0x82>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4a2e      	ldr	r2, [pc, #184]	; (8006c10 <USB_SetTurnaroundTime+0x130>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d802      	bhi.n	8006b62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b5c:	230b      	movs	r3, #11
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e036      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a2a      	ldr	r2, [pc, #168]	; (8006c10 <USB_SetTurnaroundTime+0x130>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d906      	bls.n	8006b78 <USB_SetTurnaroundTime+0x98>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	; (8006c14 <USB_SetTurnaroundTime+0x134>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d802      	bhi.n	8006b78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b72:	230a      	movs	r3, #10
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e02b      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <USB_SetTurnaroundTime+0x134>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d906      	bls.n	8006b8e <USB_SetTurnaroundTime+0xae>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <USB_SetTurnaroundTime+0x138>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d202      	bcs.n	8006b8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b88:	2309      	movs	r3, #9
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e020      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <USB_SetTurnaroundTime+0x138>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d306      	bcc.n	8006ba4 <USB_SetTurnaroundTime+0xc4>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <USB_SetTurnaroundTime+0x13c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d802      	bhi.n	8006ba4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e015      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4a1d      	ldr	r2, [pc, #116]	; (8006c1c <USB_SetTurnaroundTime+0x13c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d906      	bls.n	8006bba <USB_SetTurnaroundTime+0xda>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4a1c      	ldr	r2, [pc, #112]	; (8006c20 <USB_SetTurnaroundTime+0x140>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d202      	bcs.n	8006bba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bb4:	2307      	movs	r3, #7
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e00a      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bba:	2306      	movs	r3, #6
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e007      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bc6:	2309      	movs	r3, #9
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e001      	b.n	8006bd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bcc:	2309      	movs	r3, #9
 8006bce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	029b      	lsls	r3, r3, #10
 8006be4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	00d8acbf 	.word	0x00d8acbf
 8006c00:	00e4e1c0 	.word	0x00e4e1c0
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	01067380 	.word	0x01067380
 8006c0c:	011a499f 	.word	0x011a499f
 8006c10:	01312cff 	.word	0x01312cff
 8006c14:	014ca43f 	.word	0x014ca43f
 8006c18:	016e3600 	.word	0x016e3600
 8006c1c:	01a6ab1f 	.word	0x01a6ab1f
 8006c20:	01e84800 	.word	0x01e84800

08006c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <USB_FlushTxFifo+0x64>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e01b      	b.n	8006c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	daf2      	bge.n	8006c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	019b      	lsls	r3, r3, #6
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <USB_FlushTxFifo+0x64>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e006      	b.n	8006c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d0f0      	beq.n	8006c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	00030d40 	.word	0x00030d40

08006c8c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0306 	and.w	r3, r3, #6
 8006ca4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]
 8006cb0:	e00a      	b.n	8006cc8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d002      	beq.n	8006cbe <USB_GetDevSpeed+0x32>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b06      	cmp	r3, #6
 8006cbc:	d102      	bne.n	8006cc4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	75fb      	strb	r3, [r7, #23]
 8006cc2:	e001      	b.n	8006cc8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d13a      	bne.n	8006d68 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	2101      	movs	r1, #1
 8006d04:	fa01 f303 	lsl.w	r3, r1, r3
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d155      	bne.n	8006dd6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	791b      	ldrb	r3, [r3, #4]
 8006d44:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d46:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	059b      	lsls	r3, r3, #22
 8006d4c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e036      	b.n	8006dd6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	2101      	movs	r1, #1
 8006d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11a      	bne.n	8006dd6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	791b      	ldrb	r3, [r3, #4]
 8006dba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 815c 	bne.w	80070be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d132      	bne.n	8006e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6c:	0cdb      	lsrs	r3, r3, #19
 8006e6e:	04db      	lsls	r3, r3, #19
 8006e70:	6113      	str	r3, [r2, #16]
 8006e72:	e074      	b.n	8006f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e8e:	0cdb      	lsrs	r3, r3, #19
 8006e90:	04db      	lsls	r3, r3, #19
 8006e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	440b      	add	r3, r1
 8006ed0:	1e59      	subs	r1, r3, #1
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006edc:	4b9d      	ldr	r3, [pc, #628]	; (8007154 <USB_EPStartXfer+0x370>)
 8006ede:	400b      	ands	r3, r1
 8006ee0:	69b9      	ldr	r1, [r7, #24]
 8006ee2:	0148      	lsls	r0, r1, #5
 8006ee4:	69f9      	ldr	r1, [r7, #28]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006eec:	4313      	orrs	r3, r2
 8006eee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f06:	69b9      	ldr	r1, [r7, #24]
 8006f08:	0148      	lsls	r0, r1, #5
 8006f0a:	69f9      	ldr	r1, [r7, #28]
 8006f0c:	4401      	add	r1, r0
 8006f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f12:	4313      	orrs	r3, r2
 8006f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d11f      	bne.n	8006f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d14b      	bne.n	8006ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	791b      	ldrb	r3, [r3, #4]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d128      	bne.n	8006fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d110      	bne.n	8006fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e00f      	b.n	8006fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	0151      	lsls	r1, r2, #5
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	440a      	add	r2, r1
 8006fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e133      	b.n	8007264 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800701a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	791b      	ldrb	r3, [r3, #4]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d015      	beq.n	8007050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 811b 	beq.w	8007264 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	2101      	movs	r1, #1
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	69f9      	ldr	r1, [r7, #28]
 8007046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704a:	4313      	orrs	r3, r2
 800704c:	634b      	str	r3, [r1, #52]	; 0x34
 800704e:	e109      	b.n	8007264 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d110      	bne.n	8007082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e00f      	b.n	80070a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6919      	ldr	r1, [r3, #16]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	781a      	ldrb	r2, [r3, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	b298      	uxth	r0, r3
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	4603      	mov	r3, r0
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fade 	bl	8007678 <USB_WritePacket>
 80070bc:	e0d2      	b.n	8007264 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d8:	0cdb      	lsrs	r3, r3, #19
 80070da:	04db      	lsls	r3, r3, #19
 80070dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d126      	bne.n	8007158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	0148      	lsls	r0, r1, #5
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	4401      	add	r1, r0
 8007128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800712c:	4313      	orrs	r3, r2
 800712e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800714e:	6113      	str	r3, [r2, #16]
 8007150:	e03a      	b.n	80071c8 <USB_EPStartXfer+0x3e4>
 8007152:	bf00      	nop
 8007154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4413      	add	r3, r2
 8007162:	1e5a      	subs	r2, r3, #1
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	fbb2 f3f3 	udiv	r3, r2, r3
 800716c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	8afa      	ldrh	r2, [r7, #22]
 8007174:	fb03 f202 	mul.w	r2, r3, r2
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	8afb      	ldrh	r3, [r7, #22]
 800718c:	04d9      	lsls	r1, r3, #19
 800718e:	4b38      	ldr	r3, [pc, #224]	; (8007270 <USB_EPStartXfer+0x48c>)
 8007190:	400b      	ands	r3, r1
 8007192:	69b9      	ldr	r1, [r7, #24]
 8007194:	0148      	lsls	r0, r1, #5
 8007196:	69f9      	ldr	r1, [r7, #28]
 8007198:	4401      	add	r1, r0
 800719a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800719e:	4313      	orrs	r3, r2
 80071a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b8:	69b9      	ldr	r1, [r7, #24]
 80071ba:	0148      	lsls	r0, r1, #5
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	4401      	add	r1, r0
 80071c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071c4:	4313      	orrs	r3, r2
 80071c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d10d      	bne.n	80071ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6919      	ldr	r1, [r3, #16]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	460a      	mov	r2, r1
 80071e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d128      	bne.n	8007244 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d110      	bne.n	8007224 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	e00f      	b.n	8007244 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007242:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	1ff80000 	.word	0x1ff80000

08007274 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b01      	cmp	r3, #1
 8007292:	f040 80ce 	bne.w	8007432 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d132      	bne.n	8007304 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	0cdb      	lsrs	r3, r3, #19
 80072fe:	04db      	lsls	r3, r3, #19
 8007300:	6113      	str	r3, [r2, #16]
 8007302:	e04e      	b.n	80073a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	0cdb      	lsrs	r3, r3, #19
 8007320:	04db      	lsls	r3, r3, #19
 8007322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007346:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d903      	bls.n	800735c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800737a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007392:	6939      	ldr	r1, [r7, #16]
 8007394:	0148      	lsls	r0, r1, #5
 8007396:	6979      	ldr	r1, [r7, #20]
 8007398:	4401      	add	r1, r0
 800739a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800739e:	4313      	orrs	r3, r2
 80073a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d11e      	bne.n	80073e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	461a      	mov	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e097      	b.n	8007516 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007404:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8083 	beq.w	8007516 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	2101      	movs	r1, #1
 8007422:	fa01 f303 	lsl.w	r3, r1, r3
 8007426:	6979      	ldr	r1, [r7, #20]
 8007428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800742c:	4313      	orrs	r3, r2
 800742e:	634b      	str	r3, [r1, #52]	; 0x34
 8007430:	e071      	b.n	8007516 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744c:	0cdb      	lsrs	r3, r3, #19
 800744e:	04db      	lsls	r3, r3, #19
 8007450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800746c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007474:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c4:	6939      	ldr	r1, [r7, #16]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10d      	bne.n	80074f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6919      	ldr	r1, [r3, #16]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	460a      	mov	r2, r1
 80074f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d14a      	bne.n	80075d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800755a:	f040 8086 	bne.w	800766a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d902      	bls.n	80075bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ba:	e056      	b.n	800766a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d4:	d0e7      	beq.n	80075a6 <USB_EPStopXfer+0x82>
 80075d6:	e048      	b.n	800766a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f0:	d13b      	bne.n	800766a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	7812      	ldrb	r2, [r2, #0]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f242 7210 	movw	r2, #10000	; 0x2710
 8007646:	4293      	cmp	r3, r2
 8007648:	d902      	bls.n	8007650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
          break;
 800764e:	e00c      	b.n	800766a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007668:	d0e7      	beq.n	800763a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4611      	mov	r1, r2
 8007684:	461a      	mov	r2, r3
 8007686:	460b      	mov	r3, r1
 8007688:	71fb      	strb	r3, [r7, #7]
 800768a:	4613      	mov	r3, r2
 800768c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d123      	bne.n	80076e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800769e:	88bb      	ldrh	r3, [r7, #4]
 80076a0:	3303      	adds	r3, #3
 80076a2:	089b      	lsrs	r3, r3, #2
 80076a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e018      	b.n	80076de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	031a      	lsls	r2, r3, #12
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b8:	461a      	mov	r2, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3301      	adds	r3, #1
 80076ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3301      	adds	r3, #1
 80076d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3301      	adds	r3, #1
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3e2      	bcc.n	80076ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3724      	adds	r7, #36	; 0x24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b08b      	sub	sp, #44	; 0x2c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	089b      	lsrs	r3, r3, #2
 800770e:	b29b      	uxth	r3, r3
 8007710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	e014      	b.n	800774a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	601a      	str	r2, [r3, #0]
    pDest++;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	3301      	adds	r3, #1
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	3301      	adds	r3, #1
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	3301      	adds	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	3301      	adds	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	3301      	adds	r3, #1
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	429a      	cmp	r2, r3
 8007750:	d3e6      	bcc.n	8007720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007752:	8bfb      	ldrh	r3, [r7, #30]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01e      	beq.n	8007796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007762:	461a      	mov	r2, r3
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	b2da      	uxtb	r2, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	701a      	strb	r2, [r3, #0]
      i++;
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	3301      	adds	r3, #1
 8007782:	623b      	str	r3, [r7, #32]
      pDest++;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800778a:	8bfb      	ldrh	r3, [r7, #30]
 800778c:	3b01      	subs	r3, #1
 800778e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007790:	8bfb      	ldrh	r3, [r7, #30]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ea      	bne.n	800776c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007798:	4618      	mov	r0, r3
 800779a:	372c      	adds	r7, #44	; 0x2c
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d12c      	bne.n	800781a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	db12      	blt.n	80077f8 <USB_EPSetStall+0x54>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00f      	beq.n	80077f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	440a      	add	r2, r1
 800780e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e02b      	b.n	8007872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	db12      	blt.n	8007852 <USB_EPSetStall+0xae>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00f      	beq.n	8007852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d128      	bne.n	80078ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	791b      	ldrb	r3, [r3, #4]
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d003      	beq.n	80078cc <USB_EPClearStall+0x4c>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d138      	bne.n	800793e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e027      	b.n	800793e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	440a      	add	r2, r1
 8007904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800790c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	791b      	ldrb	r3, [r3, #4]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d003      	beq.n	800791e <USB_EPClearStall+0x9e>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	791b      	ldrb	r3, [r3, #4]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d10f      	bne.n	800793e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800796e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007986:	4313      	orrs	r3, r2
 8007988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	4013      	ands	r3, r2
 80079e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	0c1b      	lsrs	r3, r3, #16
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	4013      	ands	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	b29b      	uxth	r3, r3
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4013      	ands	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a54:	68bb      	ldr	r3, [r7, #8]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4013      	ands	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	f003 0301 	and.w	r3, r3, #1
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007af8:	f023 0307 	bic.w	r3, r3, #7
 8007afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	333c      	adds	r3, #60	; 0x3c
 8007b36:	3304      	adds	r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4a26      	ldr	r2, [pc, #152]	; (8007bd8 <USB_EP0_OutStart+0xb8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d90a      	bls.n	8007b5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b54:	d101      	bne.n	8007b5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e037      	b.n	8007bca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b60:	461a      	mov	r2, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b88:	f043 0318 	orr.w	r3, r3, #24
 8007b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ba0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10f      	bne.n	8007bc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	4f54300a 	.word	0x4f54300a

08007bdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	78fa      	ldrb	r2, [r7, #3]
 8007c16:	4611      	mov	r1, r2
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f8dc 	bl	8008e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c84:	461a      	mov	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d01a      	beq.n	8007cd0 <USBD_LL_SetupStage+0x72>
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d822      	bhi.n	8007ce4 <USBD_LL_SetupStage+0x86>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <USBD_LL_SetupStage+0x4a>
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d00a      	beq.n	8007cbc <USBD_LL_SetupStage+0x5e>
 8007ca6:	e01d      	b.n	8007ce4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fb09 	bl	80082c8 <USBD_StdDevReq>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cba:	e020      	b.n	8007cfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb71 	bl	80083ac <USBD_StdItfReq>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cce:	e016      	b.n	8007cfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fbd3 	bl	8008484 <USBD_StdEPReq>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce2:	e00c      	b.n	8007cfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fa60 	bl	80091b8 <USBD_LL_StallEP>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfc:	bf00      	nop
  }

  return ret;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	460b      	mov	r3, r1
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d16e      	bne.n	8007dfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f040 8098 	bne.w	8007e64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d913      	bls.n	8007d68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bf28      	it	cs
 8007d5a:	4613      	movcs	r3, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f001 f8db 	bl	8008f1c <USBD_CtlContinueRx>
 8007d66:	e07d      	b.n	8007e64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d014      	beq.n	8007da0 <USBD_LL_DataOutStage+0x98>
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d81d      	bhi.n	8007db6 <USBD_LL_DataOutStage+0xae>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <USBD_LL_DataOutStage+0x7c>
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d003      	beq.n	8007d8a <USBD_LL_DataOutStage+0x82>
 8007d82:	e018      	b.n	8007db6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	75bb      	strb	r3, [r7, #22]
            break;
 8007d88:	e018      	b.n	8007dbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	4619      	mov	r1, r3
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 fa5e 	bl	8008256 <USBD_CoreFindIF>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d9e:	e00d      	b.n	8007dbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fa60 	bl	8008270 <USBD_CoreFindEP>
 8007db0:	4603      	mov	r3, r0
 8007db2:	75bb      	strb	r3, [r7, #22]
            break;
 8007db4:	e002      	b.n	8007dbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75bb      	strb	r3, [r7, #22]
            break;
 8007dba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dbc:	7dbb      	ldrb	r3, [r7, #22]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d119      	bne.n	8007df6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d113      	bne.n	8007df6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	; 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dde:	7dba      	ldrb	r2, [r7, #22]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007de6:	7dba      	ldrb	r2, [r7, #22]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 f8a1 	bl	8008f3e <USBD_CtlSendStatus>
 8007dfc:	e032      	b.n	8007e64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	4619      	mov	r1, r3
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fa31 	bl	8008270 <USBD_CoreFindEP>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
 8007e14:	2bff      	cmp	r3, #255	; 0xff
 8007e16:	d025      	beq.n	8007e64 <USBD_LL_DataOutStage+0x15c>
 8007e18:	7dbb      	ldrb	r3, [r7, #22]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d122      	bne.n	8007e64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d117      	bne.n	8007e5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	32ae      	adds	r2, #174	; 0xae
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00f      	beq.n	8007e5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e3a:	7dba      	ldrb	r2, [r7, #22]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e42:	7dba      	ldrb	r2, [r7, #22]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	32ae      	adds	r2, #174	; 0xae
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	7afa      	ldrb	r2, [r7, #11]
 8007e50:	4611      	mov	r1, r2
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	e000      	b.n	8007e66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b086      	sub	sp, #24
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	460b      	mov	r3, r1
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d16f      	bne.n	8007f62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3314      	adds	r3, #20
 8007e86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d15a      	bne.n	8007f48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d914      	bls.n	8007ec8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 f820 	bl	8008efa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f001 fa23 	bl	800930c <USBD_LL_PrepareReceive>
 8007ec6:	e03f      	b.n	8007f48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d11c      	bne.n	8007f0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d316      	bcc.n	8007f0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20f      	bcs.n	8007f0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f001 f801 	bl	8008efa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f00:	2300      	movs	r3, #0
 8007f02:	2200      	movs	r2, #0
 8007f04:	2100      	movs	r1, #0
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f001 fa00 	bl	800930c <USBD_LL_PrepareReceive>
 8007f0c:	e01c      	b.n	8007f48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d10f      	bne.n	8007f3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 f93b 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 f80e 	bl	8008f64 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d03a      	beq.n	8007fc8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff fe42 	bl	8007bdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f60:	e032      	b.n	8007fc8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f97f 	bl	8008270 <USBD_CoreFindEP>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2bff      	cmp	r3, #255	; 0xff
 8007f7a:	d025      	beq.n	8007fc8 <USBD_LL_DataInStage+0x15a>
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d122      	bne.n	8007fc8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d11c      	bne.n	8007fc8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d014      	beq.n	8007fc8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f9e:	7dfa      	ldrb	r2, [r7, #23]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007fa6:	7dfa      	ldrb	r2, [r7, #23]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	32ae      	adds	r2, #174	; 0xae
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	7afa      	ldrb	r2, [r7, #11]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	4798      	blx	r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fbe:	7dbb      	ldrb	r3, [r7, #22]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fc4:	7dbb      	ldrb	r3, [r7, #22]
 8007fc6:	e000      	b.n	8007fca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d014      	beq.n	8008038 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6852      	ldr	r2, [r2, #4]
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	4611      	mov	r1, r2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008034:	2303      	movs	r3, #3
 8008036:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	2200      	movs	r2, #0
 800803c:	2100      	movs	r1, #0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f894 	bl	800916c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	2200      	movs	r2, #0
 8008058:	2180      	movs	r1, #128	; 0x80
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f886 	bl	800916c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2240      	movs	r2, #64	; 0x40
 800806a:	621a      	str	r2, [r3, #32]

  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2204      	movs	r2, #4
 80080b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d106      	bne.n	80080e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b03      	cmp	r3, #3
 8008104:	d110      	bne.n	8008128 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32ae      	adds	r2, #174	; 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e01c      	b.n	800818e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d115      	bne.n	800818c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	32ae      	adds	r2, #174	; 0xae
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	32ae      	adds	r2, #174	; 0xae
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32ae      	adds	r2, #174	; 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e01c      	b.n	80081f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d115      	bne.n	80081f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	32ae      	adds	r2, #174	; 0xae
 80081ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	; 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	4611      	mov	r1, r2
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00e      	beq.n	800824c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6852      	ldr	r2, [r2, #4]
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	4611      	mov	r1, r2
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008262:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800827c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3301      	adds	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082a8:	8a3b      	ldrh	r3, [r7, #16]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	b21a      	sxth	r2, r3
 80082ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b21b      	sxth	r3, r3
 80082b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082b8:	89fb      	ldrh	r3, [r7, #14]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d005      	beq.n	80082ee <USBD_StdDevReq+0x26>
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d857      	bhi.n	8008396 <USBD_StdDevReq+0xce>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00f      	beq.n	800830a <USBD_StdDevReq+0x42>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d153      	bne.n	8008396 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	32ae      	adds	r2, #174	; 0xae
 80082f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	e04a      	b.n	80083a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b09      	cmp	r3, #9
 8008310:	d83b      	bhi.n	800838a <USBD_StdDevReq+0xc2>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USBD_StdDevReq+0x50>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800836d 	.word	0x0800836d
 800831c:	08008381 	.word	0x08008381
 8008320:	0800838b 	.word	0x0800838b
 8008324:	08008377 	.word	0x08008377
 8008328:	0800838b 	.word	0x0800838b
 800832c:	0800834b 	.word	0x0800834b
 8008330:	08008341 	.word	0x08008341
 8008334:	0800838b 	.word	0x0800838b
 8008338:	08008363 	.word	0x08008363
 800833c:	08008355 	.word	0x08008355
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa3c 	bl	80087c0 <USBD_GetDescriptor>
          break;
 8008348:	e024      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fbcb 	bl	8008ae8 <USBD_SetAddress>
          break;
 8008352:	e01f      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc0a 	bl	8008b70 <USBD_SetConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
          break;
 8008360:	e018      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fcad 	bl	8008cc4 <USBD_GetConfig>
          break;
 800836a:	e013      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fcde 	bl	8008d30 <USBD_GetStatus>
          break;
 8008374:	e00e      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fd0d 	bl	8008d98 <USBD_SetFeature>
          break;
 800837e:	e009      	b.n	8008394 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fd31 	bl	8008dea <USBD_ClrFeature>
          break;
 8008388:	e004      	b.n	8008394 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fd88 	bl	8008ea2 <USBD_CtlError>
          break;
 8008392:	bf00      	nop
      }
      break;
 8008394:	e004      	b.n	80083a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fd82 	bl	8008ea2 <USBD_CtlError>
      break;
 800839e:	bf00      	nop
  }

  return ret;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d005      	beq.n	80083d2 <USBD_StdItfReq+0x26>
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d852      	bhi.n	8008470 <USBD_StdItfReq+0xc4>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <USBD_StdItfReq+0x26>
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d14e      	bne.n	8008470 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d840      	bhi.n	8008462 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	889b      	ldrh	r3, [r3, #4]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d836      	bhi.n	8008458 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	889b      	ldrh	r3, [r3, #4]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff ff2f 	bl	8008256 <USBD_CoreFindIF>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2bff      	cmp	r3, #255	; 0xff
 8008400:	d01d      	beq.n	800843e <USBD_StdItfReq+0x92>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11a      	bne.n	800843e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008408:	7bba      	ldrb	r2, [r7, #14]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	32ae      	adds	r2, #174	; 0xae
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00f      	beq.n	8008438 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008418:	7bba      	ldrb	r2, [r7, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008420:	7bba      	ldrb	r2, [r7, #14]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	32ae      	adds	r2, #174	; 0xae
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008436:	e004      	b.n	8008442 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800843c:	e001      	b.n	8008442 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d110      	bne.n	800846c <USBD_StdItfReq+0xc0>
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10d      	bne.n	800846c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fd74 	bl	8008f3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008456:	e009      	b.n	800846c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fd21 	bl	8008ea2 <USBD_CtlError>
          break;
 8008460:	e004      	b.n	800846c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fd1c 	bl	8008ea2 <USBD_CtlError>
          break;
 800846a:	e000      	b.n	800846e <USBD_StdItfReq+0xc2>
          break;
 800846c:	bf00      	nop
      }
      break;
 800846e:	e004      	b.n	800847a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fd15 	bl	8008ea2 <USBD_CtlError>
      break;
 8008478:	bf00      	nop
  }

  return ret;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	889b      	ldrh	r3, [r3, #4]
 8008496:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	d007      	beq.n	80084b4 <USBD_StdEPReq+0x30>
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	f200 817f 	bhi.w	80087a8 <USBD_StdEPReq+0x324>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d02a      	beq.n	8008504 <USBD_StdEPReq+0x80>
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	f040 817a 	bne.w	80087a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fed9 	bl	8008270 <USBD_CoreFindEP>
 80084be:	4603      	mov	r3, r0
 80084c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084c2:	7b7b      	ldrb	r3, [r7, #13]
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	f000 8174 	beq.w	80087b2 <USBD_StdEPReq+0x32e>
 80084ca:	7b7b      	ldrb	r3, [r7, #13]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8170 	bne.w	80087b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084d2:	7b7a      	ldrb	r2, [r7, #13]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084da:	7b7a      	ldrb	r2, [r7, #13]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	32ae      	adds	r2, #174	; 0xae
 80084e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8163 	beq.w	80087b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084ec:	7b7a      	ldrb	r2, [r7, #13]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	32ae      	adds	r2, #174	; 0xae
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
 80084fe:	4603      	mov	r3, r0
 8008500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008502:	e156      	b.n	80087b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b03      	cmp	r3, #3
 800850a:	d008      	beq.n	800851e <USBD_StdEPReq+0x9a>
 800850c:	2b03      	cmp	r3, #3
 800850e:	f300 8145 	bgt.w	800879c <USBD_StdEPReq+0x318>
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 809b 	beq.w	800864e <USBD_StdEPReq+0x1ca>
 8008518:	2b01      	cmp	r3, #1
 800851a:	d03c      	beq.n	8008596 <USBD_StdEPReq+0x112>
 800851c:	e13e      	b.n	800879c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d002      	beq.n	8008530 <USBD_StdEPReq+0xac>
 800852a:	2b03      	cmp	r3, #3
 800852c:	d016      	beq.n	800855c <USBD_StdEPReq+0xd8>
 800852e:	e02c      	b.n	800858a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00d      	beq.n	8008552 <USBD_StdEPReq+0xce>
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	2b80      	cmp	r3, #128	; 0x80
 800853a:	d00a      	beq.n	8008552 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fe39 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fe35 	bl	80091b8 <USBD_LL_StallEP>
 800854e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008550:	e020      	b.n	8008594 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fca4 	bl	8008ea2 <USBD_CtlError>
              break;
 800855a:	e01b      	b.n	8008594 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	885b      	ldrh	r3, [r3, #2]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10e      	bne.n	8008582 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <USBD_StdEPReq+0xfe>
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b80      	cmp	r3, #128	; 0x80
 800856e:	d008      	beq.n	8008582 <USBD_StdEPReq+0xfe>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	88db      	ldrh	r3, [r3, #6]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d104      	bne.n	8008582 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fe1b 	bl	80091b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fcdb 	bl	8008f3e <USBD_CtlSendStatus>

              break;
 8008588:	e004      	b.n	8008594 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc88 	bl	8008ea2 <USBD_CtlError>
              break;
 8008592:	bf00      	nop
          }
          break;
 8008594:	e107      	b.n	80087a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d002      	beq.n	80085a8 <USBD_StdEPReq+0x124>
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d016      	beq.n	80085d4 <USBD_StdEPReq+0x150>
 80085a6:	e04b      	b.n	8008640 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00d      	beq.n	80085ca <USBD_StdEPReq+0x146>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b80      	cmp	r3, #128	; 0x80
 80085b2:	d00a      	beq.n	80085ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fdfd 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fdf9 	bl	80091b8 <USBD_LL_StallEP>
 80085c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085c8:	e040      	b.n	800864c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fc68 	bl	8008ea2 <USBD_CtlError>
              break;
 80085d2:	e03b      	b.n	800864c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	885b      	ldrh	r3, [r3, #2]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d136      	bne.n	800864a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fe03 	bl	80091f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fca4 	bl	8008f3e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff fe38 	bl	8008270 <USBD_CoreFindEP>
 8008600:	4603      	mov	r3, r0
 8008602:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008604:	7b7b      	ldrb	r3, [r7, #13]
 8008606:	2bff      	cmp	r3, #255	; 0xff
 8008608:	d01f      	beq.n	800864a <USBD_StdEPReq+0x1c6>
 800860a:	7b7b      	ldrb	r3, [r7, #13]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11c      	bne.n	800864a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008610:	7b7a      	ldrb	r2, [r7, #13]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008618:	7b7a      	ldrb	r2, [r7, #13]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32ae      	adds	r2, #174	; 0xae
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	32ae      	adds	r2, #174	; 0xae
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800863e:	e004      	b.n	800864a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fc2d 	bl	8008ea2 <USBD_CtlError>
              break;
 8008648:	e000      	b.n	800864c <USBD_StdEPReq+0x1c8>
              break;
 800864a:	bf00      	nop
          }
          break;
 800864c:	e0ab      	b.n	80087a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d002      	beq.n	8008660 <USBD_StdEPReq+0x1dc>
 800865a:	2b03      	cmp	r3, #3
 800865c:	d032      	beq.n	80086c4 <USBD_StdEPReq+0x240>
 800865e:	e097      	b.n	8008790 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <USBD_StdEPReq+0x1f2>
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b80      	cmp	r3, #128	; 0x80
 800866a:	d004      	beq.n	8008676 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc17 	bl	8008ea2 <USBD_CtlError>
                break;
 8008674:	e091      	b.n	800879a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867a:	2b00      	cmp	r3, #0
 800867c:	da0b      	bge.n	8008696 <USBD_StdEPReq+0x212>
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	3310      	adds	r3, #16
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	3304      	adds	r3, #4
 8008694:	e00b      	b.n	80086ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	3304      	adds	r3, #4
 80086ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2202      	movs	r2, #2
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc01 	bl	8008ec4 <USBD_CtlSendData>
              break;
 80086c2:	e06a      	b.n	800879a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da11      	bge.n	80086f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	f003 020f 	and.w	r2, r3, #15
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3324      	adds	r3, #36	; 0x24
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d117      	bne.n	8008716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fbda 	bl	8008ea2 <USBD_CtlError>
                  break;
 80086ee:	e054      	b.n	800879a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fbc7 	bl	8008ea2 <USBD_CtlError>
                  break;
 8008714:	e041      	b.n	800879a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	da0b      	bge.n	8008736 <USBD_StdEPReq+0x2b2>
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	3310      	adds	r3, #16
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	3304      	adds	r3, #4
 8008734:	e00b      	b.n	800874e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	3304      	adds	r3, #4
 800874e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <USBD_StdEPReq+0x2d8>
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b80      	cmp	r3, #128	; 0x80
 800875a:	d103      	bne.n	8008764 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e00e      	b.n	8008782 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fd63 	bl	8009234 <USBD_LL_IsStallEP>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2201      	movs	r2, #1
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e002      	b.n	8008782 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2202      	movs	r2, #2
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb9b 	bl	8008ec4 <USBD_CtlSendData>
              break;
 800878e:	e004      	b.n	800879a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb85 	bl	8008ea2 <USBD_CtlError>
              break;
 8008798:	bf00      	nop
          }
          break;
 800879a:	e004      	b.n	80087a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb7f 	bl	8008ea2 <USBD_CtlError>
          break;
 80087a4:	bf00      	nop
      }
      break;
 80087a6:	e005      	b.n	80087b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb79 	bl	8008ea2 <USBD_CtlError>
      break;
 80087b0:	e000      	b.n	80087b4 <USBD_StdEPReq+0x330>
      break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	2b0e      	cmp	r3, #14
 80087e2:	f200 8152 	bhi.w	8008a8a <USBD_GetDescriptor+0x2ca>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <USBD_GetDescriptor+0x2c>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	0800885d 	.word	0x0800885d
 80087f0:	08008875 	.word	0x08008875
 80087f4:	080088b5 	.word	0x080088b5
 80087f8:	08008a8b 	.word	0x08008a8b
 80087fc:	08008a8b 	.word	0x08008a8b
 8008800:	08008a2b 	.word	0x08008a2b
 8008804:	08008a57 	.word	0x08008a57
 8008808:	08008a8b 	.word	0x08008a8b
 800880c:	08008a8b 	.word	0x08008a8b
 8008810:	08008a8b 	.word	0x08008a8b
 8008814:	08008a8b 	.word	0x08008a8b
 8008818:	08008a8b 	.word	0x08008a8b
 800881c:	08008a8b 	.word	0x08008a8b
 8008820:	08008a8b 	.word	0x08008a8b
 8008824:	08008829 	.word	0x08008829
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800884a:	e126      	b.n	8008a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fb27 	bl	8008ea2 <USBD_CtlError>
        err++;
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	3301      	adds	r3, #1
 8008858:	72fb      	strb	r3, [r7, #11]
      break;
 800885a:	e11e      	b.n	8008a9a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
      break;
 8008872:	e112      	b.n	8008a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7c1b      	ldrb	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10d      	bne.n	8008898 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f107 0208 	add.w	r2, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	2202      	movs	r2, #2
 8008894:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008896:	e100      	b.n	8008a9a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	f107 0208 	add.w	r2, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e0f2      	b.n	8008a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	f200 80ac 	bhi.w	8008a18 <USBD_GetDescriptor+0x258>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <USBD_GetDescriptor+0x108>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088e1 	.word	0x080088e1
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008949 	.word	0x08008949
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	080089b1 	.word	0x080089b1
 80088dc:	080089e5 	.word	0x080089e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	f107 0108 	add.w	r1, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008902:	e091      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 facb 	bl	8008ea2 <USBD_CtlError>
            err++;
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	3301      	adds	r3, #1
 8008910:	72fb      	strb	r3, [r7, #11]
          break;
 8008912:	e089      	b.n	8008a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008936:	e077      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fab1 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
          break;
 8008946:	e06f      	b.n	8008a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896a:	e05d      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa97 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
          break;
 800897a:	e055      	b.n	8008a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e043      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa7d 	bl	8008ea2 <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e03b      	b.n	8008a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	7c12      	ldrb	r2, [r2, #16]
 80089c8:	f107 0108 	add.w	r1, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d2:	e029      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa63 	bl	8008ea2 <USBD_CtlError>
            err++;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	3301      	adds	r3, #1
 80089e0:	72fb      	strb	r3, [r7, #11]
          break;
 80089e2:	e021      	b.n	8008a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a06:	e00f      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa49 	bl	8008ea2 <USBD_CtlError>
            err++;
 8008a10:	7afb      	ldrb	r3, [r7, #11]
 8008a12:	3301      	adds	r3, #1
 8008a14:	72fb      	strb	r3, [r7, #11]
          break;
 8008a16:	e007      	b.n	8008a28 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa41 	bl	8008ea2 <USBD_CtlError>
          err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a26:	bf00      	nop
      }
      break;
 8008a28:	e037      	b.n	8008a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	7c1b      	ldrb	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3a:	f107 0208 	add.w	r2, r7, #8
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4798      	blx	r3
 8008a42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a44:	e029      	b.n	8008a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa2a 	bl	8008ea2 <USBD_CtlError>
        err++;
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	3301      	adds	r3, #1
 8008a52:	72fb      	strb	r3, [r7, #11]
      break;
 8008a54:	e021      	b.n	8008a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10d      	bne.n	8008a7a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4798      	blx	r3
 8008a6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	2207      	movs	r2, #7
 8008a76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a78:	e00f      	b.n	8008a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fa10 	bl	8008ea2 <USBD_CtlError>
        err++;
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	3301      	adds	r3, #1
 8008a86:	72fb      	strb	r3, [r7, #11]
      break;
 8008a88:	e007      	b.n	8008a9a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa08 	bl	8008ea2 <USBD_CtlError>
      err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
      break;
 8008a98:	bf00      	nop
  }

  if (err != 0U)
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11e      	bne.n	8008ade <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	88db      	ldrh	r3, [r3, #6]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d016      	beq.n	8008ad6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008aa8:	893b      	ldrh	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	88da      	ldrh	r2, [r3, #6]
 8008ab2:	893b      	ldrh	r3, [r7, #8]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	bf28      	it	cs
 8008ab8:	4613      	movcs	r3, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008abe:	893b      	ldrh	r3, [r7, #8]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9fd 	bl	8008ec4 <USBD_CtlSendData>
 8008aca:	e009      	b.n	8008ae0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9e7 	bl	8008ea2 <USBD_CtlError>
 8008ad4:	e004      	b.n	8008ae0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa31 	bl	8008f3e <USBD_CtlSendStatus>
 8008adc:	e000      	b.n	8008ae0 <USBD_GetDescriptor+0x320>
    return;
 8008ade:	bf00      	nop
  }
}
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop

08008ae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	889b      	ldrh	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d131      	bne.n	8008b5e <USBD_SetAddress+0x76>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d12d      	bne.n	8008b5e <USBD_SetAddress+0x76>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	885b      	ldrh	r3, [r3, #2]
 8008b06:	2b7f      	cmp	r3, #127	; 0x7f
 8008b08:	d829      	bhi.n	8008b5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d104      	bne.n	8008b2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f9bc 	bl	8008ea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2a:	e01d      	b.n	8008b68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7bfa      	ldrb	r2, [r7, #15]
 8008b30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fba7 	bl	800928c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9fd 	bl	8008f3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b52:	e009      	b.n	8008b68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5c:	e004      	b.n	8008b68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f99e 	bl	8008ea2 <USBD_CtlError>
  }
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	4b4e      	ldr	r3, [pc, #312]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b88:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d905      	bls.n	8008b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f985 	bl	8008ea2 <USBD_CtlError>
    return USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e08c      	b.n	8008cb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d002      	beq.n	8008bae <USBD_SetConfig+0x3e>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d029      	beq.n	8008c00 <USBD_SetConfig+0x90>
 8008bac:	e075      	b.n	8008c9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bae:	4b44      	ldr	r3, [pc, #272]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d020      	beq.n	8008bf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bb6:	4b42      	ldr	r3, [pc, #264]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc0:	4b3f      	ldr	r3, [pc, #252]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff f813 	bl	8007bf2 <USBD_SetClassConfig>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d008      	beq.n	8008be8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f962 	bl	8008ea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008be6:	e065      	b.n	8008cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9a8 	bl	8008f3e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bf6:	e05d      	b.n	8008cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9a0 	bl	8008f3e <USBD_CtlSendStatus>
      break;
 8008bfe:	e059      	b.n	8008cb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c00:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d112      	bne.n	8008c2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c10:	4b2b      	ldr	r3, [pc, #172]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c1a:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff f802 	bl	8007c2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f989 	bl	8008f3e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2c:	e042      	b.n	8008cb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c2e:	4b24      	ldr	r3, [pc, #144]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d02a      	beq.n	8008c92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe fff0 	bl	8007c2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c54:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe ffc9 	bl	8007bf2 <USBD_SetClassConfig>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00f      	beq.n	8008c8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f918 	bl	8008ea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fe ffd5 	bl	8007c2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c88:	e014      	b.n	8008cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f957 	bl	8008f3e <USBD_CtlSendStatus>
      break;
 8008c90:	e010      	b.n	8008cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f953 	bl	8008f3e <USBD_CtlSendStatus>
      break;
 8008c98:	e00c      	b.n	8008cb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f900 	bl	8008ea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ca2:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <USBD_SetConfig+0x150>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fe ffbe 	bl	8007c2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb2:	bf00      	nop
  }

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000468 	.word	0x20000468

08008cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	88db      	ldrh	r3, [r3, #6]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d004      	beq.n	8008ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8e2 	bl	8008ea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cde:	e023      	b.n	8008d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	dc02      	bgt.n	8008cf2 <USBD_GetConfig+0x2e>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dc03      	bgt.n	8008cf8 <USBD_GetConfig+0x34>
 8008cf0:	e015      	b.n	8008d1e <USBD_GetConfig+0x5a>
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d00b      	beq.n	8008d0e <USBD_GetConfig+0x4a>
 8008cf6:	e012      	b.n	8008d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3308      	adds	r3, #8
 8008d02:	2201      	movs	r2, #1
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f8dc 	bl	8008ec4 <USBD_CtlSendData>
        break;
 8008d0c:	e00c      	b.n	8008d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3304      	adds	r3, #4
 8008d12:	2201      	movs	r2, #1
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8d4 	bl	8008ec4 <USBD_CtlSendData>
        break;
 8008d1c:	e004      	b.n	8008d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8be 	bl	8008ea2 <USBD_CtlError>
        break;
 8008d26:	bf00      	nop
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d81e      	bhi.n	8008d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d004      	beq.n	8008d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8a5 	bl	8008ea2 <USBD_CtlError>
        break;
 8008d58:	e01a      	b.n	8008d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f043 0202 	orr.w	r2, r3, #2
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f8a0 	bl	8008ec4 <USBD_CtlSendData>
      break;
 8008d84:	e004      	b.n	8008d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f88a 	bl	8008ea2 <USBD_CtlError>
      break;
 8008d8e:	bf00      	nop
  }
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d107      	bne.n	8008dba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f8c3 	bl	8008f3e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008db8:	e013      	b.n	8008de2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d10b      	bne.n	8008dda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	889b      	ldrh	r3, [r3, #4]
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8b3 	bl	8008f3e <USBD_CtlSendStatus>
}
 8008dd8:	e003      	b.n	8008de2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f860 	bl	8008ea2 <USBD_CtlError>
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d80b      	bhi.n	8008e1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d10c      	bne.n	8008e24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f893 	bl	8008f3e <USBD_CtlSendStatus>
      }
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f840 	bl	8008ea2 <USBD_CtlError>
      break;
 8008e22:	e000      	b.n	8008e26 <USBD_ClrFeature+0x3c>
      break;
 8008e24:	bf00      	nop
  }
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff fa16 	bl	800828a <SWAPBYTE>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	461a      	mov	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fa09 	bl	800828a <SWAPBYTE>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7ff f9fc 	bl	800828a <SWAPBYTE>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	80da      	strh	r2, [r3, #6]
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eac:	2180      	movs	r1, #128	; 0x80
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f982 	bl	80091b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f97e 	bl	80091b8 <USBD_LL_StallEP>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f9ed 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f9dc 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f9ec 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2200      	movs	r2, #0
 8008f52:	2100      	movs	r1, #0
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9b8 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2205      	movs	r2, #5
 8008f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f74:	2300      	movs	r3, #0
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f9c6 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f7fe fe5c 	bl	8007c5e <USBD_LL_SetupStage>
}
 8008fa6:	bf00      	nop
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	f7fe fe96 	bl	8007d08 <USBD_LL_DataOutStage>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	334c      	adds	r3, #76	; 0x4c
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	4619      	mov	r1, r3
 800900c:	f7fe ff2f 	bl	8007e6e <USBD_LL_DataInStage>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff f863 	bl	80080f2 <USBD_LL_SOF>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
 800904c:	e008      	b.n	8009060 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d102      	bne.n	800905c <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009056:	2301      	movs	r3, #1
 8009058:	73fb      	strb	r3, [r7, #15]
 800905a:	e001      	b.n	8009060 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800905c:	f7f8 fe10 	bl	8001c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009066:	7bfa      	ldrb	r2, [r7, #15]
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff f803 	bl	8008076 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe ffab 	bl	8007fd2 <USBD_LL_Reset>
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe ffff 	bl	8008096 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <HAL_PCD_SuspendCallback+0x48>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	4a03      	ldr	r2, [pc, #12]	; (80090cc <HAL_PCD_SuspendCallback+0x48>)
 80090be:	f043 0306 	orr.w	r3, r3, #6
 80090c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed00 	.word	0xe000ed00

080090d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe ffef 	bl	80080c2 <USBD_LL_Resume>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff f847 	bl	8008196 <USBD_LL_IsoOUTIncomplete>
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff f803 	bl	8008132 <USBD_LL_IsoINIncomplete>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff f859 	bl	80081fa <USBD_LL_DevConnected>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff f856 	bl	8008210 <USBD_LL_DevDisconnected>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	461a      	mov	r2, r3
 800917a:	4603      	mov	r3, r0
 800917c:	70fb      	strb	r3, [r7, #3]
 800917e:	460b      	mov	r3, r1
 8009180:	70bb      	strb	r3, [r7, #2]
 8009182:	4613      	mov	r3, r2
 8009184:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009194:	78bb      	ldrb	r3, [r7, #2]
 8009196:	883a      	ldrh	r2, [r7, #0]
 8009198:	78f9      	ldrb	r1, [r7, #3]
 800919a:	f7fa fd0b 	bl	8003bb4 <HAL_PCD_EP_Open>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f921 	bl	80093ec <USBD_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fa fde9 	bl	8003dae <HAL_PCD_EP_SetStall>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f902 	bl	80093ec <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7fa fe2e 	bl	8003e76 <HAL_PCD_EP_ClrStall>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f8e3 	bl	80093ec <USBD_Get_USB_Status>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922a:	7bbb      	ldrb	r3, [r7, #14]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009246:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	333e      	adds	r3, #62	; 0x3e
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	e00b      	b.n	8009280 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800927e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fa fc5d 	bl	8003b6a <HAL_PCD_SetAddress>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f898 	bl	80093ec <USBD_Get_USB_Status>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092e8:	7af9      	ldrb	r1, [r7, #11]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f7fa fd14 	bl	8003d1a <HAL_PCD_EP_Transmit>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f877 	bl	80093ec <USBD_Get_USB_Status>
 80092fe:	4603      	mov	r3, r0
 8009300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009302:	7dbb      	ldrb	r3, [r7, #22]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	460b      	mov	r3, r1
 800931a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800932a:	7af9      	ldrb	r1, [r7, #11]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f7fa fca8 	bl	8003c84 <HAL_PCD_EP_Receive>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f856 	bl	80093ec <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009344:	7dbb      	ldrb	r3, [r7, #22]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_PCDEx_LPM_Callback+0x18>
 8009362:	2b01      	cmp	r3, #1
 8009364:	d01f      	beq.n	80093a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009366:	e03b      	b.n	80093e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009370:	f7f8 fc1a 	bl	8001ba8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009374:	4b1c      	ldr	r3, [pc, #112]	; (80093e8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	4a1b      	ldr	r2, [pc, #108]	; (80093e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800937a:	f023 0306 	bic.w	r3, r3, #6
 800937e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fe8f 	bl	80080c2 <USBD_LL_Resume>
    break;
 80093a4:	e01c      	b.n	80093e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093b8:	f043 0301 	orr.w	r3, r3, #1
 80093bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fe66 	bl	8008096 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	4a04      	ldr	r2, [pc, #16]	; (80093e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80093d8:	f043 0306 	orr.w	r3, r3, #6
 80093dc:	6113      	str	r3, [r2, #16]
    break;
 80093de:	bf00      	nop
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	e000ed00 	.word	0xe000ed00

080093ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d817      	bhi.n	8009430 <USBD_Get_USB_Status+0x44>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBD_Get_USB_Status+0x1c>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009419 	.word	0x08009419
 800940c:	0800941f 	.word	0x0800941f
 8009410:	08009425 	.word	0x08009425
 8009414:	0800942b 	.word	0x0800942b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
    break;
 800941c:	e00b      	b.n	8009436 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800941e:	2303      	movs	r3, #3
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e008      	b.n	8009436 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
    break;
 8009428:	e005      	b.n	8009436 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800942a:	2303      	movs	r3, #3
 800942c:	73fb      	strb	r3, [r7, #15]
    break;
 800942e:	e002      	b.n	8009436 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009430:	2303      	movs	r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
    break;
 8009434:	bf00      	nop
  }
  return usb_status;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <__errno>:
 8009444:	4b01      	ldr	r3, [pc, #4]	; (800944c <__errno+0x8>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000010 	.word	0x20000010

08009450 <__libc_init_array>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4d0d      	ldr	r5, [pc, #52]	; (8009488 <__libc_init_array+0x38>)
 8009454:	4c0d      	ldr	r4, [pc, #52]	; (800948c <__libc_init_array+0x3c>)
 8009456:	1b64      	subs	r4, r4, r5
 8009458:	10a4      	asrs	r4, r4, #2
 800945a:	2600      	movs	r6, #0
 800945c:	42a6      	cmp	r6, r4
 800945e:	d109      	bne.n	8009474 <__libc_init_array+0x24>
 8009460:	4d0b      	ldr	r5, [pc, #44]	; (8009490 <__libc_init_array+0x40>)
 8009462:	4c0c      	ldr	r4, [pc, #48]	; (8009494 <__libc_init_array+0x44>)
 8009464:	f000 fe20 	bl	800a0a8 <_init>
 8009468:	1b64      	subs	r4, r4, r5
 800946a:	10a4      	asrs	r4, r4, #2
 800946c:	2600      	movs	r6, #0
 800946e:	42a6      	cmp	r6, r4
 8009470:	d105      	bne.n	800947e <__libc_init_array+0x2e>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	f855 3b04 	ldr.w	r3, [r5], #4
 8009478:	4798      	blx	r3
 800947a:	3601      	adds	r6, #1
 800947c:	e7ee      	b.n	800945c <__libc_init_array+0xc>
 800947e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009482:	4798      	blx	r3
 8009484:	3601      	adds	r6, #1
 8009486:	e7f2      	b.n	800946e <__libc_init_array+0x1e>
 8009488:	0800a27c 	.word	0x0800a27c
 800948c:	0800a27c 	.word	0x0800a27c
 8009490:	0800a27c 	.word	0x0800a27c
 8009494:	0800a280 	.word	0x0800a280

08009498 <memset>:
 8009498:	4402      	add	r2, r0
 800949a:	4603      	mov	r3, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <siscanf>:
 80094a8:	b40e      	push	{r1, r2, r3}
 80094aa:	b510      	push	{r4, lr}
 80094ac:	b09f      	sub	sp, #124	; 0x7c
 80094ae:	ac21      	add	r4, sp, #132	; 0x84
 80094b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80094b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80094be:	9004      	str	r0, [sp, #16]
 80094c0:	9008      	str	r0, [sp, #32]
 80094c2:	f7f6 fea5 	bl	8000210 <strlen>
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <siscanf+0x50>)
 80094c8:	9005      	str	r0, [sp, #20]
 80094ca:	9009      	str	r0, [sp, #36]	; 0x24
 80094cc:	930d      	str	r3, [sp, #52]	; 0x34
 80094ce:	480b      	ldr	r0, [pc, #44]	; (80094fc <siscanf+0x54>)
 80094d0:	9a01      	ldr	r2, [sp, #4]
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9403      	str	r4, [sp, #12]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9311      	str	r3, [sp, #68]	; 0x44
 80094da:	9316      	str	r3, [sp, #88]	; 0x58
 80094dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	4623      	mov	r3, r4
 80094e8:	f000 f866 	bl	80095b8 <__ssvfiscanf_r>
 80094ec:	b01f      	add	sp, #124	; 0x7c
 80094ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f2:	b003      	add	sp, #12
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	08009501 	.word	0x08009501
 80094fc:	20000010 	.word	0x20000010

08009500 <__seofread>:
 8009500:	2000      	movs	r0, #0
 8009502:	4770      	bx	lr

08009504 <_sungetc_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	1c4b      	adds	r3, r1, #1
 8009508:	4614      	mov	r4, r2
 800950a:	d103      	bne.n	8009514 <_sungetc_r+0x10>
 800950c:	f04f 35ff 	mov.w	r5, #4294967295
 8009510:	4628      	mov	r0, r5
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	8993      	ldrh	r3, [r2, #12]
 8009516:	f023 0320 	bic.w	r3, r3, #32
 800951a:	8193      	strh	r3, [r2, #12]
 800951c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800951e:	6852      	ldr	r2, [r2, #4]
 8009520:	b2cd      	uxtb	r5, r1
 8009522:	b18b      	cbz	r3, 8009548 <_sungetc_r+0x44>
 8009524:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009526:	4293      	cmp	r3, r2
 8009528:	dd08      	ble.n	800953c <_sungetc_r+0x38>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	6022      	str	r2, [r4, #0]
 8009530:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	e7e9      	b.n	8009510 <_sungetc_r+0xc>
 800953c:	4621      	mov	r1, r4
 800953e:	f000 fc35 	bl	8009dac <__submore>
 8009542:	2800      	cmp	r0, #0
 8009544:	d0f1      	beq.n	800952a <_sungetc_r+0x26>
 8009546:	e7e1      	b.n	800950c <_sungetc_r+0x8>
 8009548:	6921      	ldr	r1, [r4, #16]
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	b151      	cbz	r1, 8009564 <_sungetc_r+0x60>
 800954e:	4299      	cmp	r1, r3
 8009550:	d208      	bcs.n	8009564 <_sungetc_r+0x60>
 8009552:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009556:	42a9      	cmp	r1, r5
 8009558:	d104      	bne.n	8009564 <_sungetc_r+0x60>
 800955a:	3b01      	subs	r3, #1
 800955c:	3201      	adds	r2, #1
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	6062      	str	r2, [r4, #4]
 8009562:	e7d5      	b.n	8009510 <_sungetc_r+0xc>
 8009564:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800956c:	6363      	str	r3, [r4, #52]	; 0x34
 800956e:	2303      	movs	r3, #3
 8009570:	63a3      	str	r3, [r4, #56]	; 0x38
 8009572:	4623      	mov	r3, r4
 8009574:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	2301      	movs	r3, #1
 800957c:	e7dc      	b.n	8009538 <_sungetc_r+0x34>

0800957e <__ssrefill_r>:
 800957e:	b510      	push	{r4, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009584:	b169      	cbz	r1, 80095a2 <__ssrefill_r+0x24>
 8009586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800958a:	4299      	cmp	r1, r3
 800958c:	d001      	beq.n	8009592 <__ssrefill_r+0x14>
 800958e:	f000 fc57 	bl	8009e40 <_free_r>
 8009592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	2000      	movs	r0, #0
 8009598:	6360      	str	r0, [r4, #52]	; 0x34
 800959a:	b113      	cbz	r3, 80095a2 <__ssrefill_r+0x24>
 800959c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	bd10      	pop	{r4, pc}
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	2300      	movs	r3, #0
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f043 0320 	orr.w	r3, r3, #32
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
 80095b6:	e7f3      	b.n	80095a0 <__ssrefill_r+0x22>

080095b8 <__ssvfiscanf_r>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80095c2:	2100      	movs	r1, #0
 80095c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80095c8:	49a6      	ldr	r1, [pc, #664]	; (8009864 <__ssvfiscanf_r+0x2ac>)
 80095ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80095cc:	f10d 0804 	add.w	r8, sp, #4
 80095d0:	49a5      	ldr	r1, [pc, #660]	; (8009868 <__ssvfiscanf_r+0x2b0>)
 80095d2:	4fa6      	ldr	r7, [pc, #664]	; (800986c <__ssvfiscanf_r+0x2b4>)
 80095d4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009870 <__ssvfiscanf_r+0x2b8>
 80095d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80095dc:	4606      	mov	r6, r0
 80095de:	91a1      	str	r1, [sp, #644]	; 0x284
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	7813      	ldrb	r3, [r2, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 815a 	beq.w	800989e <__ssvfiscanf_r+0x2e6>
 80095ea:	5dd9      	ldrb	r1, [r3, r7]
 80095ec:	f011 0108 	ands.w	r1, r1, #8
 80095f0:	f102 0501 	add.w	r5, r2, #1
 80095f4:	d019      	beq.n	800962a <__ssvfiscanf_r+0x72>
 80095f6:	6863      	ldr	r3, [r4, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dd0f      	ble.n	800961c <__ssvfiscanf_r+0x64>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	5cba      	ldrb	r2, [r7, r2]
 8009602:	0712      	lsls	r2, r2, #28
 8009604:	d401      	bmi.n	800960a <__ssvfiscanf_r+0x52>
 8009606:	462a      	mov	r2, r5
 8009608:	e7eb      	b.n	80095e2 <__ssvfiscanf_r+0x2a>
 800960a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800960c:	3201      	adds	r2, #1
 800960e:	9245      	str	r2, [sp, #276]	; 0x114
 8009610:	6862      	ldr	r2, [r4, #4]
 8009612:	3301      	adds	r3, #1
 8009614:	3a01      	subs	r2, #1
 8009616:	6062      	str	r2, [r4, #4]
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	e7ec      	b.n	80095f6 <__ssvfiscanf_r+0x3e>
 800961c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800961e:	4621      	mov	r1, r4
 8009620:	4630      	mov	r0, r6
 8009622:	4798      	blx	r3
 8009624:	2800      	cmp	r0, #0
 8009626:	d0e9      	beq.n	80095fc <__ssvfiscanf_r+0x44>
 8009628:	e7ed      	b.n	8009606 <__ssvfiscanf_r+0x4e>
 800962a:	2b25      	cmp	r3, #37	; 0x25
 800962c:	d012      	beq.n	8009654 <__ssvfiscanf_r+0x9c>
 800962e:	469a      	mov	sl, r3
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f340 8091 	ble.w	800975a <__ssvfiscanf_r+0x1a2>
 8009638:	6822      	ldr	r2, [r4, #0]
 800963a:	7813      	ldrb	r3, [r2, #0]
 800963c:	4553      	cmp	r3, sl
 800963e:	f040 812e 	bne.w	800989e <__ssvfiscanf_r+0x2e6>
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	3b01      	subs	r3, #1
 8009646:	6063      	str	r3, [r4, #4]
 8009648:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800964a:	3201      	adds	r2, #1
 800964c:	3301      	adds	r3, #1
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	9345      	str	r3, [sp, #276]	; 0x114
 8009652:	e7d8      	b.n	8009606 <__ssvfiscanf_r+0x4e>
 8009654:	9141      	str	r1, [sp, #260]	; 0x104
 8009656:	9143      	str	r1, [sp, #268]	; 0x10c
 8009658:	7853      	ldrb	r3, [r2, #1]
 800965a:	2b2a      	cmp	r3, #42	; 0x2a
 800965c:	bf02      	ittt	eq
 800965e:	2310      	moveq	r3, #16
 8009660:	1c95      	addeq	r5, r2, #2
 8009662:	9341      	streq	r3, [sp, #260]	; 0x104
 8009664:	220a      	movs	r2, #10
 8009666:	46aa      	mov	sl, r5
 8009668:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800966c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009670:	2b09      	cmp	r3, #9
 8009672:	d91d      	bls.n	80096b0 <__ssvfiscanf_r+0xf8>
 8009674:	487e      	ldr	r0, [pc, #504]	; (8009870 <__ssvfiscanf_r+0x2b8>)
 8009676:	2203      	movs	r2, #3
 8009678:	f7f6 fdd2 	bl	8000220 <memchr>
 800967c:	b140      	cbz	r0, 8009690 <__ssvfiscanf_r+0xd8>
 800967e:	2301      	movs	r3, #1
 8009680:	eba0 0009 	sub.w	r0, r0, r9
 8009684:	fa03 f000 	lsl.w	r0, r3, r0
 8009688:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800968a:	4318      	orrs	r0, r3
 800968c:	9041      	str	r0, [sp, #260]	; 0x104
 800968e:	4655      	mov	r5, sl
 8009690:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009694:	2b78      	cmp	r3, #120	; 0x78
 8009696:	d806      	bhi.n	80096a6 <__ssvfiscanf_r+0xee>
 8009698:	2b57      	cmp	r3, #87	; 0x57
 800969a:	d810      	bhi.n	80096be <__ssvfiscanf_r+0x106>
 800969c:	2b25      	cmp	r3, #37	; 0x25
 800969e:	d0c6      	beq.n	800962e <__ssvfiscanf_r+0x76>
 80096a0:	d856      	bhi.n	8009750 <__ssvfiscanf_r+0x198>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d064      	beq.n	8009770 <__ssvfiscanf_r+0x1b8>
 80096a6:	2303      	movs	r3, #3
 80096a8:	9347      	str	r3, [sp, #284]	; 0x11c
 80096aa:	230a      	movs	r3, #10
 80096ac:	9342      	str	r3, [sp, #264]	; 0x108
 80096ae:	e071      	b.n	8009794 <__ssvfiscanf_r+0x1dc>
 80096b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80096b2:	fb02 1103 	mla	r1, r2, r3, r1
 80096b6:	3930      	subs	r1, #48	; 0x30
 80096b8:	9143      	str	r1, [sp, #268]	; 0x10c
 80096ba:	4655      	mov	r5, sl
 80096bc:	e7d3      	b.n	8009666 <__ssvfiscanf_r+0xae>
 80096be:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80096c2:	2a20      	cmp	r2, #32
 80096c4:	d8ef      	bhi.n	80096a6 <__ssvfiscanf_r+0xee>
 80096c6:	a101      	add	r1, pc, #4	; (adr r1, 80096cc <__ssvfiscanf_r+0x114>)
 80096c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096cc:	0800977f 	.word	0x0800977f
 80096d0:	080096a7 	.word	0x080096a7
 80096d4:	080096a7 	.word	0x080096a7
 80096d8:	080097dd 	.word	0x080097dd
 80096dc:	080096a7 	.word	0x080096a7
 80096e0:	080096a7 	.word	0x080096a7
 80096e4:	080096a7 	.word	0x080096a7
 80096e8:	080096a7 	.word	0x080096a7
 80096ec:	080096a7 	.word	0x080096a7
 80096f0:	080096a7 	.word	0x080096a7
 80096f4:	080096a7 	.word	0x080096a7
 80096f8:	080097f3 	.word	0x080097f3
 80096fc:	080097c9 	.word	0x080097c9
 8009700:	08009757 	.word	0x08009757
 8009704:	08009757 	.word	0x08009757
 8009708:	08009757 	.word	0x08009757
 800970c:	080096a7 	.word	0x080096a7
 8009710:	080097cd 	.word	0x080097cd
 8009714:	080096a7 	.word	0x080096a7
 8009718:	080096a7 	.word	0x080096a7
 800971c:	080096a7 	.word	0x080096a7
 8009720:	080096a7 	.word	0x080096a7
 8009724:	08009803 	.word	0x08009803
 8009728:	080097d5 	.word	0x080097d5
 800972c:	08009777 	.word	0x08009777
 8009730:	080096a7 	.word	0x080096a7
 8009734:	080096a7 	.word	0x080096a7
 8009738:	080097ff 	.word	0x080097ff
 800973c:	080096a7 	.word	0x080096a7
 8009740:	080097c9 	.word	0x080097c9
 8009744:	080096a7 	.word	0x080096a7
 8009748:	080096a7 	.word	0x080096a7
 800974c:	0800977f 	.word	0x0800977f
 8009750:	3b45      	subs	r3, #69	; 0x45
 8009752:	2b02      	cmp	r3, #2
 8009754:	d8a7      	bhi.n	80096a6 <__ssvfiscanf_r+0xee>
 8009756:	2305      	movs	r3, #5
 8009758:	e01b      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 800975a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800975c:	4621      	mov	r1, r4
 800975e:	4630      	mov	r0, r6
 8009760:	4798      	blx	r3
 8009762:	2800      	cmp	r0, #0
 8009764:	f43f af68 	beq.w	8009638 <__ssvfiscanf_r+0x80>
 8009768:	9844      	ldr	r0, [sp, #272]	; 0x110
 800976a:	2800      	cmp	r0, #0
 800976c:	f040 808d 	bne.w	800988a <__ssvfiscanf_r+0x2d2>
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	e08f      	b.n	8009896 <__ssvfiscanf_r+0x2de>
 8009776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009778:	f042 0220 	orr.w	r2, r2, #32
 800977c:	9241      	str	r2, [sp, #260]	; 0x104
 800977e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009784:	9241      	str	r2, [sp, #260]	; 0x104
 8009786:	2210      	movs	r2, #16
 8009788:	2b6f      	cmp	r3, #111	; 0x6f
 800978a:	9242      	str	r2, [sp, #264]	; 0x108
 800978c:	bf34      	ite	cc
 800978e:	2303      	movcc	r3, #3
 8009790:	2304      	movcs	r3, #4
 8009792:	9347      	str	r3, [sp, #284]	; 0x11c
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	dd42      	ble.n	8009820 <__ssvfiscanf_r+0x268>
 800979a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800979c:	0659      	lsls	r1, r3, #25
 800979e:	d404      	bmi.n	80097aa <__ssvfiscanf_r+0x1f2>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	5cba      	ldrb	r2, [r7, r2]
 80097a6:	0712      	lsls	r2, r2, #28
 80097a8:	d441      	bmi.n	800982e <__ssvfiscanf_r+0x276>
 80097aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	dc50      	bgt.n	8009852 <__ssvfiscanf_r+0x29a>
 80097b0:	466b      	mov	r3, sp
 80097b2:	4622      	mov	r2, r4
 80097b4:	a941      	add	r1, sp, #260	; 0x104
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 f876 	bl	80098a8 <_scanf_chars>
 80097bc:	2801      	cmp	r0, #1
 80097be:	d06e      	beq.n	800989e <__ssvfiscanf_r+0x2e6>
 80097c0:	2802      	cmp	r0, #2
 80097c2:	f47f af20 	bne.w	8009606 <__ssvfiscanf_r+0x4e>
 80097c6:	e7cf      	b.n	8009768 <__ssvfiscanf_r+0x1b0>
 80097c8:	220a      	movs	r2, #10
 80097ca:	e7dd      	b.n	8009788 <__ssvfiscanf_r+0x1d0>
 80097cc:	2300      	movs	r3, #0
 80097ce:	9342      	str	r3, [sp, #264]	; 0x108
 80097d0:	2303      	movs	r3, #3
 80097d2:	e7de      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 80097d4:	2308      	movs	r3, #8
 80097d6:	9342      	str	r3, [sp, #264]	; 0x108
 80097d8:	2304      	movs	r3, #4
 80097da:	e7da      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 80097dc:	4629      	mov	r1, r5
 80097de:	4640      	mov	r0, r8
 80097e0:	f000 f9b4 	bl	8009b4c <__sccl>
 80097e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ea:	9341      	str	r3, [sp, #260]	; 0x104
 80097ec:	4605      	mov	r5, r0
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7cf      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 80097f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f8:	9341      	str	r3, [sp, #260]	; 0x104
 80097fa:	2300      	movs	r3, #0
 80097fc:	e7c9      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 80097fe:	2302      	movs	r3, #2
 8009800:	e7c7      	b.n	8009792 <__ssvfiscanf_r+0x1da>
 8009802:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009804:	06c3      	lsls	r3, r0, #27
 8009806:	f53f aefe 	bmi.w	8009606 <__ssvfiscanf_r+0x4e>
 800980a:	9b00      	ldr	r3, [sp, #0]
 800980c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800980e:	1d19      	adds	r1, r3, #4
 8009810:	9100      	str	r1, [sp, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f010 0f01 	tst.w	r0, #1
 8009818:	bf14      	ite	ne
 800981a:	801a      	strhne	r2, [r3, #0]
 800981c:	601a      	streq	r2, [r3, #0]
 800981e:	e6f2      	b.n	8009606 <__ssvfiscanf_r+0x4e>
 8009820:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009822:	4621      	mov	r1, r4
 8009824:	4630      	mov	r0, r6
 8009826:	4798      	blx	r3
 8009828:	2800      	cmp	r0, #0
 800982a:	d0b6      	beq.n	800979a <__ssvfiscanf_r+0x1e2>
 800982c:	e79c      	b.n	8009768 <__ssvfiscanf_r+0x1b0>
 800982e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009830:	3201      	adds	r2, #1
 8009832:	9245      	str	r2, [sp, #276]	; 0x114
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	3a01      	subs	r2, #1
 8009838:	2a00      	cmp	r2, #0
 800983a:	6062      	str	r2, [r4, #4]
 800983c:	dd02      	ble.n	8009844 <__ssvfiscanf_r+0x28c>
 800983e:	3301      	adds	r3, #1
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	e7ad      	b.n	80097a0 <__ssvfiscanf_r+0x1e8>
 8009844:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009846:	4621      	mov	r1, r4
 8009848:	4630      	mov	r0, r6
 800984a:	4798      	blx	r3
 800984c:	2800      	cmp	r0, #0
 800984e:	d0a7      	beq.n	80097a0 <__ssvfiscanf_r+0x1e8>
 8009850:	e78a      	b.n	8009768 <__ssvfiscanf_r+0x1b0>
 8009852:	2b04      	cmp	r3, #4
 8009854:	dc0e      	bgt.n	8009874 <__ssvfiscanf_r+0x2bc>
 8009856:	466b      	mov	r3, sp
 8009858:	4622      	mov	r2, r4
 800985a:	a941      	add	r1, sp, #260	; 0x104
 800985c:	4630      	mov	r0, r6
 800985e:	f000 f87d 	bl	800995c <_scanf_i>
 8009862:	e7ab      	b.n	80097bc <__ssvfiscanf_r+0x204>
 8009864:	08009505 	.word	0x08009505
 8009868:	0800957f 	.word	0x0800957f
 800986c:	0800a114 	.word	0x0800a114
 8009870:	0800a0f4 	.word	0x0800a0f4
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <__ssvfiscanf_r+0x2ec>)
 8009876:	2b00      	cmp	r3, #0
 8009878:	f43f aec5 	beq.w	8009606 <__ssvfiscanf_r+0x4e>
 800987c:	466b      	mov	r3, sp
 800987e:	4622      	mov	r2, r4
 8009880:	a941      	add	r1, sp, #260	; 0x104
 8009882:	4630      	mov	r0, r6
 8009884:	f3af 8000 	nop.w
 8009888:	e798      	b.n	80097bc <__ssvfiscanf_r+0x204>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009890:	bf18      	it	ne
 8009892:	f04f 30ff 	movne.w	r0, #4294967295
 8009896:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800989a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098a0:	e7f9      	b.n	8009896 <__ssvfiscanf_r+0x2de>
 80098a2:	bf00      	nop
 80098a4:	00000000 	.word	0x00000000

080098a8 <_scanf_chars>:
 80098a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ac:	4615      	mov	r5, r2
 80098ae:	688a      	ldr	r2, [r1, #8]
 80098b0:	4680      	mov	r8, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b932      	cbnz	r2, 80098c4 <_scanf_chars+0x1c>
 80098b6:	698a      	ldr	r2, [r1, #24]
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	bf0c      	ite	eq
 80098bc:	2201      	moveq	r2, #1
 80098be:	f04f 32ff 	movne.w	r2, #4294967295
 80098c2:	608a      	str	r2, [r1, #8]
 80098c4:	6822      	ldr	r2, [r4, #0]
 80098c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009958 <_scanf_chars+0xb0>
 80098ca:	06d1      	lsls	r1, r2, #27
 80098cc:	bf5f      	itttt	pl
 80098ce:	681a      	ldrpl	r2, [r3, #0]
 80098d0:	1d11      	addpl	r1, r2, #4
 80098d2:	6019      	strpl	r1, [r3, #0]
 80098d4:	6816      	ldrpl	r6, [r2, #0]
 80098d6:	2700      	movs	r7, #0
 80098d8:	69a0      	ldr	r0, [r4, #24]
 80098da:	b188      	cbz	r0, 8009900 <_scanf_chars+0x58>
 80098dc:	2801      	cmp	r0, #1
 80098de:	d107      	bne.n	80098f0 <_scanf_chars+0x48>
 80098e0:	682a      	ldr	r2, [r5, #0]
 80098e2:	7811      	ldrb	r1, [r2, #0]
 80098e4:	6962      	ldr	r2, [r4, #20]
 80098e6:	5c52      	ldrb	r2, [r2, r1]
 80098e8:	b952      	cbnz	r2, 8009900 <_scanf_chars+0x58>
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	d031      	beq.n	8009952 <_scanf_chars+0xaa>
 80098ee:	e022      	b.n	8009936 <_scanf_chars+0x8e>
 80098f0:	2802      	cmp	r0, #2
 80098f2:	d120      	bne.n	8009936 <_scanf_chars+0x8e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80098fc:	071b      	lsls	r3, r3, #28
 80098fe:	d41a      	bmi.n	8009936 <_scanf_chars+0x8e>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	06da      	lsls	r2, r3, #27
 8009904:	bf5e      	ittt	pl
 8009906:	682b      	ldrpl	r3, [r5, #0]
 8009908:	781b      	ldrbpl	r3, [r3, #0]
 800990a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800990e:	682a      	ldr	r2, [r5, #0]
 8009910:	686b      	ldr	r3, [r5, #4]
 8009912:	3201      	adds	r2, #1
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	68a2      	ldr	r2, [r4, #8]
 8009918:	3b01      	subs	r3, #1
 800991a:	3a01      	subs	r2, #1
 800991c:	606b      	str	r3, [r5, #4]
 800991e:	3701      	adds	r7, #1
 8009920:	60a2      	str	r2, [r4, #8]
 8009922:	b142      	cbz	r2, 8009936 <_scanf_chars+0x8e>
 8009924:	2b00      	cmp	r3, #0
 8009926:	dcd7      	bgt.n	80098d8 <_scanf_chars+0x30>
 8009928:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800992c:	4629      	mov	r1, r5
 800992e:	4640      	mov	r0, r8
 8009930:	4798      	blx	r3
 8009932:	2800      	cmp	r0, #0
 8009934:	d0d0      	beq.n	80098d8 <_scanf_chars+0x30>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	f013 0310 	ands.w	r3, r3, #16
 800993c:	d105      	bne.n	800994a <_scanf_chars+0xa2>
 800993e:	68e2      	ldr	r2, [r4, #12]
 8009940:	3201      	adds	r2, #1
 8009942:	60e2      	str	r2, [r4, #12]
 8009944:	69a2      	ldr	r2, [r4, #24]
 8009946:	b102      	cbz	r2, 800994a <_scanf_chars+0xa2>
 8009948:	7033      	strb	r3, [r6, #0]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	443b      	add	r3, r7
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	2000      	movs	r0, #0
 8009952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009956:	bf00      	nop
 8009958:	0800a114 	.word	0x0800a114

0800995c <_scanf_i>:
 800995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	4698      	mov	r8, r3
 8009962:	4b76      	ldr	r3, [pc, #472]	; (8009b3c <_scanf_i+0x1e0>)
 8009964:	460c      	mov	r4, r1
 8009966:	4682      	mov	sl, r0
 8009968:	4616      	mov	r6, r2
 800996a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800996e:	b087      	sub	sp, #28
 8009970:	ab03      	add	r3, sp, #12
 8009972:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009976:	4b72      	ldr	r3, [pc, #456]	; (8009b40 <_scanf_i+0x1e4>)
 8009978:	69a1      	ldr	r1, [r4, #24]
 800997a:	4a72      	ldr	r2, [pc, #456]	; (8009b44 <_scanf_i+0x1e8>)
 800997c:	2903      	cmp	r1, #3
 800997e:	bf18      	it	ne
 8009980:	461a      	movne	r2, r3
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	1e5a      	subs	r2, r3, #1
 8009988:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800998c:	bf88      	it	hi
 800998e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009992:	4627      	mov	r7, r4
 8009994:	bf82      	ittt	hi
 8009996:	eb03 0905 	addhi.w	r9, r3, r5
 800999a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800999e:	60a3      	strhi	r3, [r4, #8]
 80099a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80099a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80099a8:	bf98      	it	ls
 80099aa:	f04f 0900 	movls.w	r9, #0
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	463d      	mov	r5, r7
 80099b2:	f04f 0b00 	mov.w	fp, #0
 80099b6:	6831      	ldr	r1, [r6, #0]
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	7809      	ldrb	r1, [r1, #0]
 80099bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80099c0:	2202      	movs	r2, #2
 80099c2:	f7f6 fc2d 	bl	8000220 <memchr>
 80099c6:	b328      	cbz	r0, 8009a14 <_scanf_i+0xb8>
 80099c8:	f1bb 0f01 	cmp.w	fp, #1
 80099cc:	d159      	bne.n	8009a82 <_scanf_i+0x126>
 80099ce:	6862      	ldr	r2, [r4, #4]
 80099d0:	b92a      	cbnz	r2, 80099de <_scanf_i+0x82>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	2308      	movs	r3, #8
 80099d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	6822      	ldr	r2, [r4, #0]
 80099e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	68a2      	ldr	r2, [r4, #8]
 80099e8:	1e51      	subs	r1, r2, #1
 80099ea:	60a1      	str	r1, [r4, #8]
 80099ec:	b192      	cbz	r2, 8009a14 <_scanf_i+0xb8>
 80099ee:	6832      	ldr	r2, [r6, #0]
 80099f0:	1c51      	adds	r1, r2, #1
 80099f2:	6031      	str	r1, [r6, #0]
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	f805 2b01 	strb.w	r2, [r5], #1
 80099fa:	6872      	ldr	r2, [r6, #4]
 80099fc:	3a01      	subs	r2, #1
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	6072      	str	r2, [r6, #4]
 8009a02:	dc07      	bgt.n	8009a14 <_scanf_i+0xb8>
 8009a04:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	4790      	blx	r2
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f040 8085 	bne.w	8009b1e <_scanf_i+0x1c2>
 8009a14:	f10b 0b01 	add.w	fp, fp, #1
 8009a18:	f1bb 0f03 	cmp.w	fp, #3
 8009a1c:	d1cb      	bne.n	80099b6 <_scanf_i+0x5a>
 8009a1e:	6863      	ldr	r3, [r4, #4]
 8009a20:	b90b      	cbnz	r3, 8009a26 <_scanf_i+0xca>
 8009a22:	230a      	movs	r3, #10
 8009a24:	6063      	str	r3, [r4, #4]
 8009a26:	6863      	ldr	r3, [r4, #4]
 8009a28:	4947      	ldr	r1, [pc, #284]	; (8009b48 <_scanf_i+0x1ec>)
 8009a2a:	6960      	ldr	r0, [r4, #20]
 8009a2c:	1ac9      	subs	r1, r1, r3
 8009a2e:	f000 f88d 	bl	8009b4c <__sccl>
 8009a32:	f04f 0b00 	mov.w	fp, #0
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d03d      	beq.n	8009aba <_scanf_i+0x15e>
 8009a3e:	6831      	ldr	r1, [r6, #0]
 8009a40:	6960      	ldr	r0, [r4, #20]
 8009a42:	f891 c000 	ldrb.w	ip, [r1]
 8009a46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d035      	beq.n	8009aba <_scanf_i+0x15e>
 8009a4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009a52:	d124      	bne.n	8009a9e <_scanf_i+0x142>
 8009a54:	0510      	lsls	r0, r2, #20
 8009a56:	d522      	bpl.n	8009a9e <_scanf_i+0x142>
 8009a58:	f10b 0b01 	add.w	fp, fp, #1
 8009a5c:	f1b9 0f00 	cmp.w	r9, #0
 8009a60:	d003      	beq.n	8009a6a <_scanf_i+0x10e>
 8009a62:	3301      	adds	r3, #1
 8009a64:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a68:	60a3      	str	r3, [r4, #8]
 8009a6a:	6873      	ldr	r3, [r6, #4]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	6073      	str	r3, [r6, #4]
 8009a72:	dd1b      	ble.n	8009aac <_scanf_i+0x150>
 8009a74:	6833      	ldr	r3, [r6, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	68a3      	ldr	r3, [r4, #8]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60a3      	str	r3, [r4, #8]
 8009a80:	e7d9      	b.n	8009a36 <_scanf_i+0xda>
 8009a82:	f1bb 0f02 	cmp.w	fp, #2
 8009a86:	d1ae      	bne.n	80099e6 <_scanf_i+0x8a>
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a92:	d1bf      	bne.n	8009a14 <_scanf_i+0xb8>
 8009a94:	2310      	movs	r3, #16
 8009a96:	6063      	str	r3, [r4, #4]
 8009a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a9c:	e7a2      	b.n	80099e4 <_scanf_i+0x88>
 8009a9e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	780b      	ldrb	r3, [r1, #0]
 8009aa6:	f805 3b01 	strb.w	r3, [r5], #1
 8009aaa:	e7de      	b.n	8009a6a <_scanf_i+0x10e>
 8009aac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	4798      	blx	r3
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d0df      	beq.n	8009a7a <_scanf_i+0x11e>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	05db      	lsls	r3, r3, #23
 8009abe:	d50d      	bpl.n	8009adc <_scanf_i+0x180>
 8009ac0:	42bd      	cmp	r5, r7
 8009ac2:	d909      	bls.n	8009ad8 <_scanf_i+0x17c>
 8009ac4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009acc:	4632      	mov	r2, r6
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4798      	blx	r3
 8009ad2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ad6:	464d      	mov	r5, r9
 8009ad8:	42bd      	cmp	r5, r7
 8009ada:	d02d      	beq.n	8009b38 <_scanf_i+0x1dc>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	f012 0210 	ands.w	r2, r2, #16
 8009ae2:	d113      	bne.n	8009b0c <_scanf_i+0x1b0>
 8009ae4:	702a      	strb	r2, [r5, #0]
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	9e01      	ldr	r6, [sp, #4]
 8009aea:	4639      	mov	r1, r7
 8009aec:	4650      	mov	r0, sl
 8009aee:	47b0      	blx	r6
 8009af0:	6821      	ldr	r1, [r4, #0]
 8009af2:	f8d8 3000 	ldr.w	r3, [r8]
 8009af6:	f011 0f20 	tst.w	r1, #32
 8009afa:	d013      	beq.n	8009b24 <_scanf_i+0x1c8>
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	f8c8 2000 	str.w	r2, [r8]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6018      	str	r0, [r3, #0]
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60e3      	str	r3, [r4, #12]
 8009b0c:	1bed      	subs	r5, r5, r7
 8009b0e:	44ab      	add	fp, r5
 8009b10:	6925      	ldr	r5, [r4, #16]
 8009b12:	445d      	add	r5, fp
 8009b14:	6125      	str	r5, [r4, #16]
 8009b16:	2000      	movs	r0, #0
 8009b18:	b007      	add	sp, #28
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	f04f 0b00 	mov.w	fp, #0
 8009b22:	e7ca      	b.n	8009aba <_scanf_i+0x15e>
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	f8c8 2000 	str.w	r2, [r8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f011 0f01 	tst.w	r1, #1
 8009b30:	bf14      	ite	ne
 8009b32:	8018      	strhne	r0, [r3, #0]
 8009b34:	6018      	streq	r0, [r3, #0]
 8009b36:	e7e6      	b.n	8009b06 <_scanf_i+0x1aa>
 8009b38:	2001      	movs	r0, #1
 8009b3a:	e7ed      	b.n	8009b18 <_scanf_i+0x1bc>
 8009b3c:	0800a0d0 	.word	0x0800a0d0
 8009b40:	08009da9 	.word	0x08009da9
 8009b44:	08009cc1 	.word	0x08009cc1
 8009b48:	0800a111 	.word	0x0800a111

08009b4c <__sccl>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	780b      	ldrb	r3, [r1, #0]
 8009b50:	4604      	mov	r4, r0
 8009b52:	2b5e      	cmp	r3, #94	; 0x5e
 8009b54:	bf0b      	itete	eq
 8009b56:	784b      	ldrbeq	r3, [r1, #1]
 8009b58:	1c48      	addne	r0, r1, #1
 8009b5a:	1c88      	addeq	r0, r1, #2
 8009b5c:	2200      	movne	r2, #0
 8009b5e:	bf08      	it	eq
 8009b60:	2201      	moveq	r2, #1
 8009b62:	1e61      	subs	r1, r4, #1
 8009b64:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b68:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b6c:	42a9      	cmp	r1, r5
 8009b6e:	d1fb      	bne.n	8009b68 <__sccl+0x1c>
 8009b70:	b90b      	cbnz	r3, 8009b76 <__sccl+0x2a>
 8009b72:	3801      	subs	r0, #1
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	f082 0201 	eor.w	r2, r2, #1
 8009b7a:	54e2      	strb	r2, [r4, r3]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009b84:	292d      	cmp	r1, #45	; 0x2d
 8009b86:	d006      	beq.n	8009b96 <__sccl+0x4a>
 8009b88:	295d      	cmp	r1, #93	; 0x5d
 8009b8a:	d0f3      	beq.n	8009b74 <__sccl+0x28>
 8009b8c:	b909      	cbnz	r1, 8009b92 <__sccl+0x46>
 8009b8e:	4628      	mov	r0, r5
 8009b90:	e7f0      	b.n	8009b74 <__sccl+0x28>
 8009b92:	460b      	mov	r3, r1
 8009b94:	e7f1      	b.n	8009b7a <__sccl+0x2e>
 8009b96:	786e      	ldrb	r6, [r5, #1]
 8009b98:	2e5d      	cmp	r6, #93	; 0x5d
 8009b9a:	d0fa      	beq.n	8009b92 <__sccl+0x46>
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	dcf8      	bgt.n	8009b92 <__sccl+0x46>
 8009ba0:	3502      	adds	r5, #2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	428e      	cmp	r6, r1
 8009ba8:	5462      	strb	r2, [r4, r1]
 8009baa:	dcfb      	bgt.n	8009ba4 <__sccl+0x58>
 8009bac:	1af1      	subs	r1, r6, r3
 8009bae:	3901      	subs	r1, #1
 8009bb0:	1c58      	adds	r0, r3, #1
 8009bb2:	42b3      	cmp	r3, r6
 8009bb4:	bfa8      	it	ge
 8009bb6:	2100      	movge	r1, #0
 8009bb8:	1843      	adds	r3, r0, r1
 8009bba:	e7e0      	b.n	8009b7e <__sccl+0x32>

08009bbc <_strtol_l.constprop.0>:
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc2:	d001      	beq.n	8009bc8 <_strtol_l.constprop.0+0xc>
 8009bc4:	2b24      	cmp	r3, #36	; 0x24
 8009bc6:	d906      	bls.n	8009bd6 <_strtol_l.constprop.0+0x1a>
 8009bc8:	f7ff fc3c 	bl	8009444 <__errno>
 8009bcc:	2316      	movs	r3, #22
 8009bce:	6003      	str	r3, [r0, #0]
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009cbc <_strtol_l.constprop.0+0x100>
 8009bda:	460d      	mov	r5, r1
 8009bdc:	462e      	mov	r6, r5
 8009bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009be2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009be6:	f017 0708 	ands.w	r7, r7, #8
 8009bea:	d1f7      	bne.n	8009bdc <_strtol_l.constprop.0+0x20>
 8009bec:	2c2d      	cmp	r4, #45	; 0x2d
 8009bee:	d132      	bne.n	8009c56 <_strtol_l.constprop.0+0x9a>
 8009bf0:	782c      	ldrb	r4, [r5, #0]
 8009bf2:	2701      	movs	r7, #1
 8009bf4:	1cb5      	adds	r5, r6, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d05b      	beq.n	8009cb2 <_strtol_l.constprop.0+0xf6>
 8009bfa:	2b10      	cmp	r3, #16
 8009bfc:	d109      	bne.n	8009c12 <_strtol_l.constprop.0+0x56>
 8009bfe:	2c30      	cmp	r4, #48	; 0x30
 8009c00:	d107      	bne.n	8009c12 <_strtol_l.constprop.0+0x56>
 8009c02:	782c      	ldrb	r4, [r5, #0]
 8009c04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c08:	2c58      	cmp	r4, #88	; 0x58
 8009c0a:	d14d      	bne.n	8009ca8 <_strtol_l.constprop.0+0xec>
 8009c0c:	786c      	ldrb	r4, [r5, #1]
 8009c0e:	2310      	movs	r3, #16
 8009c10:	3502      	adds	r5, #2
 8009c12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c16:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c1a:	f04f 0c00 	mov.w	ip, #0
 8009c1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c22:	4666      	mov	r6, ip
 8009c24:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c2c:	f1be 0f09 	cmp.w	lr, #9
 8009c30:	d816      	bhi.n	8009c60 <_strtol_l.constprop.0+0xa4>
 8009c32:	4674      	mov	r4, lr
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	dd24      	ble.n	8009c82 <_strtol_l.constprop.0+0xc6>
 8009c38:	f1bc 0f00 	cmp.w	ip, #0
 8009c3c:	db1e      	blt.n	8009c7c <_strtol_l.constprop.0+0xc0>
 8009c3e:	45b1      	cmp	r9, r6
 8009c40:	d31c      	bcc.n	8009c7c <_strtol_l.constprop.0+0xc0>
 8009c42:	d101      	bne.n	8009c48 <_strtol_l.constprop.0+0x8c>
 8009c44:	45a2      	cmp	sl, r4
 8009c46:	db19      	blt.n	8009c7c <_strtol_l.constprop.0+0xc0>
 8009c48:	fb06 4603 	mla	r6, r6, r3, r4
 8009c4c:	f04f 0c01 	mov.w	ip, #1
 8009c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c54:	e7e8      	b.n	8009c28 <_strtol_l.constprop.0+0x6c>
 8009c56:	2c2b      	cmp	r4, #43	; 0x2b
 8009c58:	bf04      	itt	eq
 8009c5a:	782c      	ldrbeq	r4, [r5, #0]
 8009c5c:	1cb5      	addeq	r5, r6, #2
 8009c5e:	e7ca      	b.n	8009bf6 <_strtol_l.constprop.0+0x3a>
 8009c60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c64:	f1be 0f19 	cmp.w	lr, #25
 8009c68:	d801      	bhi.n	8009c6e <_strtol_l.constprop.0+0xb2>
 8009c6a:	3c37      	subs	r4, #55	; 0x37
 8009c6c:	e7e2      	b.n	8009c34 <_strtol_l.constprop.0+0x78>
 8009c6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c72:	f1be 0f19 	cmp.w	lr, #25
 8009c76:	d804      	bhi.n	8009c82 <_strtol_l.constprop.0+0xc6>
 8009c78:	3c57      	subs	r4, #87	; 0x57
 8009c7a:	e7db      	b.n	8009c34 <_strtol_l.constprop.0+0x78>
 8009c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8009c80:	e7e6      	b.n	8009c50 <_strtol_l.constprop.0+0x94>
 8009c82:	f1bc 0f00 	cmp.w	ip, #0
 8009c86:	da05      	bge.n	8009c94 <_strtol_l.constprop.0+0xd8>
 8009c88:	2322      	movs	r3, #34	; 0x22
 8009c8a:	6003      	str	r3, [r0, #0]
 8009c8c:	4646      	mov	r6, r8
 8009c8e:	b942      	cbnz	r2, 8009ca2 <_strtol_l.constprop.0+0xe6>
 8009c90:	4630      	mov	r0, r6
 8009c92:	e79e      	b.n	8009bd2 <_strtol_l.constprop.0+0x16>
 8009c94:	b107      	cbz	r7, 8009c98 <_strtol_l.constprop.0+0xdc>
 8009c96:	4276      	negs	r6, r6
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	d0f9      	beq.n	8009c90 <_strtol_l.constprop.0+0xd4>
 8009c9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ca0:	d000      	beq.n	8009ca4 <_strtol_l.constprop.0+0xe8>
 8009ca2:	1e69      	subs	r1, r5, #1
 8009ca4:	6011      	str	r1, [r2, #0]
 8009ca6:	e7f3      	b.n	8009c90 <_strtol_l.constprop.0+0xd4>
 8009ca8:	2430      	movs	r4, #48	; 0x30
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1b1      	bne.n	8009c12 <_strtol_l.constprop.0+0x56>
 8009cae:	2308      	movs	r3, #8
 8009cb0:	e7af      	b.n	8009c12 <_strtol_l.constprop.0+0x56>
 8009cb2:	2c30      	cmp	r4, #48	; 0x30
 8009cb4:	d0a5      	beq.n	8009c02 <_strtol_l.constprop.0+0x46>
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	e7ab      	b.n	8009c12 <_strtol_l.constprop.0+0x56>
 8009cba:	bf00      	nop
 8009cbc:	0800a114 	.word	0x0800a114

08009cc0 <_strtol_r>:
 8009cc0:	f7ff bf7c 	b.w	8009bbc <_strtol_l.constprop.0>

08009cc4 <_strtoul_l.constprop.0>:
 8009cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cc8:	4f36      	ldr	r7, [pc, #216]	; (8009da4 <_strtoul_l.constprop.0+0xe0>)
 8009cca:	4686      	mov	lr, r0
 8009ccc:	460d      	mov	r5, r1
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cd4:	5de6      	ldrb	r6, [r4, r7]
 8009cd6:	f016 0608 	ands.w	r6, r6, #8
 8009cda:	d1f8      	bne.n	8009cce <_strtoul_l.constprop.0+0xa>
 8009cdc:	2c2d      	cmp	r4, #45	; 0x2d
 8009cde:	d12f      	bne.n	8009d40 <_strtoul_l.constprop.0+0x7c>
 8009ce0:	782c      	ldrb	r4, [r5, #0]
 8009ce2:	2601      	movs	r6, #1
 8009ce4:	1c85      	adds	r5, r0, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d057      	beq.n	8009d9a <_strtoul_l.constprop.0+0xd6>
 8009cea:	2b10      	cmp	r3, #16
 8009cec:	d109      	bne.n	8009d02 <_strtoul_l.constprop.0+0x3e>
 8009cee:	2c30      	cmp	r4, #48	; 0x30
 8009cf0:	d107      	bne.n	8009d02 <_strtoul_l.constprop.0+0x3e>
 8009cf2:	7828      	ldrb	r0, [r5, #0]
 8009cf4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009cf8:	2858      	cmp	r0, #88	; 0x58
 8009cfa:	d149      	bne.n	8009d90 <_strtoul_l.constprop.0+0xcc>
 8009cfc:	786c      	ldrb	r4, [r5, #1]
 8009cfe:	2310      	movs	r3, #16
 8009d00:	3502      	adds	r5, #2
 8009d02:	f04f 38ff 	mov.w	r8, #4294967295
 8009d06:	2700      	movs	r7, #0
 8009d08:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d0c:	fb03 f908 	mul.w	r9, r3, r8
 8009d10:	ea6f 0909 	mvn.w	r9, r9
 8009d14:	4638      	mov	r0, r7
 8009d16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d1a:	f1bc 0f09 	cmp.w	ip, #9
 8009d1e:	d814      	bhi.n	8009d4a <_strtoul_l.constprop.0+0x86>
 8009d20:	4664      	mov	r4, ip
 8009d22:	42a3      	cmp	r3, r4
 8009d24:	dd22      	ble.n	8009d6c <_strtoul_l.constprop.0+0xa8>
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	db1d      	blt.n	8009d66 <_strtoul_l.constprop.0+0xa2>
 8009d2a:	4580      	cmp	r8, r0
 8009d2c:	d31b      	bcc.n	8009d66 <_strtoul_l.constprop.0+0xa2>
 8009d2e:	d101      	bne.n	8009d34 <_strtoul_l.constprop.0+0x70>
 8009d30:	45a1      	cmp	r9, r4
 8009d32:	db18      	blt.n	8009d66 <_strtoul_l.constprop.0+0xa2>
 8009d34:	fb00 4003 	mla	r0, r0, r3, r4
 8009d38:	2701      	movs	r7, #1
 8009d3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d3e:	e7ea      	b.n	8009d16 <_strtoul_l.constprop.0+0x52>
 8009d40:	2c2b      	cmp	r4, #43	; 0x2b
 8009d42:	bf04      	itt	eq
 8009d44:	782c      	ldrbeq	r4, [r5, #0]
 8009d46:	1c85      	addeq	r5, r0, #2
 8009d48:	e7cd      	b.n	8009ce6 <_strtoul_l.constprop.0+0x22>
 8009d4a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d4e:	f1bc 0f19 	cmp.w	ip, #25
 8009d52:	d801      	bhi.n	8009d58 <_strtoul_l.constprop.0+0x94>
 8009d54:	3c37      	subs	r4, #55	; 0x37
 8009d56:	e7e4      	b.n	8009d22 <_strtoul_l.constprop.0+0x5e>
 8009d58:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d5c:	f1bc 0f19 	cmp.w	ip, #25
 8009d60:	d804      	bhi.n	8009d6c <_strtoul_l.constprop.0+0xa8>
 8009d62:	3c57      	subs	r4, #87	; 0x57
 8009d64:	e7dd      	b.n	8009d22 <_strtoul_l.constprop.0+0x5e>
 8009d66:	f04f 37ff 	mov.w	r7, #4294967295
 8009d6a:	e7e6      	b.n	8009d3a <_strtoul_l.constprop.0+0x76>
 8009d6c:	2f00      	cmp	r7, #0
 8009d6e:	da07      	bge.n	8009d80 <_strtoul_l.constprop.0+0xbc>
 8009d70:	2322      	movs	r3, #34	; 0x22
 8009d72:	f8ce 3000 	str.w	r3, [lr]
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7a:	b932      	cbnz	r2, 8009d8a <_strtoul_l.constprop.0+0xc6>
 8009d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d80:	b106      	cbz	r6, 8009d84 <_strtoul_l.constprop.0+0xc0>
 8009d82:	4240      	negs	r0, r0
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d0f9      	beq.n	8009d7c <_strtoul_l.constprop.0+0xb8>
 8009d88:	b107      	cbz	r7, 8009d8c <_strtoul_l.constprop.0+0xc8>
 8009d8a:	1e69      	subs	r1, r5, #1
 8009d8c:	6011      	str	r1, [r2, #0]
 8009d8e:	e7f5      	b.n	8009d7c <_strtoul_l.constprop.0+0xb8>
 8009d90:	2430      	movs	r4, #48	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1b5      	bne.n	8009d02 <_strtoul_l.constprop.0+0x3e>
 8009d96:	2308      	movs	r3, #8
 8009d98:	e7b3      	b.n	8009d02 <_strtoul_l.constprop.0+0x3e>
 8009d9a:	2c30      	cmp	r4, #48	; 0x30
 8009d9c:	d0a9      	beq.n	8009cf2 <_strtoul_l.constprop.0+0x2e>
 8009d9e:	230a      	movs	r3, #10
 8009da0:	e7af      	b.n	8009d02 <_strtoul_l.constprop.0+0x3e>
 8009da2:	bf00      	nop
 8009da4:	0800a114 	.word	0x0800a114

08009da8 <_strtoul_r>:
 8009da8:	f7ff bf8c 	b.w	8009cc4 <_strtoul_l.constprop.0>

08009dac <__submore>:
 8009dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	460c      	mov	r4, r1
 8009db2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db8:	4299      	cmp	r1, r3
 8009dba:	d11d      	bne.n	8009df8 <__submore+0x4c>
 8009dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009dc0:	f000 f8aa 	bl	8009f18 <_malloc_r>
 8009dc4:	b918      	cbnz	r0, 8009dce <__submore+0x22>
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd2:	63a3      	str	r3, [r4, #56]	; 0x38
 8009dd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009dde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009de2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009de6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009dea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009dee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7e8      	b.n	8009dca <__submore+0x1e>
 8009df8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009dfa:	0077      	lsls	r7, r6, #1
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	f000 f8ff 	bl	800a000 <_realloc_r>
 8009e02:	4605      	mov	r5, r0
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d0de      	beq.n	8009dc6 <__submore+0x1a>
 8009e08:	eb00 0806 	add.w	r8, r0, r6
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	4632      	mov	r2, r6
 8009e10:	4640      	mov	r0, r8
 8009e12:	f000 f807 	bl	8009e24 <memcpy>
 8009e16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e1a:	f8c4 8000 	str.w	r8, [r4]
 8009e1e:	e7e9      	b.n	8009df4 <__submore+0x48>

08009e20 <__retarget_lock_acquire_recursive>:
 8009e20:	4770      	bx	lr

08009e22 <__retarget_lock_release_recursive>:
 8009e22:	4770      	bx	lr

08009e24 <memcpy>:
 8009e24:	440a      	add	r2, r1
 8009e26:	4291      	cmp	r1, r2
 8009e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e2c:	d100      	bne.n	8009e30 <memcpy+0xc>
 8009e2e:	4770      	bx	lr
 8009e30:	b510      	push	{r4, lr}
 8009e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	d1f9      	bne.n	8009e32 <memcpy+0xe>
 8009e3e:	bd10      	pop	{r4, pc}

08009e40 <_free_r>:
 8009e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e42:	2900      	cmp	r1, #0
 8009e44:	d044      	beq.n	8009ed0 <_free_r+0x90>
 8009e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4a:	9001      	str	r0, [sp, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e52:	bfb8      	it	lt
 8009e54:	18e4      	addlt	r4, r4, r3
 8009e56:	f000 f913 	bl	800a080 <__malloc_lock>
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <_free_r+0x94>)
 8009e5c:	9801      	ldr	r0, [sp, #4]
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	b933      	cbnz	r3, 8009e70 <_free_r+0x30>
 8009e62:	6063      	str	r3, [r4, #4]
 8009e64:	6014      	str	r4, [r2, #0]
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e6c:	f000 b90e 	b.w	800a08c <__malloc_unlock>
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d908      	bls.n	8009e86 <_free_r+0x46>
 8009e74:	6825      	ldr	r5, [r4, #0]
 8009e76:	1961      	adds	r1, r4, r5
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	bf01      	itttt	eq
 8009e7c:	6819      	ldreq	r1, [r3, #0]
 8009e7e:	685b      	ldreq	r3, [r3, #4]
 8009e80:	1949      	addeq	r1, r1, r5
 8009e82:	6021      	streq	r1, [r4, #0]
 8009e84:	e7ed      	b.n	8009e62 <_free_r+0x22>
 8009e86:	461a      	mov	r2, r3
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	b10b      	cbz	r3, 8009e90 <_free_r+0x50>
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	d9fa      	bls.n	8009e86 <_free_r+0x46>
 8009e90:	6811      	ldr	r1, [r2, #0]
 8009e92:	1855      	adds	r5, r2, r1
 8009e94:	42a5      	cmp	r5, r4
 8009e96:	d10b      	bne.n	8009eb0 <_free_r+0x70>
 8009e98:	6824      	ldr	r4, [r4, #0]
 8009e9a:	4421      	add	r1, r4
 8009e9c:	1854      	adds	r4, r2, r1
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	6011      	str	r1, [r2, #0]
 8009ea2:	d1e0      	bne.n	8009e66 <_free_r+0x26>
 8009ea4:	681c      	ldr	r4, [r3, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	6053      	str	r3, [r2, #4]
 8009eaa:	4421      	add	r1, r4
 8009eac:	6011      	str	r1, [r2, #0]
 8009eae:	e7da      	b.n	8009e66 <_free_r+0x26>
 8009eb0:	d902      	bls.n	8009eb8 <_free_r+0x78>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	e7d6      	b.n	8009e66 <_free_r+0x26>
 8009eb8:	6825      	ldr	r5, [r4, #0]
 8009eba:	1961      	adds	r1, r4, r5
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	bf04      	itt	eq
 8009ec0:	6819      	ldreq	r1, [r3, #0]
 8009ec2:	685b      	ldreq	r3, [r3, #4]
 8009ec4:	6063      	str	r3, [r4, #4]
 8009ec6:	bf04      	itt	eq
 8009ec8:	1949      	addeq	r1, r1, r5
 8009eca:	6021      	streq	r1, [r4, #0]
 8009ecc:	6054      	str	r4, [r2, #4]
 8009ece:	e7ca      	b.n	8009e66 <_free_r+0x26>
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bd30      	pop	{r4, r5, pc}
 8009ed4:	20000980 	.word	0x20000980

08009ed8 <sbrk_aligned>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4e0e      	ldr	r6, [pc, #56]	; (8009f14 <sbrk_aligned+0x3c>)
 8009edc:	460c      	mov	r4, r1
 8009ede:	6831      	ldr	r1, [r6, #0]
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	b911      	cbnz	r1, 8009eea <sbrk_aligned+0x12>
 8009ee4:	f000 f8bc 	bl	800a060 <_sbrk_r>
 8009ee8:	6030      	str	r0, [r6, #0]
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f000 f8b7 	bl	800a060 <_sbrk_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	d00a      	beq.n	8009f0c <sbrk_aligned+0x34>
 8009ef6:	1cc4      	adds	r4, r0, #3
 8009ef8:	f024 0403 	bic.w	r4, r4, #3
 8009efc:	42a0      	cmp	r0, r4
 8009efe:	d007      	beq.n	8009f10 <sbrk_aligned+0x38>
 8009f00:	1a21      	subs	r1, r4, r0
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 f8ac 	bl	800a060 <_sbrk_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d101      	bne.n	8009f10 <sbrk_aligned+0x38>
 8009f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f10:	4620      	mov	r0, r4
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	20000984 	.word	0x20000984

08009f18 <_malloc_r>:
 8009f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	1ccd      	adds	r5, r1, #3
 8009f1e:	f025 0503 	bic.w	r5, r5, #3
 8009f22:	3508      	adds	r5, #8
 8009f24:	2d0c      	cmp	r5, #12
 8009f26:	bf38      	it	cc
 8009f28:	250c      	movcc	r5, #12
 8009f2a:	2d00      	cmp	r5, #0
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	db01      	blt.n	8009f34 <_malloc_r+0x1c>
 8009f30:	42a9      	cmp	r1, r5
 8009f32:	d905      	bls.n	8009f40 <_malloc_r+0x28>
 8009f34:	230c      	movs	r3, #12
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	2600      	movs	r6, #0
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f40:	4e2e      	ldr	r6, [pc, #184]	; (8009ffc <_malloc_r+0xe4>)
 8009f42:	f000 f89d 	bl	800a080 <__malloc_lock>
 8009f46:	6833      	ldr	r3, [r6, #0]
 8009f48:	461c      	mov	r4, r3
 8009f4a:	bb34      	cbnz	r4, 8009f9a <_malloc_r+0x82>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f7ff ffc2 	bl	8009ed8 <sbrk_aligned>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	4604      	mov	r4, r0
 8009f58:	d14d      	bne.n	8009ff6 <_malloc_r+0xde>
 8009f5a:	6834      	ldr	r4, [r6, #0]
 8009f5c:	4626      	mov	r6, r4
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d140      	bne.n	8009fe4 <_malloc_r+0xcc>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	4631      	mov	r1, r6
 8009f66:	4638      	mov	r0, r7
 8009f68:	eb04 0803 	add.w	r8, r4, r3
 8009f6c:	f000 f878 	bl	800a060 <_sbrk_r>
 8009f70:	4580      	cmp	r8, r0
 8009f72:	d13a      	bne.n	8009fea <_malloc_r+0xd2>
 8009f74:	6821      	ldr	r1, [r4, #0]
 8009f76:	3503      	adds	r5, #3
 8009f78:	1a6d      	subs	r5, r5, r1
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	4629      	mov	r1, r5
 8009f88:	4638      	mov	r0, r7
 8009f8a:	f7ff ffa5 	bl	8009ed8 <sbrk_aligned>
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d02b      	beq.n	8009fea <_malloc_r+0xd2>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	442b      	add	r3, r5
 8009f96:	6023      	str	r3, [r4, #0]
 8009f98:	e00e      	b.n	8009fb8 <_malloc_r+0xa0>
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	1b52      	subs	r2, r2, r5
 8009f9e:	d41e      	bmi.n	8009fde <_malloc_r+0xc6>
 8009fa0:	2a0b      	cmp	r2, #11
 8009fa2:	d916      	bls.n	8009fd2 <_malloc_r+0xba>
 8009fa4:	1961      	adds	r1, r4, r5
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	6025      	str	r5, [r4, #0]
 8009faa:	bf18      	it	ne
 8009fac:	6059      	strne	r1, [r3, #4]
 8009fae:	6863      	ldr	r3, [r4, #4]
 8009fb0:	bf08      	it	eq
 8009fb2:	6031      	streq	r1, [r6, #0]
 8009fb4:	5162      	str	r2, [r4, r5]
 8009fb6:	604b      	str	r3, [r1, #4]
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f104 060b 	add.w	r6, r4, #11
 8009fbe:	f000 f865 	bl	800a08c <__malloc_unlock>
 8009fc2:	f026 0607 	bic.w	r6, r6, #7
 8009fc6:	1d23      	adds	r3, r4, #4
 8009fc8:	1af2      	subs	r2, r6, r3
 8009fca:	d0b6      	beq.n	8009f3a <_malloc_r+0x22>
 8009fcc:	1b9b      	subs	r3, r3, r6
 8009fce:	50a3      	str	r3, [r4, r2]
 8009fd0:	e7b3      	b.n	8009f3a <_malloc_r+0x22>
 8009fd2:	6862      	ldr	r2, [r4, #4]
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	bf0c      	ite	eq
 8009fd8:	6032      	streq	r2, [r6, #0]
 8009fda:	605a      	strne	r2, [r3, #4]
 8009fdc:	e7ec      	b.n	8009fb8 <_malloc_r+0xa0>
 8009fde:	4623      	mov	r3, r4
 8009fe0:	6864      	ldr	r4, [r4, #4]
 8009fe2:	e7b2      	b.n	8009f4a <_malloc_r+0x32>
 8009fe4:	4634      	mov	r4, r6
 8009fe6:	6876      	ldr	r6, [r6, #4]
 8009fe8:	e7b9      	b.n	8009f5e <_malloc_r+0x46>
 8009fea:	230c      	movs	r3, #12
 8009fec:	603b      	str	r3, [r7, #0]
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f000 f84c 	bl	800a08c <__malloc_unlock>
 8009ff4:	e7a1      	b.n	8009f3a <_malloc_r+0x22>
 8009ff6:	6025      	str	r5, [r4, #0]
 8009ff8:	e7de      	b.n	8009fb8 <_malloc_r+0xa0>
 8009ffa:	bf00      	nop
 8009ffc:	20000980 	.word	0x20000980

0800a000 <_realloc_r>:
 800a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a004:	4680      	mov	r8, r0
 800a006:	4614      	mov	r4, r2
 800a008:	460e      	mov	r6, r1
 800a00a:	b921      	cbnz	r1, 800a016 <_realloc_r+0x16>
 800a00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	4611      	mov	r1, r2
 800a012:	f7ff bf81 	b.w	8009f18 <_malloc_r>
 800a016:	b92a      	cbnz	r2, 800a024 <_realloc_r+0x24>
 800a018:	f7ff ff12 	bl	8009e40 <_free_r>
 800a01c:	4625      	mov	r5, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	f000 f838 	bl	800a098 <_malloc_usable_size_r>
 800a028:	4284      	cmp	r4, r0
 800a02a:	4607      	mov	r7, r0
 800a02c:	d802      	bhi.n	800a034 <_realloc_r+0x34>
 800a02e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a032:	d812      	bhi.n	800a05a <_realloc_r+0x5a>
 800a034:	4621      	mov	r1, r4
 800a036:	4640      	mov	r0, r8
 800a038:	f7ff ff6e 	bl	8009f18 <_malloc_r>
 800a03c:	4605      	mov	r5, r0
 800a03e:	2800      	cmp	r0, #0
 800a040:	d0ed      	beq.n	800a01e <_realloc_r+0x1e>
 800a042:	42bc      	cmp	r4, r7
 800a044:	4622      	mov	r2, r4
 800a046:	4631      	mov	r1, r6
 800a048:	bf28      	it	cs
 800a04a:	463a      	movcs	r2, r7
 800a04c:	f7ff feea 	bl	8009e24 <memcpy>
 800a050:	4631      	mov	r1, r6
 800a052:	4640      	mov	r0, r8
 800a054:	f7ff fef4 	bl	8009e40 <_free_r>
 800a058:	e7e1      	b.n	800a01e <_realloc_r+0x1e>
 800a05a:	4635      	mov	r5, r6
 800a05c:	e7df      	b.n	800a01e <_realloc_r+0x1e>
	...

0800a060 <_sbrk_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d06      	ldr	r5, [pc, #24]	; (800a07c <_sbrk_r+0x1c>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	f7f8 f87e 	bl	800216c <_sbrk>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_sbrk_r+0x1a>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_sbrk_r+0x1a>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20000978 	.word	0x20000978

0800a080 <__malloc_lock>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__malloc_lock+0x8>)
 800a082:	f7ff becd 	b.w	8009e20 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	2000097c 	.word	0x2000097c

0800a08c <__malloc_unlock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_unlock+0x8>)
 800a08e:	f7ff bec8 	b.w	8009e22 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	2000097c 	.word	0x2000097c

0800a098 <_malloc_usable_size_r>:
 800a098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a09c:	1f18      	subs	r0, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfbc      	itt	lt
 800a0a2:	580b      	ldrlt	r3, [r1, r0]
 800a0a4:	18c0      	addlt	r0, r0, r3
 800a0a6:	4770      	bx	lr

0800a0a8 <_init>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_fini>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr
