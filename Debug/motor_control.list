
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009978  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b9c  08009b9c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ba4  08009ba4  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea0  2000010c  08009cb8  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  08009cb8  00021fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f268  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c7d  00000000  00000000  0003f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  000458f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a87  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006eda  00000000  00000000  0005ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000638f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006550  00000000  00000000  00063944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009b24 	.word	0x08009b24

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009b24 	.word	0x08009b24

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <PIDContollerUpdate>:
	PID.output = 0;
	PID.setpoint = 0;
	PID.updated = false;
}

void PIDContollerUpdate(float measurement){
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	ed87 0a01 	vstr	s0, [r7, #4]

	float error = PID.setpoint - measurement;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000514:	ed93 7a03 	vldr	s14, [r3, #12]
 8000518:	edd7 7a01 	vldr	s15, [r7, #4]
 800051c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000520:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = PID.Kp * error;
 8000524:	4b35      	ldr	r3, [pc, #212]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000526:	edd3 7a00 	vldr	s15, [r3]
 800052a:	ed97 7a05 	vldr	s14, [r7, #20]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	edc7 7a04 	vstr	s15, [r7, #16]

    PID.integral += PID.Ki * error;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000538:	ed93 7a01 	vldr	s14, [r3, #4]
 800053c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000546:	edd3 7a04 	vldr	s15, [r3, #16]
 800054a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000550:	edc3 7a04 	vstr	s15, [r3, #16]

    // Limit the integral term to prevent windup
    if (PID.integral > MAX_PID_OUTPUT) {
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000556:	edd3 7a04 	vldr	s15, [r3, #16]
 800055a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000600 <PIDContollerUpdate+0xf8>
 800055e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000566:	dd03      	ble.n	8000570 <PIDContollerUpdate+0x68>
    		PID.integral = MAX_PID_OUTPUT;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <PIDContollerUpdate+0xf4>)
 800056a:	4a26      	ldr	r2, [pc, #152]	; (8000604 <PIDContollerUpdate+0xfc>)
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	e00b      	b.n	8000588 <PIDContollerUpdate+0x80>
        }
    else if (PID.integral < MIN_PID_OUTPUT) {
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000572:	edd3 7a04 	vldr	s15, [r3, #16]
 8000576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057e:	d503      	bpl.n	8000588 <PIDContollerUpdate+0x80>
    		PID.integral = MIN_PID_OUTPUT;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
        }

    float derivative = PID.Kd * (error - PID.last_error);
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <PIDContollerUpdate+0xf4>)
 800058a:	ed93 7a02 	vldr	s14, [r3, #8]
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000590:	edd3 7a05 	vldr	s15, [r3, #20]
 8000594:	edd7 6a05 	vldr	s13, [r7, #20]
 8000598:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800059c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a0:	edc7 7a03 	vstr	s15, [r7, #12]

    PID.output = proportional + PID.integral + derivative;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80005aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005be:	ee17 2a90 	vmov	r2, s15
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c4:	619a      	str	r2, [r3, #24]

    // Limit the output to within the allowable range
    if (PID.output > MAX_PID_OUTPUT) {
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ce:	d904      	bls.n	80005da <PIDContollerUpdate+0xd2>
    	PID.output = MAX_PID_OUTPUT;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	e001      	b.n	80005de <PIDContollerUpdate+0xd6>
      }
    else if (PID.output < MIN_PID_OUTPUT) {
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005dc:	699b      	ldr	r3, [r3, #24]
    	PID.output = MIN_PID_OUTPUT;
      }
    PID.output += PID_OUTPUT_OFFSET;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e8:	6193      	str	r3, [r2, #24]

    PID.last_error = error;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	6153      	str	r3, [r2, #20]

}
 80005f0:	bf00      	nop
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000128 	.word	0x20000128
 8000600:	447a0000 	.word	0x447a0000
 8000604:	447a0000 	.word	0x447a0000

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC1_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC1_Init+0x98>)
 800066a:	f000 feff 	bl	800146c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 fb9a 	bl	8000dac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	2301      	movs	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC1_Init+0x98>)
 800068a:	f000 ff33 	bl	80014f4 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 fb8a 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000148 	.word	0x20000148
 80006a4:	40012000 	.word	0x40012000
 80006a8:	0f000001 	.word	0x0f000001

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d127      	bne.n	800071e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_ADC_MspInit+0x84>)
 800071a:	f001 fa4d 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40012000 	.word	0x40012000
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <GetTotalTime>:

	characteristic.updated = true;
}

uint32_t GetTotalTime()
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	return characteristic.rise_time + characteristic.fall_time + characteristic.hold_time;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <GetTotalTime+0x20>)
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <GetTotalTime+0x20>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	441a      	add	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <GetTotalTime+0x20>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4413      	add	r3, r2
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000190 	.word	0x20000190

08000758 <isCharacteristicUpdated>:
{
	return (characteristic.maximum_RPM - characteristic.baseRPM) / characteristic.delta_falling;
}

bool isCharacteristicUpdated()
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
	bool retval = characteristic.updated;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000764:	71fb      	strb	r3, [r7, #7]
	if(characteristic.updated)
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d011      	beq.n	8000796 <isCharacteristicUpdated+0x3e>
		characteristic.updated = !characteristic.updated;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf14      	ite	ne
 800077e:	2301      	movne	r3, #1
 8000780:	2300      	moveq	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f083 0301 	eor.w	r3, r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000792:	f883 2020 	strb.w	r2, [r3, #32]

	return retval;
 8000796:	79fb      	ldrb	r3, [r7, #7]
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000190 	.word	0x20000190

080007a8 <CalculateSetPoint>:

uint32_t CalculateSetPoint(bool reset)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	static uint32_t counter = 0;
	static uint32_t setpoint = 0;
	if(reset)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <CalculateSetPoint+0x20>
	{
		counter = 0;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <CalculateSetPoint+0xd4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
		setpoint = characteristic.baseRPM;
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <CalculateSetPoint+0xd8>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <CalculateSetPoint+0xdc>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e010      	b.n	80007ea <CalculateSetPoint+0x42>
	}

	else
		counter = (counter + 1) % (MOTOR_TIM7_FREQ * GetTotalTime());
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <CalculateSetPoint+0xd4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5c      	adds	r4, r3, #1
 80007ce:	f7ff ffb1 	bl	8000734 <GetTotalTime>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	fbb4 f2f3 	udiv	r2, r4, r3
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	1ae3      	subs	r3, r4, r3
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <CalculateSetPoint+0xd4>)
 80007e8:	6013      	str	r3, [r2, #0]

	if(counter < MOTOR_TIM7_FREQ * characteristic.rise_time)
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <CalculateSetPoint+0xd8>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80007f2:	fb03 f202 	mul.w	r2, r3, r2
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <CalculateSetPoint+0xd4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d907      	bls.n	800080e <CalculateSetPoint+0x66>
		setpoint += characteristic.delta_rising;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <CalculateSetPoint+0xd8>)
 8000800:	699a      	ldr	r2, [r3, #24]
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <CalculateSetPoint+0xdc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <CalculateSetPoint+0xdc>)
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	e030      	b.n	8000870 <CalculateSetPoint+0xc8>

	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <CalculateSetPoint+0xd8>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f242 7210 	movw	r2, #10000	; 0x2710
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <CalculateSetPoint+0xd4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d20c      	bcs.n	800083c <CalculateSetPoint+0x94>
			counter < MOTOR_TIM7_FREQ * characteristic.rise_time + characteristic.hold_time)
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <CalculateSetPoint+0xd8>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f242 7210 	movw	r2, #10000	; 0x2710
 800082a:	fb03 f202 	mul.w	r2, r3, r2
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <CalculateSetPoint+0xd8>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	441a      	add	r2, r3
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <CalculateSetPoint+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 8000838:	429a      	cmp	r2, r3
 800083a:	d819      	bhi.n	8000870 <CalculateSetPoint+0xc8>
	{
		;
	}

	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <CalculateSetPoint+0xd8>)
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <CalculateSetPoint+0xd8>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4413      	add	r3, r2
 8000846:	f242 7210 	movw	r2, #10000	; 0x2710
 800084a:	fb03 f202 	mul.w	r2, r3, r2
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <CalculateSetPoint+0xd4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d20c      	bcs.n	8000870 <CalculateSetPoint+0xc8>
			(setpoint >= characteristic.baseRPM))
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <CalculateSetPoint+0xd8>)
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <CalculateSetPoint+0xdc>)
 800085c:	681b      	ldr	r3, [r3, #0]
	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800085e:	429a      	cmp	r2, r3
 8000860:	d806      	bhi.n	8000870 <CalculateSetPoint+0xc8>
		setpoint -= characteristic.delta_falling;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <CalculateSetPoint+0xd8>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <CalculateSetPoint+0xdc>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <CalculateSetPoint+0xdc>)
 800086e:	6013      	str	r3, [r2, #0]

	return setpoint;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <CalculateSetPoint+0xdc>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200001b4 	.word	0x200001b4
 8000880:	20000190 	.word	0x20000190
 8000884:	200001b8 	.word	0x200001b8

08000888 <enterCriticalSection>:
 *
 *  Created on: May 13, 2023
 *      Author: plasz
 */
#include "compontents.h"
void enterCriticalSection() {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
    __disable_irq();  // Disable interrupts globally
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <exitCriticalSection>:

void exitCriticalSection() {
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800089e:	b662      	cpsie	i
}
 80008a0:	bf00      	nop
    __enable_irq();  // Enable interrupts globally
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <GetDigits>:
#include "display.h"

volatile uint8_t Digits[2];

void GetDigits(uint8_t number)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	enterCriticalSection();
 80008b6:	f7ff ffe7 	bl	8000888 <enterCriticalSection>

    Digits[0] = convertTo7Segment((number % 10));
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <GetDigits+0x58>)
 80008be:	fba3 1302 	umull	r1, r3, r3, r2
 80008c2:	08d9      	lsrs	r1, r3, #3
 80008c4:	460b      	mov	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	440b      	add	r3, r1
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f81b 	bl	800090c <convertTo7Segment>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <GetDigits+0x5c>)
 80008dc:	701a      	strb	r2, [r3, #0]
	Digits[1] = convertTo7Segment((number / 10));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <GetDigits+0x58>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f80e 	bl	800090c <convertTo7Segment>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <GetDigits+0x5c>)
 80008f6:	705a      	strb	r2, [r3, #1]
    exitCriticalSection();
 80008f8:	f7ff ffcf 	bl	800089a <exitCriticalSection>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	cccccccd 	.word	0xcccccccd
 8000908:	200001bc 	.word	0x200001bc

0800090c <convertTo7Segment>:

uint8_t convertTo7Segment(uint8_t value) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
    switch (value) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b09      	cmp	r3, #9
 800091a:	d835      	bhi.n	8000988 <convertTo7Segment+0x7c>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <convertTo7Segment+0x18>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	0800094d 	.word	0x0800094d
 8000928:	08000953 	.word	0x08000953
 800092c:	08000959 	.word	0x08000959
 8000930:	0800095f 	.word	0x0800095f
 8000934:	08000965 	.word	0x08000965
 8000938:	0800096b 	.word	0x0800096b
 800093c:	08000971 	.word	0x08000971
 8000940:	08000977 	.word	0x08000977
 8000944:	0800097d 	.word	0x0800097d
 8000948:	08000983 	.word	0x08000983
        case 0:
            value = ~0x3F;  // Inverted value
 800094c:	23c0      	movs	r3, #192	; 0xc0
 800094e:	71fb      	strb	r3, [r7, #7]
            break;
 8000950:	e01d      	b.n	800098e <convertTo7Segment+0x82>
        case 1:
            value = ~0x06;  // Inverted value
 8000952:	23f9      	movs	r3, #249	; 0xf9
 8000954:	71fb      	strb	r3, [r7, #7]
            break;
 8000956:	e01a      	b.n	800098e <convertTo7Segment+0x82>
        case 2:
            value = ~0x5B;  // Inverted value
 8000958:	23a4      	movs	r3, #164	; 0xa4
 800095a:	71fb      	strb	r3, [r7, #7]
            break;
 800095c:	e017      	b.n	800098e <convertTo7Segment+0x82>
        case 3:
            value = ~0x4F;  // Inverted value
 800095e:	23b0      	movs	r3, #176	; 0xb0
 8000960:	71fb      	strb	r3, [r7, #7]
            break;
 8000962:	e014      	b.n	800098e <convertTo7Segment+0x82>
        case 4:
            value = ~0x66;  // Inverted value
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	71fb      	strb	r3, [r7, #7]
            break;
 8000968:	e011      	b.n	800098e <convertTo7Segment+0x82>
        case 5:
            value = ~0x6D;  // Inverted value
 800096a:	2392      	movs	r3, #146	; 0x92
 800096c:	71fb      	strb	r3, [r7, #7]
            break;
 800096e:	e00e      	b.n	800098e <convertTo7Segment+0x82>
        case 6:
            value = ~0x7D;  // Inverted value
 8000970:	2382      	movs	r3, #130	; 0x82
 8000972:	71fb      	strb	r3, [r7, #7]
            break;
 8000974:	e00b      	b.n	800098e <convertTo7Segment+0x82>
        case 7:
            value = ~0x07;  // Inverted value
 8000976:	23f8      	movs	r3, #248	; 0xf8
 8000978:	71fb      	strb	r3, [r7, #7]
            break;
 800097a:	e008      	b.n	800098e <convertTo7Segment+0x82>
        case 8:
            value = ~0x7F;  // Inverted value
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	71fb      	strb	r3, [r7, #7]
            break;
 8000980:	e005      	b.n	800098e <convertTo7Segment+0x82>
        case 9:
            value = ~0x6F;  // Inverted value
 8000982:	2390      	movs	r3, #144	; 0x90
 8000984:	71fb      	strb	r3, [r7, #7]
            break;
 8000986:	e002      	b.n	800098e <convertTo7Segment+0x82>

        default:
            // Handle unsupported values or return a default value
            value = 0xFF;  // Blank segment (all segments turned off)
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	71fb      	strb	r3, [r7, #7]
            break;
 800098c:	bf00      	nop
    }
    return value;
 800098e:	79fb      	ldrb	r3, [r7, #7]
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DisplayValue>:

void DisplayValue(int32_t value)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if(value < 0)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da02      	bge.n	80009b0 <DisplayValue+0x14>
		value = -value;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	425b      	negs	r3, r3
 80009ae:	607b      	str	r3, [r7, #4]
	GetDigits(value);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff79 	bl	80008ac <GetDigits>
	SPI_EnableChip(true);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fae4 	bl	8000f88 <SPI_EnableChip>
	SPI_SEND(Digits, 2);
 80009c0:	2102      	movs	r1, #2
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <DisplayValue+0x40>)
 80009c4:	f000 faf2 	bl	8000fac <SPI_SEND>
	SPI_EnableChip(false);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fadd 	bl	8000f88 <SPI_EnableChip>
	EnableDisplays(true);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 f806 	bl	80009e0 <EnableDisplays>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001bc 	.word	0x200001bc

080009e0 <EnableDisplays>:

void EnableDisplays(bool enable)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, !enable);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f083 0301 	eor.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <EnableDisplays+0x28>)
 80009fa:	f001 fa71 	bl	8001ee0 <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020800 	.word	0x40020800

08000a0c <GetQEPValue>:
	HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_2);
}

// Enkóder érték kiolvasása
uint16_t GetQEPValue()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
//	return (uint16_t)HAL_TIM_ReadCapturedValue(&Tim1Handle, TIM_CHANNEL_1);

    static uint16_t previousCount = 0;
    static uint32_t previousTime = 0;

    uint16_t currentCount = (uint16_t)Tim1Handle.Instance->CNT;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <GetQEPValue+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	83fb      	strh	r3, [r7, #30]
    uint32_t currentTime = HAL_GetTick();
 8000a1a:	f000 fcf7 	bl	800140c <HAL_GetTick>
 8000a1e:	61b8      	str	r0, [r7, #24]

    uint16_t countDiff = currentCount - previousCount;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <GetQEPValue+0x8c>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	8bfa      	ldrh	r2, [r7, #30]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	82fb      	strh	r3, [r7, #22]
    uint32_t timeDiff = currentTime - previousTime;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <GetQEPValue+0x90>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	613b      	str	r3, [r7, #16]

    float rotations = (float)countDiff / (MOTOR_RES_ENC * 4.0f); // Number of rotations since the previous reading
 8000a34:	8afb      	ldrh	r3, [r7, #22]
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a3e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000aa0 <GetQEPValue+0x94>
 8000a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a46:	edc7 7a03 	vstr	s15, [r7, #12]
    float elapsedMinutes = (float)timeDiff / (1000.0f * 60.0f); // Elapsed time in minutes
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a54:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000aa4 <GetQEPValue+0x98>
 8000a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5c:	edc7 7a02 	vstr	s15, [r7, #8]

    float rpm = rotations / elapsedMinutes; // Rotations per minute
 8000a60:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a64:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a6c:	edc7 7a01 	vstr	s15, [r7, #4]

    previousCount = currentCount;
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <GetQEPValue+0x8c>)
 8000a72:	8bfb      	ldrh	r3, [r7, #30]
 8000a74:	8013      	strh	r3, [r2, #0]
    previousTime = currentTime;
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <GetQEPValue+0x90>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6013      	str	r3, [r2, #0]

    return (uint16_t)rpm;
 8000a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	ee17 3a90 	vmov	r3, s15
 8000a88:	b29b      	uxth	r3, r3
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001c0 	.word	0x200001c0
 8000a98:	20000208 	.word	0x20000208
 8000a9c:	2000020c 	.word	0x2000020c
 8000aa0:	42800000 	.word	0x42800000
 8000aa4:	476a6000 	.word	0x476a6000

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a4a      	ldr	r2, [pc, #296]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a43      	ldr	r2, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a35      	ldr	r2, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0x148>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2120      	movs	r1, #32
 8000b32:	4830      	ldr	r0, [pc, #192]	; (8000bf4 <MX_GPIO_Init+0x14c>)
 8000b34:	f001 f9d4 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedPC_Pin|LedPos_Pin|CS_SEG_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f241 0190 	movw	r1, #4240	; 0x1090
 8000b3e:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b40:	f001 f9ce 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b4c:	f001 f9c8 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedSpeed_GPIO_Port, LedSpeed_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000b56:	f001 f9c3 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000b72:	f001 f821 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b76:	2320      	movs	r3, #32
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x14c>)
 8000b8e:	f001 f813 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LedPC_Pin|LedPos_Pin|EN_SEG_Pin|CS_SEG_Pin;
 8000b92:	f241 4390 	movw	r3, #5264	; 0x1490
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_GPIO_Init+0x150>)
 8000bac:	f001 f804 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PC_Pin|ModeSelect_Pin|asd_Pin;
 8000bb0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000bc6:	f000 fff7 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedSpeed_Pin;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedSpeed_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x154>)
 8000be2:	f000 ffe9 	bl	8001bb8 <HAL_GPIO_Init>

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <InitAF>:

/* USER CODE BEGIN 2 */
GPIO_InitTypeDef  GPIO_InitStructure;
void InitAF()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
// DC-DC DRIVE VA-VB MOTOR PWM TIM1

GPIO_InitStructure.Pin = MOTOR_AQE_PIN | MOTOR_BQE_PIN;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <InitAF+0x34>)
 8000c06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c0a:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF1_TIM1;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <InitAF+0x34>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_PWM_PORT, &GPIO_InitStructure);
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <InitAF+0x34>)
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <InitAF+0x38>)
 8000c16:	f000 ffcf 	bl	8001bb8 <HAL_GPIO_Init>

// DC-DC DRIVE A_QE-B_QE-Z_QE QEP TIM3
GPIO_InitStructure.Pin = MOTOR_VA_PIN | MOTOR_VB_PIN;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <InitAF+0x34>)
 8000c1c:	22c0      	movs	r2, #192	; 0xc0
 8000c1e:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF2_TIM3;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <InitAF+0x34>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_QE_PORT, &GPIO_InitStructure);
 8000c26:	4903      	ldr	r1, [pc, #12]	; (8000c34 <InitAF+0x34>)
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <InitAF+0x38>)
 8000c2a:	f000 ffc5 	bl	8001bb8 <HAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000210 	.word	0x20000210
 8000c38:	40020000 	.word	0x40020000

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f000 fb7e 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f846 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f7ff ff2e 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c4c:	f000 fad4 	bl	80011f8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c50:	f000 f8f4 	bl	8000e3c <MX_SPI2_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fcd8 	bl	8000608 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c58:	f008 f9ce 	bl	8008ff8 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000c5c:	f000 fa32 	bl	80010c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  InitAF();
 8000c60:	f7ff ffce 	bl	8000c00 <InitAF>
  //InitTimer();
  //InitMotorPWM();
  //InitQEP();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <main+0x88>)
 8000c6a:	f001 f939 	bl	8001ee0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <main+0x8c>)
 8000c74:	f001 f934 	bl	8001ee0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <main+0x8c>)
 8000c7e:	f001 f92f 	bl	8001ee0 <HAL_GPIO_WritePin>
  EnableDisplays(true);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff feac 	bl	80009e0 <EnableDisplays>
//	  {
//		  a = !a;
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
//		  EnableDisplays(a);
//	  }
	  DisplayValue(i);
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <main+0x90>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe85 	bl	800099c <DisplayValue>

	  i++;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <main+0x90>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <main+0x90>)
 8000c9a:	6013      	str	r3, [r2, #0]
	  i = i % 100;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <main+0x90>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <main+0x94>)
 8000ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca6:	1159      	asrs	r1, r3, #5
 8000ca8:	17d3      	asrs	r3, r2, #31
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	fb01 f303 	mul.w	r3, r1, r3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <main+0x90>)
 8000cb6:	6013      	str	r3, [r2, #0]
//	      // Process the received data
//	      uint8_t data = rxBuffer[i];
//	      // ...
//	    }
//	  }
	  HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f000 fbb2 	bl	8001424 <HAL_Delay>
  {
 8000cc0:	e7e2      	b.n	8000c88 <main+0x4c>
 8000cc2:	bf00      	nop
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	20000224 	.word	0x20000224
 8000cd0:	51eb851f 	.word	0x51eb851f

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	; 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2234      	movs	r2, #52	; 0x34
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 ff16 	bl	8009b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemClock_Config+0xd0>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <SystemClock_Config+0xd0>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <SystemClock_Config+0xd0>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SystemClock_Config+0xd4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <SystemClock_Config+0xd4>)
 8000d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <SystemClock_Config+0xd4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d48:	23a8      	movs	r3, #168	; 0xa8
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d50:	2307      	movs	r3, #7
 8000d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fa15 	bl	800418c <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d68:	f000 f820 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2105      	movs	r1, #5
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fb8a 	bl	80034a4 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d96:	f000 f809 	bl	8000dac <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3750      	adds	r7, #80	; 0x50
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>

08000db6 <SetPWM>:
	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_2);
}

void SetPWM(int32_t d)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	if (d > MOTOR_D_MAX)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dc4:	dd03      	ble.n	8000dce <SetPWM+0x18>
	{
		d=MOTOR_D_MAX;
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	e004      	b.n	8000dd8 <SetPWM+0x22>
	}
	else if (d < 0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da01      	bge.n	8000dd8 <SetPWM+0x22>
	{
		d=0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
	}

	// PWM csatornák beállítása SetMotorCh1 és SetMotorCh2 hívásával
	SetMotorCh1(d);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f809 	bl	8000df4 <SetMotorCh1>
	SetMotorCh2(d);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f816 	bl	8000e18 <SetMotorCh2>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SetMotorCh1>:

void SetMotorCh1(uint16_t d)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR1 = d;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SetMotorCh1+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	88fa      	ldrh	r2, [r7, #6]
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000228 	.word	0x20000228

08000e18 <SetMotorCh2>:

void SetMotorCh2(uint16_t d)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR2 = d;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SetMotorCh2+0x20>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000228 	.word	0x20000228

08000e3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <MX_SPI2_Init+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e70:	2218      	movs	r2, #24
 8000e72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e88:	220a      	movs	r2, #10
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_SPI2_Init+0x64>)
 8000e8e:	f003 fc1b 	bl	80046c8 <HAL_SPI_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e98:	f7ff ff88 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000270 	.word	0x20000270
 8000ea4:	40003800 	.word	0x40003800

08000ea8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <HAL_SPI_MspInit+0xd0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d152      	bne.n	8000f70 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a2a      	ldr	r2, [pc, #168]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_SPI_MspInit+0xd4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4811      	ldr	r0, [pc, #68]	; (8000f80 <HAL_SPI_MspInit+0xd8>)
 8000f3a:	f000 fe3d 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f50:	2305      	movs	r3, #5
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_SPI_MspInit+0xdc>)
 8000f5c:	f000 fe2c 	bl	8001bb8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2024      	movs	r0, #36	; 0x24
 8000f66:	f000 fdce 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f6a:	2024      	movs	r0, #36	; 0x24
 8000f6c:	f000 fde7 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40003800 	.word	0x40003800
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020400 	.word	0x40020400

08000f88 <SPI_EnableChip>:
  }
}

/* USER CODE BEGIN 1 */
void SPI_EnableChip(uint8_t enable)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SEG_GPIO_Port, CS_SEG_Pin, enable);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	461a      	mov	r2, r3
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <SPI_EnableChip+0x20>)
 8000f9c:	f000 ffa0 	bl	8001ee0 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020800 	.word	0x40020800

08000fac <SPI_SEND>:

HAL_StatusTypeDef SPI_SEND(uint8_t* pData, uint16_t datasize)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi2, pData, datasize, HAL_MAX_DELAY);
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <SPI_SEND+0x24>)
 8000fc2:	f003 fc0a 	bl	80047da <HAL_SPI_Transmit>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000270 	.word	0x20000270

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_MspInit+0x4c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f9b8 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <SPI2_IRQHandler+0x10>)
 800107e:	f003 fce9 	bl	8004a54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000270 	.word	0x20000270

0800108c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <OTG_FS_IRQHandler+0x10>)
 8001092:	f001 f895 	bl	80021c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20001880 	.word	0x20001880

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_TIM10_Init+0x40>)
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_TIM10_Init+0x44>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_TIM10_Init+0x40>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_TIM10_Init+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_TIM10_Init+0x40>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_TIM10_Init+0x40>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_TIM10_Init+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_TIM10_Init+0x40>)
 80010f0:	f003 fe98 	bl	8004e24 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010fa:	f7ff fe57 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002c8 	.word	0x200002c8
 8001108:	40014400 	.word	0x40014400

0800110c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10d      	bne.n	800113a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40014400 	.word	0x40014400
 800114c:	40023800 	.word	0x40023800

08001150 <TIM7_IRQHandler>:
	HAL_TIM_Base_Start_IT(&Tim7Handle);
}

// Megszakításkezelő a TIM7 időzítőhöz
void TIM7_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim7Handle);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <TIM7_IRQHandler+0x10>)
 8001156:	f003 feb4 	bl	8004ec2 <HAL_TIM_IRQHandler>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000310 	.word	0x20000310

08001164 <TimerHandler>:



void TimerHandler()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	if(isCharacteristicUpdated())
 800116a:	f7ff faf5 	bl	8000758 <isCharacteristicUpdated>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00a      	beq.n	800118a <TimerHandler+0x26>
	{
		//SetCharacteristic(max, base, rise, fall, hold);
		PID.setpoint = CalculateSetPoint(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fb17 	bl	80007a8 <CalculateSetPoint>
 800117a:	ee07 0a90 	vmov	s15, r0
 800117e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <TimerHandler+0x6c>)
 8001184:	edc3 7a03 	vstr	s15, [r3, #12]
 8001188:	e009      	b.n	800119e <TimerHandler+0x3a>

	}
	else{
		PID.setpoint = CalculateSetPoint(0);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fb0c 	bl	80007a8 <CalculateSetPoint>
 8001190:	ee07 0a90 	vmov	s15, r0
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <TimerHandler+0x6c>)
 800119a:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	int32_t measurement = GetQEPValue();
 800119e:	f7ff fc35 	bl	8000a0c <GetQEPValue>
 80011a2:	4603      	mov	r3, r0
 80011a4:	607b      	str	r3, [r7, #4]

	PIDContollerUpdate(measurement);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f7ff f9a8 	bl	8000508 <PIDContollerUpdate>

	SetPWM(PID.output);
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <TimerHandler+0x6c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fdfa 	bl	8000db6 <SetPWM>

	DisplayValue(measurement);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fbea 	bl	800099c <DisplayValue>

}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000128 	.word	0x20000128

080011d4 <HAL_TIM_PeriodElapsedCallback>:
// Megszakításkezelő callback a Timer megszakításkezelőhöz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        TimerHandler();
 80011e6:	f7ff ffbd 	bl	8001164 <TimerHandler>
    }
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40001400 	.word	0x40001400

080011f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <MX_USART2_UART_Init+0x60>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001230:	f004 f82c 	bl	800528c <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f7ff fdb7 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000358 	.word	0x20000358
 8001258:	40004400 	.word	0x40004400

0800125c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x84>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12b      	bne.n	80012d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012b6:	230c      	movs	r3, #12
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_UART_MspInit+0x8c>)
 80012d2:	f000 fc71 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001316:	f7ff fec3 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f008 fbd7 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fc8d 	bl	8000c3c <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001330:	08009bac 	.word	0x08009bac
  ldr r2, =_sbss
 8001334:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001338:	20001fac 	.word	0x20001fac

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 fbc1 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fe2e 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fbd9 	bl	8001b5a <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 fba1 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	2000039c 	.word	0x2000039c

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000039c 	.word	0x2000039c

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e033      	b.n	80014ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff f90e 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f94a 	bl	8001758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
 80014da:	e001      	b.n	80014e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1c>
 800150c:	2302      	movs	r3, #2
 800150e:	e113      	b.n	8001738 <HAL_ADC_ConfigChannel+0x244>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d925      	bls.n	800156c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68d9      	ldr	r1, [r3, #12]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	3b1e      	subs	r3, #30
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68d9      	ldr	r1, [r3, #12]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	4603      	mov	r3, r0
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4403      	add	r3, r0
 800155e:	3b1e      	subs	r3, #30
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	e022      	b.n	80015b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	2207      	movs	r2, #7
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4403      	add	r3, r0
 80015a8:	409a      	lsls	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d824      	bhi.n	8001604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b05      	subs	r3, #5
 80015cc:	221f      	movs	r2, #31
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b05      	subs	r3, #5
 80015f6:	fa00 f203 	lsl.w	r2, r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e04c      	b.n	800169e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d824      	bhi.n	8001656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b23      	subs	r3, #35	; 0x23
 800161e:	221f      	movs	r2, #31
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43da      	mvns	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	400a      	ands	r2, r1
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b23      	subs	r3, #35	; 0x23
 8001648:	fa00 f203 	lsl.w	r2, r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
 8001654:	e023      	b.n	800169e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b41      	subs	r3, #65	; 0x41
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b41      	subs	r3, #65	; 0x41
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_ADC_ConfigChannel+0x250>)
 80016a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_ADC_ConfigChannel+0x254>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d10f      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1d8>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_ADC_ConfigChannel+0x254>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12b      	bne.n	800172e <HAL_ADC_ConfigChannel+0x23a>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_ADC_ConfigChannel+0x258>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x1f4>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b11      	cmp	r3, #17
 80016e6:	d122      	bne.n	800172e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_ADC_ConfigChannel+0x258>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d111      	bne.n	800172e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_ADC_ConfigChannel+0x25c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_ADC_ConfigChannel+0x260>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9a      	lsrs	r2, r3, #18
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001720:	e002      	b.n	8001728 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40012300 	.word	0x40012300
 8001748:	40012000 	.word	0x40012000
 800174c:	10000012 	.word	0x10000012
 8001750:	20000000 	.word	0x20000000
 8001754:	431bde83 	.word	0x431bde83

08001758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001760:	4b79      	ldr	r3, [pc, #484]	; (8001948 <ADC_Init+0x1f0>)
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <ADC_Init+0x1f4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	e00f      	b.n	8001856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0202 	bic.w	r2, r2, #2
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e1b      	ldrb	r3, [r3, #24]
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	3b01      	subs	r3, #1
 80018b0:	035a      	lsls	r2, r3, #13
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e007      	b.n	80018cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	051a      	lsls	r2, r3, #20
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800190e:	025a      	lsls	r2, r3, #9
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	029a      	lsls	r2, r3, #10
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40012300 	.word	0x40012300
 800194c:	0f000001 	.word	0x0f000001

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d004      	beq.n	8001b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e00c      	b.n	8001baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e165      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8154 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d017      	beq.n	8001ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80ae 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4f      	ldr	r2, [pc, #316]	; (8001ec0 <HAL_GPIO_Init+0x308>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <HAL_GPIO_Init+0x30c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x216>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4d      	ldr	r2, [pc, #308]	; (8001ec8 <HAL_GPIO_Init+0x310>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x212>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <HAL_GPIO_Init+0x314>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	; (8001ed0 <HAL_GPIO_Init+0x318>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x20a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_GPIO_Init+0x31c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x206>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a49      	ldr	r2, [pc, #292]	; (8001ed8 <HAL_GPIO_Init+0x320>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x202>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a31      	ldr	r2, [pc, #196]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f ae96 	bls.w	8001bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f14:	b08f      	sub	sp, #60	; 0x3c
 8001f16:	af0a      	add	r7, sp, #40	; 0x28
 8001f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e116      	b.n	8002152 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f007 fa4c 	bl	80093dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fd69 	bl	8005a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	687e      	ldr	r6, [r7, #4]
 8001f70:	466d      	mov	r5, sp
 8001f72:	f106 0410 	add.w	r4, r6, #16
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f86:	1d33      	adds	r3, r6, #4
 8001f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8a:	6838      	ldr	r0, [r7, #0]
 8001f8c:	f003 fc40 	bl	8005810 <USB_CoreInit>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0d7      	b.n	8002152 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fd57 	bl	8005a5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e04a      	b.n	800204a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333d      	adds	r3, #61	; 0x3d
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	333c      	adds	r3, #60	; 0x3c
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	b298      	uxth	r0, r3
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3344      	adds	r3, #68	; 0x44
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3340      	adds	r3, #64	; 0x40
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3348      	adds	r3, #72	; 0x48
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	334c      	adds	r3, #76	; 0x4c
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3354      	adds	r3, #84	; 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	3301      	adds	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3af      	bcc.n	8001fb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e044      	b.n	80020e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3301      	adds	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3b5      	bcc.n	800205a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	687e      	ldr	r6, [r7, #4]
 80020f6:	466d      	mov	r5, sp
 80020f8:	f106 0410 	add.w	r4, r6, #16
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002104:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002108:	e885 0003 	stmia.w	r5, {r0, r1}
 800210c:	1d33      	adds	r3, r6, #4
 800210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f003 fcef 	bl	8005af4 <USB_DevInit>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e014      	b.n	8002152 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f001 f98b 	bl	800345c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fe31 	bl	8006db2 <USB_DevDisconnect>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_Start+0x1c>
 8002172:	2302      	movs	r3, #2
 8002174:	e020      	b.n	80021b8 <HAL_PCD_Start+0x5e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	2b01      	cmp	r3, #1
 8002184:	d109      	bne.n	800219a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fc3a 	bl	8005a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 fde1 	bl	8006d70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b08d      	sub	sp, #52	; 0x34
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fe9f 	bl	8006f1a <USB_GetMode>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 84b7 	bne.w	8002b52 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fe03 	bl	8006df4 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 84ad 	beq.w	8002b50 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fdf0 	bl	8006df4 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d107      	bne.n	800222e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 0202 	and.w	r2, r2, #2
 800222c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f004 fdde 	bl	8006df4 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d161      	bne.n	8002306 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0210 	bic.w	r2, r2, #16
 8002250:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	0c5b      	lsrs	r3, r3, #17
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	2b02      	cmp	r3, #2
 800227c:	d124      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d035      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002298:	b29b      	uxth	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f004 fc15 	bl	8006acc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ae:	441a      	add	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022c0:	441a      	add	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	621a      	str	r2, [r3, #32]
 80022c6:	e016      	b.n	80022f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	d110      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	6a38      	ldr	r0, [r7, #32]
 80022e0:	f004 fbf4 	bl	8006acc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f0:	441a      	add	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0210 	orr.w	r2, r2, #16
 8002304:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fd72 	bl	8006df4 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800231a:	f040 80a7 	bne.w	800246c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fd77 	bl	8006e1a <USB_ReadDevAllOutEpInterrupt>
 800232c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800232e:	e099      	b.n	8002464 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 808e 	beq.w	8002458 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fd9b 	bl	8006e82 <USB_ReadDevOutEPInterrupt>
 800234c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2301      	movs	r3, #1
 8002368:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 feef 	bl	8003150 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	2308      	movs	r3, #8
 800238c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 ffc5 	bl	8003320 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2310      	movs	r3, #16
 80023b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d030      	beq.n	800241e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d109      	bne.n	80023dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	78db      	ldrb	r3, [r3, #3]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f007 f904 	bl	8009614 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	2302      	movs	r3, #2
 800241c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2320      	movs	r3, #32
 8002438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002456:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	f47f af62 	bne.w	8002330 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f004 fcbf 	bl	8006df4 <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002480:	f040 80db 	bne.w	800263a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f004 fce0 	bl	8006e4e <USB_ReadDevAllInEpInterrupt>
 800248e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002494:	e0cd      	b.n	8002632 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80c2 	beq.w	8002626 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fd06 	bl	8006ebe <USB_ReadDevInEPInterrupt>
 80024b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d057      	beq.n	800256e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	2201      	movs	r2, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69f9      	ldr	r1, [r7, #28]
 80024da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024de:	4013      	ands	r3, r2
 80024e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ee:	461a      	mov	r2, r3
 80024f0:	2301      	movs	r3, #1
 80024f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d132      	bne.n	8002562 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	334c      	adds	r3, #76	; 0x4c
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4403      	add	r3, r0
 800251c:	3348      	adds	r3, #72	; 0x48
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4419      	add	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	334c      	adds	r3, #76	; 0x4c
 8002532:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <HAL_PCD_IRQHandler+0x3a2>
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3354      	adds	r3, #84	; 0x54
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800255a:	461a      	mov	r2, r3
 800255c:	2101      	movs	r1, #1
 800255e:	f004 fd0d 	bl	8006f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f006 ffce 	bl	800950a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002584:	461a      	mov	r2, r3
 8002586:	2308      	movs	r3, #8
 8002588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a0:	461a      	mov	r2, r3
 80025a2:	2310      	movs	r3, #16
 80025a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025bc:	461a      	mov	r2, r3
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d023      	beq.n	8002614 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ce:	6a38      	ldr	r0, [r7, #32]
 80025d0:	f003 fbee 	bl	8005db0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	78db      	ldrb	r3, [r3, #3]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2200      	movs	r2, #0
 80025f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f007 f81b 	bl	8009638 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260e:	461a      	mov	r2, r3
 8002610:	2302      	movs	r3, #2
 8002612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fd08 	bl	8003036 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f af2e 	bne.w	8002496 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fbd8 	bl	8006df4 <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800264a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264e:	d122      	bne.n	8002696 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002676:	2100      	movs	r1, #0
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f007 f995 	bl	80099a8 <HAL_PCDEx_LPM_Callback>
 800267e:	e002      	b.n	8002686 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f006 ffb9 	bl	80095f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fbaa 	bl	8006df4 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026aa:	d112      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f006 ff75 	bl	80095ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026d0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fb8c 	bl	8006df4 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d121      	bne.n	800272c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d111      	bne.n	8002726 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800271c:	2101      	movs	r1, #1
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f007 f942 	bl	80099a8 <HAL_PCDEx_LPM_Callback>
 8002724:	e002      	b.n	800272c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f006 ff40 	bl	80095ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fb5f 	bl	8006df4 <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	f040 80b7 	bne.w	80028b2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2110      	movs	r1, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fb26 	bl	8005db0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002768:	e046      	b.n	80027f8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002776:	461a      	mov	r2, r3
 8002778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800277c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278e:	0151      	lsls	r1, r2, #5
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	440a      	add	r2, r1
 8002794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800279c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	461a      	mov	r2, r3
 80027ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c2:	0151      	lsls	r1, r2, #5
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	440a      	add	r2, r1
 80027c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	3301      	adds	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3b3      	bcc.n	800276a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002810:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002814:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282e:	f043 030b 	orr.w	r3, r3, #11
 8002832:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002844:	f043 030b 	orr.w	r3, r3, #11
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	e015      	b.n	8002878 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800285e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002862:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002872:	f043 030b 	orr.w	r3, r3, #11
 8002876:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002886:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800288a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800289c:	461a      	mov	r2, r3
 800289e:	f004 fb6d 	bl	8006f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 fa9c 	bl	8006df4 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d124      	bne.n	8002912 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 fb32 	bl	8006f36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fae7 	bl	8005eaa <USB_GetDevSpeed>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681c      	ldr	r4, [r3, #0]
 80028e8:	f000 fec2 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80028ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f002 ffec 	bl	80058d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f006 fe2c 	bl	800955a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fa6c 	bl	8006df4 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10a      	bne.n	800293c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f006 fe09 	bl	800953e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f002 0208 	and.w	r2, r2, #8
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f004 fa57 	bl	8006df4 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d122      	bne.n	8002996 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295c:	2301      	movs	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
 8002960:	e014      	b.n	800298c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fb27 	bl	8002fd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	429a      	cmp	r2, r3
 8002994:	d3e5      	bcc.n	8002962 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f004 fa2a 	bl	8006df4 <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029aa:	d13b      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	e02b      	b.n	8002a0a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3340      	adds	r3, #64	; 0x40
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d115      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da12      	bge.n	8002a04 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	333f      	adds	r3, #63	; 0x3f
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fae8 	bl	8002fd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	3301      	adds	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3ce      	bcc.n	80029b2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 f9e3 	bl	8006df4 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a38:	d155      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e045      	b.n	8002acc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d12e      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da2b      	bge.n	8002ac6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d121      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac2:	6053      	str	r3, [r2, #4]
            break;
 8002ac4:	e007      	b.n	8002ad6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	3301      	adds	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d3b4      	bcc.n	8002a40 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 f982 	bl	8006df4 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d10a      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 fdad 	bl	800965c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f96c 	bl	8006df4 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d115      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f006 fd9d 	bl	8009678 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e000      	b.n	8002b52 <HAL_PCD_IRQHandler+0x992>
      return;
 8002b50:	bf00      	nop
    }
  }
}
 8002b52:	3734      	adds	r7, #52	; 0x34
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_SetAddress+0x1a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e013      	b.n	8002b9a <HAL_PCD_SetAddress+0x42>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 f8ca 	bl	8006d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	4608      	mov	r0, r1
 8002bac:	4611      	mov	r1, r2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	70fb      	strb	r3, [r7, #3]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	803b      	strh	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0f      	bge.n	8002be8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3338      	adds	r3, #56	; 0x38
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00f      	b.n	8002c08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c14:	883a      	ldrh	r2, [r7, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	78ba      	ldrb	r2, [r7, #2]
 8002c1e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c32:	78bb      	ldrb	r3, [r7, #2]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d102      	bne.n	8002c3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_EP_Open+0xaa>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e00e      	b.n	8002c6a <HAL_PCD_EP_Open+0xc8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f94a 	bl	8005ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c68:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da0f      	bge.n	8002ca6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3338      	adds	r3, #56	; 0x38
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	705a      	strb	r2, [r3, #1]
 8002ca4:	e00f      	b.n	8002cc6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_PCD_EP_Close+0x6e>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e00e      	b.n	8002cfe <HAL_PCD_EP_Close+0x8c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 f988 	bl	8006004 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	460b      	mov	r3, r1
 8002d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d48:	7afb      	ldrb	r3, [r7, #11]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d102      	bne.n	8002d62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	f003 fc67 	bl	800664c <USB_EP0StartXfer>
 8002d7e:	e008      	b.n	8002d92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	f003 fa15 	bl	80061bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6979      	ldr	r1, [r7, #20]
 8002e3e:	f003 fc05 	bl	800664c <USB_EP0StartXfer>
 8002e42:	e008      	b.n	8002e56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6979      	ldr	r1, [r7, #20]
 8002e52:	f003 f9b3 	bl	80061bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d901      	bls.n	8002e7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e050      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da0f      	bge.n	8002ea6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3338      	adds	r3, #56	; 0x38
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	705a      	strb	r2, [r3, #1]
 8002ea4:	e00d      	b.n	8002ec2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_EP_SetStall+0x82>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e01e      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xc0>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fe43 	bl	8006b7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	b2d9      	uxtb	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f10:	461a      	mov	r2, r3
 8002f12:	f004 f833 	bl	8006f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d901      	bls.n	8002f46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0f      	bge.n	8002f6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	3338      	adds	r3, #56	; 0x38
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	705a      	strb	r2, [r3, #1]
 8002f6c:	e00f      	b.n	8002f8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_EP_ClrStall+0x86>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_ClrStall+0xa4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fe4b 	bl	8006c58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da0c      	bge.n	8003002 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e00c      	b.n	800301c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fc6a 	bl	80068fc <USB_EPStopXfer>
 8003028:	4603      	mov	r3, r0
 800302a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800302c:	7afb      	ldrb	r3, [r7, #11]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08a      	sub	sp, #40	; 0x28
 800303a:	af02      	add	r7, sp, #8
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3338      	adds	r3, #56	; 0x38
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d901      	bls.n	800306e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06c      	b.n	8003148 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d902      	bls.n	800308a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3303      	adds	r3, #3
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003092:	e02b      	b.n	80030ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d902      	bls.n	80030b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	3303      	adds	r3, #3
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4603      	mov	r3, r0
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f003 fcbe 	bl	8006a50 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	441a      	add	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	441a      	add	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d809      	bhi.n	8003116 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310a:	429a      	cmp	r2, r3
 800310c:	d203      	bcs.n	8003116 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1be      	bne.n	8003094 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	429a      	cmp	r2, r3
 8003120:	d811      	bhi.n	8003146 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	43db      	mvns	r3, r3
 800313c:	6939      	ldr	r1, [r7, #16]
 800313e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003142:	4013      	ands	r3, r2
 8003144:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	333c      	adds	r3, #60	; 0x3c
 8003168:	3304      	adds	r3, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d17b      	bne.n	800327e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4a61      	ldr	r2, [pc, #388]	; (8003318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	f240 80b9 	bls.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80b3 	beq.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b8:	6093      	str	r3, [r2, #8]
 80031ba:	e0a7      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	2320      	movs	r3, #32
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e098      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8093 	bne.w	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90f      	bls.n	800320e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]
 800320c:	e07e      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	0159      	lsls	r1, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	440b      	add	r3, r1
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d114      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003258:	461a      	mov	r2, r3
 800325a:	2101      	movs	r1, #1
 800325c:	f003 fe8e 	bl	8006f7c <USB_EP0_OutStart>
 8003260:	e006      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	441a      	add	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f006 f92c 	bl	80094d4 <HAL_PCD_DataOutStageCallback>
 800327c:	e046      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d124      	bne.n	80032d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	6093      	str	r3, [r2, #8]
 80032a4:	e032      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	2320      	movs	r3, #32
 80032c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f006 f903 	bl	80094d4 <HAL_PCD_DataOutStageCallback>
 80032ce:	e01d      	b.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f8:	461a      	mov	r2, r3
 80032fa:	2100      	movs	r1, #0
 80032fc:	f003 fe3e 	bl	8006f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f006 f8e4 	bl	80094d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	4f54300a 	.word	0x4f54300a
 800331c:	4f54310a 	.word	0x4f54310a

08003320 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	3304      	adds	r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d90e      	bls.n	8003374 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f006 f89b 	bl	80094b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d90c      	bls.n	800339c <PCD_EP_OutSetupPacket_int+0x7c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003394:	461a      	mov	r2, r3
 8003396:	2101      	movs	r1, #1
 8003398:	f003 fdf0 	bl	8006f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a

080033ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
 80033b8:	4613      	mov	r3, r2
 80033ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ca:	883b      	ldrh	r3, [r7, #0]
 80033cc:	0419      	lsls	r1, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
 80033d8:	e028      	b.n	800342c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e00d      	b.n	800340a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	3301      	adds	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	3b01      	subs	r3, #1
 8003410:	429a      	cmp	r2, r3
 8003412:	d3ec      	bcc.n	80033ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003414:	883b      	ldrh	r3, [r7, #0]
 8003416:	0418      	lsls	r0, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	3b01      	subs	r3, #1
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4302      	orrs	r2, r0
 8003424:	3340      	adds	r3, #64	; 0x40
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	f043 0303 	orr.w	r3, r3, #3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cc      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90c      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	2b03      	cmp	r3, #3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e067      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fd ff3a 	bl	800140c <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fd ff36 	bl	800140c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20c      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800362a:	f000 fb7f 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fe9a 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	08009b84 	.word	0x08009b84
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08009b94 	.word	0x08009b94

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08009b94 	.word	0x08009b94

080036d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003716:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	496c      	ldr	r1, [pc, #432]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800372e:	2301      	movs	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d010      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800373e:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	4960      	ldr	r1, [pc, #384]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800375c:	2301      	movs	r3, #1
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d017      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800376e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4955      	ldr	r1, [pc, #340]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378a:	d101      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800378c:	2301      	movs	r3, #1
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003798:	2301      	movs	r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d017      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	4946      	ldr	r1, [pc, #280]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c6:	d101      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 808a 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003802:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a33      	ldr	r2, [pc, #204]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800380e:	f7fd fdfd 	bl	800140c <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003816:	f7fd fdf9 	bl	800140c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e278      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02f      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	429a      	cmp	r2, r3
 8003850:	d028      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d114      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fdc7 	bl	800140c <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fd fdc3 	bl	800140c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e240      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ee      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b0:	d114      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	4902      	ldr	r1, [pc, #8]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
 80038cc:	e00c      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42470e40 	.word	0x42470e40
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a49      	ldr	r2, [pc, #292]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800390c:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800390e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800391c:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	4937      	ldr	r1, [pc, #220]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800393e:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003944:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	492e      	ldr	r1, [pc, #184]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d011      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003960:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003966:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	4926      	ldr	r1, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397e:	d101      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003980:	2301      	movs	r3, #1
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	491a      	ldr	r1, [pc, #104]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d011      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	4911      	ldr	r1, [pc, #68]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d0:	d101      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d005      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e4:	f040 80ff 	bne.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fd0d 	bl	800140c <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f4:	e00e      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039f6:	f7fd fd09 	bl	800140c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d907      	bls.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e188      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	424711e0 	.word	0x424711e0
 8003a10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a14:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ea      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d028      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d124      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a48:	4b71      	ldr	r3, [pc, #452]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	3301      	adds	r3, #1
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	071b      	lsls	r3, r3, #28
 8003a8a:	4961      	ldr	r1, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d035      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003abc:	d130      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003abe:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ad0:	4b4f      	ldr	r3, [pc, #316]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad6:	0f1b      	lsrs	r3, r3, #28
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	019b      	lsls	r3, r3, #6
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	3b01      	subs	r3, #1
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	431a      	orrs	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	071b      	lsls	r3, r3, #28
 8003b00:	4943      	ldr	r1, [pc, #268]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0e:	f023 021f 	bic.w	r2, r3, #31
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d029      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b34:	d124      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	431a      	orrs	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	4925      	ldr	r1, [pc, #148]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d016      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4917      	ldr	r1, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd fc24 	bl	800140c <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bc8:	f7fd fc20 	bl	800140c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e09f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 8095 	bne.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fc0a 	bl	800140c <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bfa:	e00f      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bfc:	f7fd fc06 	bl	800140c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d908      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e085      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
 8003c14:	42470068 	.word	0x42470068
 8003c18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1c:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d0e8      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d127      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	4928      	ldr	r1, [pc, #160]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	3b01      	subs	r3, #1
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	4922      	ldr	r1, [pc, #136]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01d      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb6:	d118      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	0e1b      	lsrs	r3, r3, #24
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	019b      	lsls	r3, r3, #6
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4910      	ldr	r1, [pc, #64]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd fb8c 	bl	800140c <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cf8:	f7fd fb88 	bl	800140c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e007      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d16:	d1ef      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3730      	adds	r7, #48	; 0x30
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470070 	.word	0x42470070

08003d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b0ae      	sub	sp, #184	; 0xb8
 8003d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d52:	4bcb      	ldr	r3, [pc, #812]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	f200 8206 	bhi.w	800416c <HAL_RCC_GetSysClockFreq+0x440>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	0800416d 	.word	0x0800416d
 8003d70:	0800416d 	.word	0x0800416d
 8003d74:	0800416d 	.word	0x0800416d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	0800416d 	.word	0x0800416d
 8003d80:	0800416d 	.word	0x0800416d
 8003d84:	0800416d 	.word	0x0800416d
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	0800416d 	.word	0x0800416d
 8003d90:	0800416d 	.word	0x0800416d
 8003d94:	0800416d 	.word	0x0800416d
 8003d98:	08003f9d 	.word	0x08003f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4bb9      	ldr	r3, [pc, #740]	; (8004084 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003da2:	e1e7      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da4:	4bb8      	ldr	r3, [pc, #736]	; (8004088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003daa:	e1e3      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dac:	4bb4      	ldr	r3, [pc, #720]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db8:	4bb1      	ldr	r3, [pc, #708]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d071      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc4:	4bae      	ldr	r3, [pc, #696]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	0159      	lsls	r1, r3, #5
 8003df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfc:	0150      	lsls	r0, r2, #5
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4621      	mov	r1, r4
 8003e04:	1a51      	subs	r1, r2, r1
 8003e06:	6439      	str	r1, [r7, #64]	; 0x40
 8003e08:	4629      	mov	r1, r5
 8003e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	018b      	lsls	r3, r1, #6
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e26:	4641      	mov	r1, r8
 8003e28:	018a      	lsls	r2, r1, #6
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e30:	4649      	mov	r1, r9
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e44:	4649      	mov	r1, r9
 8003e46:	00cb      	lsls	r3, r1, #3
 8003e48:	4641      	mov	r1, r8
 8003e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4e:	4641      	mov	r1, r8
 8003e50:	00ca      	lsls	r2, r1, #3
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	4622      	mov	r2, r4
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5e:	462b      	mov	r3, r5
 8003e60:	460a      	mov	r2, r1
 8003e62:	eb42 0303 	adc.w	r3, r2, r3
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e74:	4629      	mov	r1, r5
 8003e76:	024b      	lsls	r3, r1, #9
 8003e78:	4621      	mov	r1, r4
 8003e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e7e:	4621      	mov	r1, r4
 8003e80:	024a      	lsls	r2, r1, #9
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e98:	f7fc f9b4 	bl	8000204 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea6:	e067      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea8:	4b75      	ldr	r3, [pc, #468]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003edc:	0150      	lsls	r0, r2, #5
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	1a51      	subs	r1, r2, r1
 8003ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb63 0301 	sbc.w	r3, r3, r1
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003efc:	4649      	mov	r1, r9
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f06:	4641      	mov	r1, r8
 8003f08:	018a      	lsls	r2, r1, #6
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f10:	4649      	mov	r1, r9
 8003f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2a:	4692      	mov	sl, r2
 8003f2c:	469b      	mov	fp, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	eb1a 0303 	adds.w	r3, sl, r3
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	462b      	mov	r3, r5
 8003f38:	eb4b 0303 	adc.w	r3, fp, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f60:	2200      	movs	r2, #0
 8003f62:	673b      	str	r3, [r7, #112]	; 0x70
 8003f64:	677a      	str	r2, [r7, #116]	; 0x74
 8003f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f6a:	f7fc f94b 	bl	8000204 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4613      	mov	r3, r2
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f78:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f9a:	e0eb      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f9c:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d06b      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	2200      	movs	r2, #0
 8003fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc8:	2300      	movs	r3, #0
 8003fca:	667b      	str	r3, [r7, #100]	; 0x64
 8003fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	0159      	lsls	r1, r3, #5
 8003fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe2:	0150      	lsls	r0, r2, #5
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4621      	mov	r1, r4
 8003fea:	1a51      	subs	r1, r2, r1
 8003fec:	61b9      	str	r1, [r7, #24]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004002:	4659      	mov	r1, fp
 8004004:	018b      	lsls	r3, r1, #6
 8004006:	4651      	mov	r1, sl
 8004008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400c:	4651      	mov	r1, sl
 800400e:	018a      	lsls	r2, r1, #6
 8004010:	4651      	mov	r1, sl
 8004012:	ebb2 0801 	subs.w	r8, r2, r1
 8004016:	4659      	mov	r1, fp
 8004018:	eb63 0901 	sbc.w	r9, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004030:	4690      	mov	r8, r2
 8004032:	4699      	mov	r9, r3
 8004034:	4623      	mov	r3, r4
 8004036:	eb18 0303 	adds.w	r3, r8, r3
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	462b      	mov	r3, r5
 800403e:	eb49 0303 	adc.w	r3, r9, r3
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004050:	4629      	mov	r1, r5
 8004052:	024b      	lsls	r3, r1, #9
 8004054:	4621      	mov	r1, r4
 8004056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405a:	4621      	mov	r1, r4
 800405c:	024a      	lsls	r2, r1, #9
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004066:	2200      	movs	r2, #0
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
 800406a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800406c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004070:	f7fc f8c8 	bl	8000204 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800407e:	e065      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x420>
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400
 8004088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408c:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_GetSysClockFreq+0x458>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	2200      	movs	r2, #0
 8004094:	4618      	mov	r0, r3
 8004096:	4611      	mov	r1, r2
 8004098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
 800409e:	2300      	movs	r3, #0
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
 80040a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040a6:	4642      	mov	r2, r8
 80040a8:	464b      	mov	r3, r9
 80040aa:	f04f 0000 	mov.w	r0, #0
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	0159      	lsls	r1, r3, #5
 80040b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b8:	0150      	lsls	r0, r2, #5
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4641      	mov	r1, r8
 80040c0:	1a51      	subs	r1, r2, r1
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	4649      	mov	r1, r9
 80040c6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040d8:	4659      	mov	r1, fp
 80040da:	018b      	lsls	r3, r1, #6
 80040dc:	4651      	mov	r1, sl
 80040de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e2:	4651      	mov	r1, sl
 80040e4:	018a      	lsls	r2, r1, #6
 80040e6:	4651      	mov	r1, sl
 80040e8:	1a54      	subs	r4, r2, r1
 80040ea:	4659      	mov	r1, fp
 80040ec:	eb63 0501 	sbc.w	r5, r3, r1
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	00eb      	lsls	r3, r5, #3
 80040fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040fe:	00e2      	lsls	r2, r4, #3
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	4643      	mov	r3, r8
 8004106:	18e3      	adds	r3, r4, r3
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	464b      	mov	r3, r9
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800411e:	4629      	mov	r1, r5
 8004120:	028b      	lsls	r3, r1, #10
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004128:	4621      	mov	r1, r4
 800412a:	028a      	lsls	r2, r1, #10
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004134:	2200      	movs	r2, #0
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
 8004138:	64fa      	str	r2, [r7, #76]	; 0x4c
 800413a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800413e:	f7fc f861 	bl	8000204 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4613      	mov	r3, r2
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <HAL_RCC_GetSysClockFreq+0x458>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	0f1b      	lsrs	r3, r3, #28
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800415a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800415e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800416a:	e003      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800416e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004178:	4618      	mov	r0, r3
 800417a:	37b8      	adds	r7, #184	; 0xb8
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	00f42400 	.word	0x00f42400

0800418c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e28d      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8083 	beq.w	80042b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041ac:	4b94      	ldr	r3, [pc, #592]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d019      	beq.n	80041ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041b8:	4b91      	ldr	r3, [pc, #580]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c4:	4b8e      	ldr	r3, [pc, #568]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d0:	d00c      	beq.n	80041ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b8b      	ldr	r3, [pc, #556]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b84      	ldr	r3, [pc, #528]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x124>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e25a      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x90>
 800420e:	4b7c      	ldr	r3, [pc, #496]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7b      	ldr	r2, [pc, #492]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xcc>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0xb4>
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xcc>
 8004240:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6e      	ldr	r2, [pc, #440]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6b      	ldr	r2, [pc, #428]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd f8d4 	bl	800140c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd f8d0 	bl	800140c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e21f      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xdc>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd f8c0 	bl	800140c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd f8bc 	bl	800140c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e20b      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b57      	ldr	r3, [pc, #348]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x104>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d06f      	beq.n	800439e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042be:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ca:	4b4d      	ldr	r3, [pc, #308]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d105      	bne.n	80042e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x186>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1d3      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x278>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd f869 	bl	800140c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd f865 	bl	800140c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1b4      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4925      	ldr	r1, [pc, #148]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x278>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd f848 	bl	800140c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd f844 	bl	800140c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e193      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd f828 	bl	800140c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd f824 	bl	800140c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e173      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x274>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x234>
 80043de:	e01b      	b.n	8004418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fd f811 	bl	800140c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e00e      	b.n	800440c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fd f80d 	bl	800140c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d907      	bls.n	800440c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e15c      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
 8004400:	40023800 	.word	0x40023800
 8004404:	42470000 	.word	0x42470000
 8004408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b8a      	ldr	r3, [pc, #552]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ea      	bne.n	80043ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8097 	beq.w	8004554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b83      	ldr	r3, [pc, #524]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a7e      	ldr	r2, [pc, #504]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b79      	ldr	r3, [pc, #484]	; (800463c <HAL_RCC_OscConfig+0x4b0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_OscConfig+0x4b0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a75      	ldr	r2, [pc, #468]	; (800463c <HAL_RCC_OscConfig+0x4b0>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fc ffcd 	bl	800140c <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fc ffc9 	bl	800140c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e118      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b6c      	ldr	r3, [pc, #432]	; (800463c <HAL_RCC_OscConfig+0x4b0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x31e>
 800449c:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	e01c      	b.n	80044e4 <HAL_RCC_OscConfig+0x358>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x340>
 80044b2:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a60      	ldr	r2, [pc, #384]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5d      	ldr	r2, [pc, #372]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x358>
 80044cc:	4b5a      	ldr	r3, [pc, #360]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a59      	ldr	r2, [pc, #356]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a56      	ldr	r2, [pc, #344]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	f023 0304 	bic.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fc ff8e 	bl	800140c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fc ff8a 	bl	800140c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0d7      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCC_OscConfig+0x368>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fc ff78 	bl	800140c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fc ff74 	bl	800140c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0c1      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	4b40      	ldr	r3, [pc, #256]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ee      	bne.n	8004520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80ad 	beq.w	80046b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d060      	beq.n	800462c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d145      	bne.n	80045fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <HAL_RCC_OscConfig+0x4b4>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fc ff48 	bl	800140c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fc ff44 	bl	800140c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e093      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	071b      	lsls	r3, r3, #28
 80045ca:	491b      	ldr	r1, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d0:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_RCC_OscConfig+0x4b4>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fc ff19 	bl	800140c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045de:	f7fc ff15 	bl	800140c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e064      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x452>
 80045fc:	e05c      	b.n	80046b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCC_OscConfig+0x4b4>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fc ff02 	bl	800140c <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fc fefe 	bl	800140c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04d      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x480>
 800462a:	e045      	b.n	80046b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e040      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
 8004638:	40023800 	.word	0x40023800
 800463c:	40007000 	.word	0x40007000
 8004640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_RCC_OscConfig+0x538>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d030      	beq.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d129      	bne.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d122      	bne.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467c:	4293      	cmp	r3, r2
 800467e:	d119      	bne.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	3b01      	subs	r3, #1
 800468e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d10f      	bne.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07b      	b.n	80047d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fbc4 	bl	8000ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	ea42 0103 	orr.w	r1, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0104 	and.w	r1, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0210 	and.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b088      	sub	sp, #32
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_SPI_Transmit+0x22>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e126      	b.n	8004a4a <HAL_SPI_Transmit+0x270>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004804:	f7fc fe02 	bl	800140c <HAL_GetTick>
 8004808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800481e:	e10b      	b.n	8004a38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Transmit+0x52>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004830:	e102      	b.n	8004a38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2203      	movs	r2, #3
 8004836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	d10f      	bne.n	800489a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d14b      	bne.n	800495a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Transmit+0xf6>
 80048ca:	8afb      	ldrh	r3, [r7, #22]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13e      	bne.n	800494e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f4:	e02b      	b.n	800494e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d112      	bne.n	800492a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
 8004928:	e011      	b.n	800494e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492a:	f7fc fd6f 	bl	800140c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d803      	bhi.n	8004942 <HAL_SPI_Transmit+0x168>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d102      	bne.n	8004948 <HAL_SPI_Transmit+0x16e>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800494c:	e074      	b.n	8004a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ce      	bne.n	80048f6 <HAL_SPI_Transmit+0x11c>
 8004958:	e04c      	b.n	80049f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x18e>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d140      	bne.n	80049ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800498e:	e02c      	b.n	80049ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d113      	bne.n	80049c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c4:	e011      	b.n	80049ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c6:	f7fc fd21 	bl	800140c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d803      	bhi.n	80049de <HAL_SPI_Transmit+0x204>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Transmit+0x20a>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e8:	e026      	b.n	8004a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cd      	bne.n	8004990 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f9d1 	bl	8004da0 <SPI_EndRxTxTransaction>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e000      	b.n	8004a38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10f      	bne.n	8004a98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
    return;
 8004a96:	e0d7      	b.n	8004c48 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_SPI_IRQHandler+0x66>
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	09db      	lsrs	r3, r3, #7
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
    return;
 8004ab8:	e0c6      	b.n	8004c48 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_SPI_IRQHandler+0x8c>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80b4 	beq.w	8004c48 <HAL_SPI_IRQHandler+0x1f4>
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80ad 	beq.w	8004c48 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d023      	beq.n	8004b42 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d011      	beq.n	8004b2a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e00b      	b.n	8004b42 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]
        return;
 8004b40:	e082      	b.n	8004c48 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	f043 0208 	orr.w	r2, r3, #8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04f      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bb4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_SPI_IRQHandler+0x17e>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d034      	beq.n	8004c3c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0203 	bic.w	r2, r2, #3
 8004be0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d011      	beq.n	8004c0e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_SPI_IRQHandler+0x1fc>)
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc ffbb 	bl	8001b72 <HAL_DMA_Abort_IT>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <HAL_SPI_IRQHandler+0x1fc>)
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc ffa5 	bl	8001b72 <HAL_DMA_Abort_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004c3a:	e003      	b.n	8004c44 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f809 	bl	8004c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c42:	e000      	b.n	8004c46 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c44:	bf00      	nop
    return;
 8004c46:	bf00      	nop
  }
}
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004c69 	.word	0x08004c69

08004c54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ffe6 	bl	8004c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca0:	f7fc fbb4 	bl	800140c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb0:	f7fc fbac 	bl	800140c <HAL_GetTick>
 8004cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	015b      	lsls	r3, r3, #5
 8004cbc:	0d1b      	lsrs	r3, r3, #20
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc6:	e054      	b.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d050      	beq.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd0:	f7fc fb9c 	bl	800140c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d902      	bls.n	8004ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d13d      	bne.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d111      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	d004      	beq.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	d107      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2c:	d10f      	bne.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e017      	b.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d19b      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000

08004da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dac:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <SPI_EndRxTxTransaction+0x7c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <SPI_EndRxTxTransaction+0x80>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	0d5b      	lsrs	r3, r3, #21
 8004db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d112      	bne.n	8004df2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff ff5a 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e00f      	b.n	8004e12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d0f2      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x52>
 8004e0c:	e000      	b.n	8004e10 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e0e:	bf00      	nop
  }

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000000 	.word	0x20000000
 8004e20:	165e9f81 	.word	0x165e9f81

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e041      	b.n	8004eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc f95e 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 f95e 	bl	8005124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d122      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d11b      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0202 	mvn.w	r2, #2
 8004eee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8ee 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004f0a:	e005      	b.n	8004f18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f8e0 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8f1 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d122      	bne.n	8004f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d11b      	bne.n	8004f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0204 	mvn.w	r2, #4
 8004f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8c4 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004f5e:	e005      	b.n	8004f6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8b6 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8c7 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d122      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0208 	mvn.w	r2, #8
 8004f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f89a 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004fb2:	e005      	b.n	8004fc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f88c 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f89d 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d122      	bne.n	800501a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d11b      	bne.n	800501a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0210 	mvn.w	r2, #16
 8004fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2208      	movs	r2, #8
 8004ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f870 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8005006:	e005      	b.n	8005014 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f862 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f873 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f06f 0201 	mvn.w	r2, #1
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fc f8c7 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f903 	bl	8005278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f838 	bl	800510e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d10e      	bne.n	80050ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0220 	mvn.w	r2, #32
 80050c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8cd 	bl	8005264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a40      	ldr	r2, [pc, #256]	; (8005238 <TIM_Base_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d00f      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3d      	ldr	r2, [pc, #244]	; (800523c <TIM_Base_SetConfig+0x118>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <TIM_Base_SetConfig+0x11c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <TIM_Base_SetConfig+0x120>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <TIM_Base_SetConfig+0x124>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2f      	ldr	r2, [pc, #188]	; (8005238 <TIM_Base_SetConfig+0x114>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d02b      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d027      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <TIM_Base_SetConfig+0x118>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d023      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <TIM_Base_SetConfig+0x11c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_Base_SetConfig+0x120>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01b      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0x124>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d017      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a28      	ldr	r2, [pc, #160]	; (800524c <TIM_Base_SetConfig+0x128>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a27      	ldr	r2, [pc, #156]	; (8005250 <TIM_Base_SetConfig+0x12c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a26      	ldr	r2, [pc, #152]	; (8005254 <TIM_Base_SetConfig+0x130>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <TIM_Base_SetConfig+0x134>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a24      	ldr	r2, [pc, #144]	; (800525c <TIM_Base_SetConfig+0x138>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a23      	ldr	r2, [pc, #140]	; (8005260 <TIM_Base_SetConfig+0x13c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <TIM_Base_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0xf8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <TIM_Base_SetConfig+0x124>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	615a      	str	r2, [r3, #20]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800
 8005258:	40001800 	.word	0x40001800
 800525c:	40001c00 	.word	0x40001c00
 8005260:	40002000 	.word	0x40002000

08005264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e03f      	b.n	800531e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb ffd2 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f829 	bl	8005328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0c0      	sub	sp, #256	; 0x100
 800532e:	af00      	add	r7, sp, #0
 8005330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	ea40 0301 	orr.w	r3, r0, r1
 8005350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	431a      	orrs	r2, r3
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005380:	f021 010c 	bic.w	r1, r1, #12
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538e:	430b      	orrs	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	6999      	ldr	r1, [r3, #24]
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	ea40 0301 	orr.w	r3, r0, r1
 80053ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8f      	ldr	r3, [pc, #572]	; (80055f4 <UART_SetConfig+0x2cc>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0xa0>
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <UART_SetConfig+0x2d0>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d104      	bne.n	80053d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe f972 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80053cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053d0:	e003      	b.n	80053da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7fe f959 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 80053d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	f040 810c 	bne.w	8005600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	65b9      	str	r1, [r7, #88]	; 0x58
 8005402:	415b      	adcs	r3, r3
 8005404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800540a:	4621      	mov	r1, r4
 800540c:	eb12 0801 	adds.w	r8, r2, r1
 8005410:	4629      	mov	r1, r5
 8005412:	eb43 0901 	adc.w	r9, r3, r1
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542a:	4690      	mov	r8, r2
 800542c:	4699      	mov	r9, r3
 800542e:	4623      	mov	r3, r4
 8005430:	eb18 0303 	adds.w	r3, r8, r3
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005438:	462b      	mov	r3, r5
 800543a:	eb49 0303 	adc.w	r3, r9, r3
 800543e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005456:	460b      	mov	r3, r1
 8005458:	18db      	adds	r3, r3, r3
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
 800545c:	4613      	mov	r3, r2
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	657b      	str	r3, [r7, #84]	; 0x54
 8005464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800546c:	f7fa feca 	bl	8000204 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <UART_SetConfig+0x2d4>)
 8005476:	fba3 2302 	umull	r2, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	011c      	lsls	r4, r3, #4
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800548c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	1891      	adds	r1, r2, r2
 8005496:	64b9      	str	r1, [r7, #72]	; 0x48
 8005498:	415b      	adcs	r3, r3
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054a0:	4641      	mov	r1, r8
 80054a2:	eb12 0a01 	adds.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0b01 	adc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c0:	4692      	mov	sl, r2
 80054c2:	469b      	mov	fp, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ce:	464b      	mov	r3, r9
 80054d0:	eb4b 0303 	adc.w	r3, fp, r3
 80054d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054ec:	460b      	mov	r3, r1
 80054ee:	18db      	adds	r3, r3, r3
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	4613      	mov	r3, r2
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005502:	f7fa fe7f 	bl	8000204 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4611      	mov	r1, r2
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <UART_SetConfig+0x2d4>)
 800550e:	fba3 2301 	umull	r2, r3, r3, r1
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2264      	movs	r2, #100	; 0x64
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <UART_SetConfig+0x2d4>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005530:	441c      	add	r4, r3
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800553c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	1891      	adds	r1, r2, r2
 800554a:	63b9      	str	r1, [r7, #56]	; 0x38
 800554c:	415b      	adcs	r3, r3
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005554:	4641      	mov	r1, r8
 8005556:	1851      	adds	r1, r2, r1
 8005558:	6339      	str	r1, [r7, #48]	; 0x30
 800555a:	4649      	mov	r1, r9
 800555c:	414b      	adcs	r3, r1
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800556c:	4659      	mov	r1, fp
 800556e:	00cb      	lsls	r3, r1, #3
 8005570:	4651      	mov	r1, sl
 8005572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005576:	4651      	mov	r1, sl
 8005578:	00ca      	lsls	r2, r1, #3
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	4603      	mov	r3, r0
 8005580:	4642      	mov	r2, r8
 8005582:	189b      	adds	r3, r3, r2
 8005584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055a8:	460b      	mov	r3, r1
 80055aa:	18db      	adds	r3, r3, r3
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	4613      	mov	r3, r2
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055be:	f7fa fe21 	bl	8000204 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <UART_SetConfig+0x2d4>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	; 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3332      	adds	r3, #50	; 0x32
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <UART_SetConfig+0x2d4>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4422      	add	r2, r4
 80055ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f0:	e105      	b.n	80057fe <UART_SetConfig+0x4d6>
 80055f2:	bf00      	nop
 80055f4:	40011000 	.word	0x40011000
 80055f8:	40011400 	.word	0x40011400
 80055fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800560a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800560e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	1891      	adds	r1, r2, r2
 8005618:	6239      	str	r1, [r7, #32]
 800561a:	415b      	adcs	r3, r3
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005622:	4641      	mov	r1, r8
 8005624:	1854      	adds	r4, r2, r1
 8005626:	4649      	mov	r1, r9
 8005628:	eb43 0501 	adc.w	r5, r3, r1
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	4643      	mov	r3, r8
 8005642:	18e3      	adds	r3, r4, r3
 8005644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005648:	464b      	mov	r3, r9
 800564a:	eb45 0303 	adc.w	r3, r5, r3
 800564e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800565e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566e:	4629      	mov	r1, r5
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005678:	4621      	mov	r1, r4
 800567a:	008a      	lsls	r2, r1, #2
 800567c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005680:	f7fa fdc0 	bl	8000204 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b60      	ldr	r3, [pc, #384]	; (800580c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011c      	lsls	r4, r3, #4
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800569c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	61b9      	str	r1, [r7, #24]
 80056ac:	415b      	adcs	r3, r3
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6139      	str	r1, [r7, #16]
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800570c:	4649      	mov	r1, r9
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	4641      	mov	r1, r8
 8005712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005716:	4641      	mov	r1, r8
 8005718:	008a      	lsls	r2, r1, #2
 800571a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800571e:	f7fa fd71 	bl	8000204 <__aeabi_uldivmod>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <UART_SetConfig+0x4e4>)
 8005728:	fba3 1302 	umull	r1, r3, r3, r2
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	2164      	movs	r1, #100	; 0x64
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	3332      	adds	r3, #50	; 0x32
 800573a:	4a34      	ldr	r2, [pc, #208]	; (800580c <UART_SetConfig+0x4e4>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005746:	441c      	add	r4, r3
 8005748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574c:	2200      	movs	r2, #0
 800574e:	673b      	str	r3, [r7, #112]	; 0x70
 8005750:	677a      	str	r2, [r7, #116]	; 0x74
 8005752:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	415b      	adcs	r3, r3
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005766:	4641      	mov	r1, r8
 8005768:	1851      	adds	r1, r2, r1
 800576a:	6039      	str	r1, [r7, #0]
 800576c:	4649      	mov	r1, r9
 800576e:	414b      	adcs	r3, r1
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577e:	4659      	mov	r1, fp
 8005780:	00cb      	lsls	r3, r1, #3
 8005782:	4651      	mov	r1, sl
 8005784:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005788:	4651      	mov	r1, sl
 800578a:	00ca      	lsls	r2, r1, #3
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	4603      	mov	r3, r0
 8005792:	4642      	mov	r2, r8
 8005794:	189b      	adds	r3, r3, r2
 8005796:	66bb      	str	r3, [r7, #104]	; 0x68
 8005798:	464b      	mov	r3, r9
 800579a:	460a      	mov	r2, r1
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	663b      	str	r3, [r7, #96]	; 0x60
 80057ac:	667a      	str	r2, [r7, #100]	; 0x64
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ba:	4649      	mov	r1, r9
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	4641      	mov	r1, r8
 80057c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c4:	4641      	mov	r1, r8
 80057c6:	008a      	lsls	r2, r1, #2
 80057c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057cc:	f7fa fd1a 	bl	8000204 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <UART_SetConfig+0x4e4>)
 80057d6:	fba3 1302 	umull	r1, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2164      	movs	r1, #100	; 0x64
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <UART_SetConfig+0x4e4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4422      	add	r2, r4
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	bf00      	nop
 8005800:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 001c 	add.w	r0, r7, #28
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b01      	cmp	r3, #1
 8005826:	d122      	bne.n	800586e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fbe8 	bl	8007038 <USB_CoreReset>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e01a      	b.n	80058a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fbdc 	bl	8007038 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
 8005896:	e005      	b.n	80058a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d10b      	bne.n	80058c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f043 0206 	orr.w	r2, r3, #6
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ce:	b004      	add	sp, #16
 80058d0:	4770      	bx	lr
	...

080058d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d165      	bne.n	80059b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a41      	ldr	r2, [pc, #260]	; (80059f0 <USB_SetTurnaroundTime+0x11c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d906      	bls.n	80058fe <USB_SetTurnaroundTime+0x2a>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <USB_SetTurnaroundTime+0x120>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d202      	bcs.n	80058fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058f8:	230f      	movs	r3, #15
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e062      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a3c      	ldr	r2, [pc, #240]	; (80059f4 <USB_SetTurnaroundTime+0x120>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d306      	bcc.n	8005914 <USB_SetTurnaroundTime+0x40>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a3b      	ldr	r2, [pc, #236]	; (80059f8 <USB_SetTurnaroundTime+0x124>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d202      	bcs.n	8005914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800590e:	230e      	movs	r3, #14
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e057      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a38      	ldr	r2, [pc, #224]	; (80059f8 <USB_SetTurnaroundTime+0x124>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d306      	bcc.n	800592a <USB_SetTurnaroundTime+0x56>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a37      	ldr	r2, [pc, #220]	; (80059fc <USB_SetTurnaroundTime+0x128>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d202      	bcs.n	800592a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005924:	230d      	movs	r3, #13
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e04c      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a33      	ldr	r2, [pc, #204]	; (80059fc <USB_SetTurnaroundTime+0x128>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d306      	bcc.n	8005940 <USB_SetTurnaroundTime+0x6c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a32      	ldr	r2, [pc, #200]	; (8005a00 <USB_SetTurnaroundTime+0x12c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d802      	bhi.n	8005940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800593a:	230c      	movs	r3, #12
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e041      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <USB_SetTurnaroundTime+0x12c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d906      	bls.n	8005956 <USB_SetTurnaroundTime+0x82>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a2e      	ldr	r2, [pc, #184]	; (8005a04 <USB_SetTurnaroundTime+0x130>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d802      	bhi.n	8005956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005950:	230b      	movs	r3, #11
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e036      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <USB_SetTurnaroundTime+0x130>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d906      	bls.n	800596c <USB_SetTurnaroundTime+0x98>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <USB_SetTurnaroundTime+0x134>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005966:	230a      	movs	r3, #10
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e02b      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <USB_SetTurnaroundTime+0x134>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d906      	bls.n	8005982 <USB_SetTurnaroundTime+0xae>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <USB_SetTurnaroundTime+0x138>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d202      	bcs.n	8005982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800597c:	2309      	movs	r3, #9
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e020      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <USB_SetTurnaroundTime+0x138>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d306      	bcc.n	8005998 <USB_SetTurnaroundTime+0xc4>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <USB_SetTurnaroundTime+0x13c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d802      	bhi.n	8005998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005992:	2308      	movs	r3, #8
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e015      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <USB_SetTurnaroundTime+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d906      	bls.n	80059ae <USB_SetTurnaroundTime+0xda>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <USB_SetTurnaroundTime+0x140>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d202      	bcs.n	80059ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059a8:	2307      	movs	r3, #7
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e00a      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059ae:	2306      	movs	r3, #6
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e007      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059ba:	2309      	movs	r3, #9
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059c0:	2309      	movs	r3, #9
 80059c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059dc:	431a      	orrs	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	00d8acbf 	.word	0x00d8acbf
 80059f4:	00e4e1c0 	.word	0x00e4e1c0
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	01067380 	.word	0x01067380
 8005a00:	011a499f 	.word	0x011a499f
 8005a04:	01312cff 	.word	0x01312cff
 8005a08:	014ca43f 	.word	0x014ca43f
 8005a0c:	016e3600 	.word	0x016e3600
 8005a10:	01a6ab1f 	.word	0x01a6ab1f
 8005a14:	01e84800 	.word	0x01e84800

08005a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d115      	bne.n	8005aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7fb fcca 	bl	8001424 <HAL_Delay>
      ms++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa3f 	bl	8006f1a <USB_GetMode>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d01e      	beq.n	8005ae0 <USB_SetCurrentMode+0x84>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b31      	cmp	r3, #49	; 0x31
 8005aa6:	d9f0      	bls.n	8005a8a <USB_SetCurrentMode+0x2e>
 8005aa8:	e01a      	b.n	8005ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d115      	bne.n	8005adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7fb fcb1 	bl	8001424 <HAL_Delay>
      ms++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fa26 	bl	8006f1a <USB_GetMode>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <USB_SetCurrentMode+0x84>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b31      	cmp	r3, #49	; 0x31
 8005ad8:	d9f0      	bls.n	8005abc <USB_SetCurrentMode+0x60>
 8005ada:	e001      	b.n	8005ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e005      	b.n	8005aec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b32      	cmp	r3, #50	; 0x32
 8005ae4:	d101      	bne.n	8005aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e009      	b.n	8005b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3340      	adds	r3, #64	; 0x40
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2200      	movs	r2, #0
 8005b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b0e      	cmp	r3, #14
 8005b2c:	d9f2      	bls.n	8005b14 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11c      	bne.n	8005b6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e005      	b.n	8005b7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b80:	461a      	mov	r2, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	461a      	mov	r2, r3
 8005b96:	680b      	ldr	r3, [r1, #0]
 8005b98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10c      	bne.n	8005bba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f965 	bl	8005e78 <USB_SetDevSpeed>
 8005bae:	e008      	b.n	8005bc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f960 	bl	8005e78 <USB_SetDevSpeed>
 8005bb8:	e003      	b.n	8005bc2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bba:	2103      	movs	r1, #3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f95b 	bl	8005e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bc2:	2110      	movs	r1, #16
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8f3 	bl	8005db0 <USB_FlushTxFifo>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f91f 	bl	8005e18 <USB_FlushRxFifo>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	461a      	mov	r2, r3
 8005bec:	2300      	movs	r3, #0
 8005bee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	e043      	b.n	8005c96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c24:	d118      	bne.n	8005c58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e013      	b.n	8005c6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e008      	b.n	8005c6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	461a      	mov	r2, r3
 8005c66:	2300      	movs	r3, #0
 8005c68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	461a      	mov	r2, r3
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3301      	adds	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3b7      	bcc.n	8005c0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e043      	b.n	8005d2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cba:	d118      	bne.n	8005cee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e013      	b.n	8005d00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	e008      	b.n	8005d00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3b7      	bcc.n	8005ca4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f043 0210 	orr.w	r2, r3, #16
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <USB_DevInit+0x2b8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f043 0208 	orr.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d94:	f043 0304 	orr.w	r3, r3, #4
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr
 8005dac:	803c3800 	.word	0x803c3800

08005db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <USB_FlushTxFifo+0x64>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e01b      	b.n	8005e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	daf2      	bge.n	8005dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	019b      	lsls	r3, r3, #6
 8005de0:	f043 0220 	orr.w	r2, r3, #32
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <USB_FlushTxFifo+0x64>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e006      	b.n	8005e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d0f0      	beq.n	8005de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	00030d40 	.word	0x00030d40

08005e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <USB_FlushRxFifo+0x5c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e018      	b.n	8005e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	daf2      	bge.n	8005e24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2210      	movs	r2, #16
 8005e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a08      	ldr	r2, [pc, #32]	; (8005e74 <USB_FlushRxFifo+0x5c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e006      	b.n	8005e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d0f0      	beq.n	8005e48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	00030d40 	.word	0x00030d40

08005e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0306 	and.w	r3, r3, #6
 8005ec2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
 8005ece:	e00a      	b.n	8005ee6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d002      	beq.n	8005edc <USB_GetDevSpeed+0x32>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b06      	cmp	r3, #6
 8005eda:	d102      	bne.n	8005ee2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005edc:	2302      	movs	r3, #2
 8005ede:	75fb      	strb	r3, [r7, #23]
 8005ee0:	e001      	b.n	8005ee6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ee2:	230f      	movs	r3, #15
 8005ee4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d13a      	bne.n	8005f86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	68f9      	ldr	r1, [r7, #12]
 8005f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d155      	bne.n	8005ff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	791b      	ldrb	r3, [r3, #4]
 8005f62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	059b      	lsls	r3, r3, #22
 8005f6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	e036      	b.n	8005ff4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11a      	bne.n	8005ff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d161      	bne.n	80060e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006036:	d11f      	bne.n	8006078 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006056:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006076:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	2101      	movs	r1, #1
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	b29b      	uxth	r3, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006098:	4013      	ands	r3, r2
 800609a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	0159      	lsls	r1, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	440b      	add	r3, r1
 80060d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060da:	4619      	mov	r1, r3
 80060dc:	4b35      	ldr	r3, [pc, #212]	; (80061b4 <USB_DeactivateEndpoint+0x1b0>)
 80060de:	4013      	ands	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]
 80060e2:	e060      	b.n	80061a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fa:	d11f      	bne.n	800613c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800613a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	2101      	movs	r1, #1
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	43db      	mvns	r3, r3
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800615c:	4013      	ands	r3, r2
 800615e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	0159      	lsls	r1, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	440b      	add	r3, r1
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	4619      	mov	r1, r3
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <USB_DeactivateEndpoint+0x1b4>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	ec337800 	.word	0xec337800
 80061b8:	eff37800 	.word	0xeff37800

080061bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f040 815c 	bne.w	8006496 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d132      	bne.n	800624c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006200:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006204:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	0cdb      	lsrs	r3, r3, #19
 8006246:	04db      	lsls	r3, r3, #19
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	e074      	b.n	8006336 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006266:	0cdb      	lsrs	r3, r3, #19
 8006268:	04db      	lsls	r3, r3, #19
 800626a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800628a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800628e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	440b      	add	r3, r1
 80062a8:	1e59      	subs	r1, r3, #1
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80062b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062b4:	4b9d      	ldr	r3, [pc, #628]	; (800652c <USB_EPStartXfer+0x370>)
 80062b6:	400b      	ands	r3, r1
 80062b8:	69b9      	ldr	r1, [r7, #24]
 80062ba:	0148      	lsls	r0, r1, #5
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	4401      	add	r1, r0
 80062c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062c4:	4313      	orrs	r3, r2
 80062c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062de:	69b9      	ldr	r1, [r7, #24]
 80062e0:	0148      	lsls	r0, r1, #5
 80062e2:	69f9      	ldr	r1, [r7, #28]
 80062e4:	4401      	add	r1, r0
 80062e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062ea:	4313      	orrs	r3, r2
 80062ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d11f      	bne.n	8006336 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006310:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006314:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006334:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d14b      	bne.n	80063d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	461a      	mov	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	791b      	ldrb	r3, [r3, #4]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d128      	bne.n	80063b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d110      	bne.n	8006392 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e00f      	b.n	80063b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	e133      	b.n	800663c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d015      	beq.n	8006428 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 811b 	beq.w	800663c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006422:	4313      	orrs	r3, r2
 8006424:	634b      	str	r3, [r1, #52]	; 0x34
 8006426:	e109      	b.n	800663c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e00f      	b.n	800647a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	6919      	ldr	r1, [r3, #16]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	b298      	uxth	r0, r3
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	4603      	mov	r3, r0
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fade 	bl	8006a50 <USB_WritePacket>
 8006494:	e0d2      	b.n	800663c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b0:	0cdb      	lsrs	r3, r3, #19
 80064b2:	04db      	lsls	r3, r3, #19
 80064b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d126      	bne.n	8006530 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	0148      	lsls	r0, r1, #5
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	4401      	add	r1, r0
 8006500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006504:	4313      	orrs	r3, r2
 8006506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006526:	6113      	str	r3, [r2, #16]
 8006528:	e03a      	b.n	80065a0 <USB_EPStartXfer+0x3e4>
 800652a:	bf00      	nop
 800652c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4413      	add	r3, r2
 800653a:	1e5a      	subs	r2, r3, #1
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	8afa      	ldrh	r2, [r7, #22]
 800654c:	fb03 f202 	mul.w	r2, r3, r2
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	8afb      	ldrh	r3, [r7, #22]
 8006564:	04d9      	lsls	r1, r3, #19
 8006566:	4b38      	ldr	r3, [pc, #224]	; (8006648 <USB_EPStartXfer+0x48c>)
 8006568:	400b      	ands	r3, r1
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	0148      	lsls	r0, r1, #5
 800656e:	69f9      	ldr	r1, [r7, #28]
 8006570:	4401      	add	r1, r0
 8006572:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006590:	69b9      	ldr	r1, [r7, #24]
 8006592:	0148      	lsls	r0, r1, #5
 8006594:	69f9      	ldr	r1, [r7, #28]
 8006596:	4401      	add	r1, r0
 8006598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800659c:	4313      	orrs	r3, r2
 800659e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10d      	bne.n	80065c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6919      	ldr	r1, [r3, #16]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	460a      	mov	r2, r1
 80065c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	791b      	ldrb	r3, [r3, #4]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d128      	bne.n	800661c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d110      	bne.n	80065fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e00f      	b.n	800661c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800663a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	1ff80000 	.word	0x1ff80000

0800664c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 80ce 	bne.w	800680a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d132      	bne.n	80066dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006690:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006694:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d4:	0cdb      	lsrs	r3, r3, #19
 80066d6:	04db      	lsls	r3, r3, #19
 80066d8:	6113      	str	r3, [r2, #16]
 80066da:	e04e      	b.n	800677a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f6:	0cdb      	lsrs	r3, r3, #19
 80066f8:	04db      	lsls	r3, r3, #19
 80066fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006716:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800671a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800671e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	429a      	cmp	r2, r3
 800672a:	d903      	bls.n	8006734 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	6939      	ldr	r1, [r7, #16]
 800676c:	0148      	lsls	r0, r1, #5
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	4401      	add	r1, r0
 8006772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006776:	4313      	orrs	r3, r2
 8006778:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d11e      	bne.n	80067be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	461a      	mov	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	e097      	b.n	80068ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8083 	beq.w	80068ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	6979      	ldr	r1, [r7, #20]
 8006800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006804:	4313      	orrs	r3, r2
 8006806:	634b      	str	r3, [r1, #52]	; 0x34
 8006808:	e071      	b.n	80068ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	440a      	add	r2, r1
 8006840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800684c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006884:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689c:	6939      	ldr	r1, [r7, #16]
 800689e:	0148      	lsls	r0, r1, #5
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	4401      	add	r1, r0
 80068a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068a8:	4313      	orrs	r3, r2
 80068aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10d      	bne.n	80068ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	460a      	mov	r2, r1
 80068cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d14a      	bne.n	80069b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006932:	f040 8086 	bne.w	8006a42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006958:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f242 7210 	movw	r2, #10000	; 0x2710
 800698a:	4293      	cmp	r3, r2
 800698c:	d902      	bls.n	8006994 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
          break;
 8006992:	e056      	b.n	8006a42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ac:	d0e7      	beq.n	800697e <USB_EPStopXfer+0x82>
 80069ae:	e048      	b.n	8006a42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c8:	d13b      	bne.n	8006a42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d902      	bls.n	8006a28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e00c      	b.n	8006a42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a40:	d0e7      	beq.n	8006a12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b089      	sub	sp, #36	; 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	460b      	mov	r3, r1
 8006a60:	71fb      	strb	r3, [r7, #7]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d123      	bne.n	8006abe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a76:	88bb      	ldrh	r3, [r7, #4]
 8006a78:	3303      	adds	r3, #3
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e018      	b.n	8006ab6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	031a      	lsls	r2, r3, #12
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	461a      	mov	r2, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d3e2      	bcc.n	8006a84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3724      	adds	r7, #36	; 0x24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b08b      	sub	sp, #44	; 0x2c
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	089b      	lsrs	r3, r3, #2
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	e014      	b.n	8006b22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3301      	adds	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3301      	adds	r3, #1
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	3301      	adds	r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3e6      	bcc.n	8006af8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b2a:	8bfb      	ldrh	r3, [r7, #30]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01e      	beq.n	8006b6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f107 0310 	add.w	r3, r7, #16
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	701a      	strb	r2, [r3, #0]
      i++;
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	3301      	adds	r3, #1
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b62:	8bfb      	ldrh	r3, [r7, #30]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b68:	8bfb      	ldrh	r3, [r7, #30]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ea      	bne.n	8006b44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	372c      	adds	r7, #44	; 0x2c
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d12c      	bne.n	8006bf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	db12      	blt.n	8006bd0 <USB_EPSetStall+0x54>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	e02b      	b.n	8006c4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	db12      	blt.n	8006c2a <USB_EPSetStall+0xae>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00f      	beq.n	8006c2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d128      	bne.n	8006cc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d003      	beq.n	8006ca4 <USB_EPClearStall+0x4c>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d138      	bne.n	8006d16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e027      	b.n	8006d16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ce4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d003      	beq.n	8006cf6 <USB_EPClearStall+0x9e>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d10f      	bne.n	8006d16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d8a:	f023 0303 	bic.w	r3, r3, #3
 8006d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d9e:	f023 0302 	bic.w	r3, r3, #2
 8006da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	0c1b      	lsrs	r3, r3, #16
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	b29b      	uxth	r3, r3
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b085      	sub	sp, #20
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b087      	sub	sp, #28
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	01db      	lsls	r3, r3, #7
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f003 0301 	and.w	r3, r3, #1
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f54:	f023 0307 	bic.w	r3, r3, #7
 8006f58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	460b      	mov	r3, r1
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	333c      	adds	r3, #60	; 0x3c
 8006f92:	3304      	adds	r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4a26      	ldr	r2, [pc, #152]	; (8007034 <USB_EP0_OutStart+0xb8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d90a      	bls.n	8006fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb0:	d101      	bne.n	8006fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e037      	b.n	8007026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe4:	f043 0318 	orr.w	r3, r3, #24
 8006fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10f      	bne.n	8007024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	4f54300a 	.word	0x4f54300a

08007038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <USB_CoreReset+0x64>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e01b      	b.n	800708e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	daf2      	bge.n	8007044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f043 0201 	orr.w	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3301      	adds	r3, #1
 8007072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a09      	ldr	r2, [pc, #36]	; (800709c <USB_CoreReset+0x64>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e006      	b.n	800708e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d0f0      	beq.n	800706e <USB_CoreReset+0x36>

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	00030d40 	.word	0x00030d40

080070a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070b0:	f002 fcc8 	bl	8009a44 <USBD_static_malloc>
 80070b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	32b0      	adds	r2, #176	; 0xb0
 80070c6:	2100      	movs	r1, #0
 80070c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e0d4      	b.n	800727a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f002 fd1c 	bl	8009b14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	32b0      	adds	r2, #176	; 0xb0
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32b0      	adds	r2, #176	; 0xb0
 80070f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7c1b      	ldrb	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d138      	bne.n	800717a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007108:	4b5e      	ldr	r3, [pc, #376]	; (8007284 <USBD_CDC_Init+0x1e4>)
 800710a:	7819      	ldrb	r1, [r3, #0]
 800710c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007110:	2202      	movs	r2, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f002 fb25 	bl	8009762 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007118:	4b5a      	ldr	r3, [pc, #360]	; (8007284 <USBD_CDC_Init+0x1e4>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3324      	adds	r3, #36	; 0x24
 800712e:	2201      	movs	r2, #1
 8007130:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007132:	4b55      	ldr	r3, [pc, #340]	; (8007288 <USBD_CDC_Init+0x1e8>)
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713a:	2202      	movs	r2, #2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f002 fb10 	bl	8009762 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007142:	4b51      	ldr	r3, [pc, #324]	; (8007288 <USBD_CDC_Init+0x1e8>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800715a:	2201      	movs	r2, #1
 800715c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800715e:	4b4b      	ldr	r3, [pc, #300]	; (800728c <USBD_CDC_Init+0x1ec>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 020f 	and.w	r2, r3, #15
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3326      	adds	r3, #38	; 0x26
 8007174:	2210      	movs	r2, #16
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e035      	b.n	80071e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800717a:	4b42      	ldr	r3, [pc, #264]	; (8007284 <USBD_CDC_Init+0x1e4>)
 800717c:	7819      	ldrb	r1, [r3, #0]
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	2202      	movs	r2, #2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 faed 	bl	8009762 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007188:	4b3e      	ldr	r3, [pc, #248]	; (8007284 <USBD_CDC_Init+0x1e4>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3324      	adds	r3, #36	; 0x24
 800719e:	2201      	movs	r2, #1
 80071a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071a2:	4b39      	ldr	r3, [pc, #228]	; (8007288 <USBD_CDC_Init+0x1e8>)
 80071a4:	7819      	ldrb	r1, [r3, #0]
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	2202      	movs	r2, #2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f002 fad9 	bl	8009762 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071b0:	4b35      	ldr	r3, [pc, #212]	; (8007288 <USBD_CDC_Init+0x1e8>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071c8:	2201      	movs	r2, #1
 80071ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071cc:	4b2f      	ldr	r3, [pc, #188]	; (800728c <USBD_CDC_Init+0x1ec>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	3326      	adds	r3, #38	; 0x26
 80071e2:	2210      	movs	r2, #16
 80071e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <USBD_CDC_Init+0x1ec>)
 80071e8:	7819      	ldrb	r1, [r3, #0]
 80071ea:	2308      	movs	r3, #8
 80071ec:	2203      	movs	r2, #3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fab7 	bl	8009762 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071f4:	4b25      	ldr	r3, [pc, #148]	; (800728c <USBD_CDC_Init+0x1ec>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	2201      	movs	r2, #1
 800720c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	33b0      	adds	r3, #176	; 0xb0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007244:	2302      	movs	r3, #2
 8007246:	e018      	b.n	800727a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1b      	ldrb	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <USBD_CDC_Init+0x1e8>)
 8007252:	7819      	ldrb	r1, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800725a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f002 fb6e 	bl	8009940 <USBD_LL_PrepareReceive>
 8007264:	e008      	b.n	8007278 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <USBD_CDC_Init+0x1e8>)
 8007268:	7819      	ldrb	r1, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007270:	2340      	movs	r3, #64	; 0x40
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fb64 	bl	8009940 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000093 	.word	0x20000093
 8007288:	20000094 	.word	0x20000094
 800728c:	20000095 	.word	0x20000095

08007290 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800729c:	4b3a      	ldr	r3, [pc, #232]	; (8007388 <USBD_CDC_DeInit+0xf8>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 fa83 	bl	80097ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072a8:	4b37      	ldr	r3, [pc, #220]	; (8007388 <USBD_CDC_DeInit+0xf8>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3324      	adds	r3, #36	; 0x24
 80072be:	2200      	movs	r2, #0
 80072c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072c2:	4b32      	ldr	r3, [pc, #200]	; (800738c <USBD_CDC_DeInit+0xfc>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 fa70 	bl	80097ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <USBD_CDC_DeInit+0xfc>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <USBD_CDC_DeInit+0x100>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 fa5c 	bl	80097ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80072f6:	4b26      	ldr	r3, [pc, #152]	; (8007390 <USBD_CDC_DeInit+0x100>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 020f 	and.w	r2, r3, #15
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	2200      	movs	r2, #0
 800730e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007310:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <USBD_CDC_DeInit+0x100>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 020f 	and.w	r2, r3, #15
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	3326      	adds	r3, #38	; 0x26
 8007326:	2200      	movs	r2, #0
 8007328:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32b0      	adds	r2, #176	; 0xb0
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01f      	beq.n	800737c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	33b0      	adds	r3, #176	; 0xb0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32b0      	adds	r2, #176	; 0xb0
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	4618      	mov	r0, r3
 8007360:	f002 fb7e 	bl	8009a60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	; 0xb0
 800736e:	2100      	movs	r1, #0
 8007370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000093 	.word	0x20000093
 800738c:	20000094 	.word	0x20000094
 8007390:	20000095 	.word	0x20000095

08007394 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	32b0      	adds	r2, #176	; 0xb0
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e0bf      	b.n	8007544 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d050      	beq.n	8007472 <USBD_CDC_Setup+0xde>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	f040 80af 	bne.w	8007534 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d03a      	beq.n	8007454 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da1b      	bge.n	8007420 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	33b0      	adds	r3, #176	; 0xb0
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80073fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	88d2      	ldrh	r2, [r2, #6]
 8007404:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	88db      	ldrh	r3, [r3, #6]
 800740a:	2b07      	cmp	r3, #7
 800740c:	bf28      	it	cs
 800740e:	2307      	movcs	r3, #7
 8007410:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	89fa      	ldrh	r2, [r7, #14]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fd6d 	bl	8008ef8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800741e:	e090      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785a      	ldrb	r2, [r3, #1]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b3f      	cmp	r3, #63	; 0x3f
 8007430:	d803      	bhi.n	800743a <USBD_CDC_Setup+0xa6>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	88db      	ldrh	r3, [r3, #6]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	e000      	b.n	800743c <USBD_CDC_Setup+0xa8>
 800743a:	2240      	movs	r2, #64	; 0x40
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007442:	6939      	ldr	r1, [r7, #16]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800744a:	461a      	mov	r2, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 fd7f 	bl	8008f50 <USBD_CtlPrepareRx>
      break;
 8007452:	e076      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	33b0      	adds	r3, #176	; 0xb0
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	7850      	ldrb	r0, [r2, #1]
 800746a:	2200      	movs	r2, #0
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	4798      	blx	r3
      break;
 8007470:	e067      	b.n	8007542 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b0b      	cmp	r3, #11
 8007478:	d851      	bhi.n	800751e <USBD_CDC_Setup+0x18a>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_CDC_Setup+0xec>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074b1 	.word	0x080074b1
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800751f 	.word	0x0800751f
 800748c:	0800751f 	.word	0x0800751f
 8007490:	0800751f 	.word	0x0800751f
 8007494:	0800751f 	.word	0x0800751f
 8007498:	0800751f 	.word	0x0800751f
 800749c:	0800751f 	.word	0x0800751f
 80074a0:	0800751f 	.word	0x0800751f
 80074a4:	0800751f 	.word	0x0800751f
 80074a8:	080074db 	.word	0x080074db
 80074ac:	08007505 	.word	0x08007505
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d107      	bne.n	80074cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074bc:	f107 030a 	add.w	r3, r7, #10
 80074c0:	2202      	movs	r2, #2
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fd17 	bl	8008ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ca:	e032      	b.n	8007532 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fca1 	bl	8008e16 <USBD_CtlError>
            ret = USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	75fb      	strb	r3, [r7, #23]
          break;
 80074d8:	e02b      	b.n	8007532 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d107      	bne.n	80074f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074e6:	f107 030d 	add.w	r3, r7, #13
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fd02 	bl	8008ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074f4:	e01d      	b.n	8007532 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fc8c 	bl	8008e16 <USBD_CtlError>
            ret = USBD_FAIL;
 80074fe:	2303      	movs	r3, #3
 8007500:	75fb      	strb	r3, [r7, #23]
          break;
 8007502:	e016      	b.n	8007532 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d00f      	beq.n	8007530 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fc7f 	bl	8008e16 <USBD_CtlError>
            ret = USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800751c:	e008      	b.n	8007530 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fc78 	bl	8008e16 <USBD_CtlError>
          ret = USBD_FAIL;
 8007526:	2303      	movs	r3, #3
 8007528:	75fb      	strb	r3, [r7, #23]
          break;
 800752a:	e002      	b.n	8007532 <USBD_CDC_Setup+0x19e>
          break;
 800752c:	bf00      	nop
 800752e:	e008      	b.n	8007542 <USBD_CDC_Setup+0x1ae>
          break;
 8007530:	bf00      	nop
      }
      break;
 8007532:	e006      	b.n	8007542 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc6d 	bl	8008e16 <USBD_CtlError>
      ret = USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
      break;
 8007540:	bf00      	nop
  }

  return (uint8_t)ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800755e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32b0      	adds	r2, #176	; 0xb0
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007572:	2303      	movs	r3, #3
 8007574:	e065      	b.n	8007642 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	32b0      	adds	r2, #176	; 0xb0
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3318      	adds	r3, #24
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02f      	beq.n	8007600 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3318      	adds	r3, #24
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	f003 010f 	and.w	r1, r3, #15
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	460b      	mov	r3, r1
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	440b      	add	r3, r1
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4403      	add	r3, r0
 80075c8:	3348      	adds	r3, #72	; 0x48
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80075d0:	fb01 f303 	mul.w	r3, r1, r3
 80075d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d112      	bne.n	8007600 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 020f 	and.w	r2, r3, #15
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	440b      	add	r3, r1
 80075ec:	3318      	adds	r3, #24
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075f2:	78f9      	ldrb	r1, [r7, #3]
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f980 	bl	80098fe <USBD_LL_Transmit>
 80075fe:	e01f      	b.n	8007640 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	33b0      	adds	r3, #176	; 0xb0
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	33b0      	adds	r3, #176	; 0xb0
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32b0      	adds	r2, #176	; 0xb0
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	; 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01a      	b.n	80076b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f002 f97e 	bl	8009982 <USBD_LL_GetRxDataSize>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	33b0      	adds	r3, #176	; 0xb0
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076ac:	4611      	mov	r1, r2
 80076ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32b0      	adds	r2, #176	; 0xb0
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e025      	b.n	8007728 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	33b0      	adds	r3, #176	; 0xb0
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01a      	beq.n	8007726 <USBD_CDC_EP0_RxReady+0x6c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d015      	beq.n	8007726 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	33b0      	adds	r3, #176	; 0xb0
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007712:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800771a:	b292      	uxth	r2, r2
 800771c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	22ff      	movs	r2, #255	; 0xff
 8007722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007738:	2182      	movs	r1, #130	; 0x82
 800773a:	4818      	ldr	r0, [pc, #96]	; (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800773c:	f000 fd09 	bl	8008152 <USBD_GetEpDesc>
 8007740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007742:	2101      	movs	r1, #1
 8007744:	4815      	ldr	r0, [pc, #84]	; (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007746:	f000 fd04 	bl	8008152 <USBD_GetEpDesc>
 800774a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800774c:	2181      	movs	r1, #129	; 0x81
 800774e:	4813      	ldr	r0, [pc, #76]	; (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007750:	f000 fcff 	bl	8008152 <USBD_GetEpDesc>
 8007754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2210      	movs	r2, #16
 8007760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2200      	movs	r2, #0
 800776c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007770:	711a      	strb	r2, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2243      	movs	r2, #67	; 0x43
 800778e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000050 	.word	0x20000050

080077a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077a8:	2182      	movs	r1, #130	; 0x82
 80077aa:	4818      	ldr	r0, [pc, #96]	; (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077ac:	f000 fcd1 	bl	8008152 <USBD_GetEpDesc>
 80077b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077b2:	2101      	movs	r1, #1
 80077b4:	4815      	ldr	r0, [pc, #84]	; (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077b6:	f000 fccc 	bl	8008152 <USBD_GetEpDesc>
 80077ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077bc:	2181      	movs	r1, #129	; 0x81
 80077be:	4813      	ldr	r0, [pc, #76]	; (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077c0:	f000 fcc7 	bl	8008152 <USBD_GetEpDesc>
 80077c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2210      	movs	r2, #16
 80077d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2200      	movs	r2, #0
 80077dc:	711a      	strb	r2, [r3, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f042 0202 	orr.w	r2, r2, #2
 80077e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	711a      	strb	r2, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f042 0202 	orr.w	r2, r2, #2
 80077f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2243      	movs	r2, #67	; 0x43
 80077fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000050 	.word	0x20000050

08007810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007818:	2182      	movs	r1, #130	; 0x82
 800781a:	4818      	ldr	r0, [pc, #96]	; (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800781c:	f000 fc99 	bl	8008152 <USBD_GetEpDesc>
 8007820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007822:	2101      	movs	r1, #1
 8007824:	4815      	ldr	r0, [pc, #84]	; (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007826:	f000 fc94 	bl	8008152 <USBD_GetEpDesc>
 800782a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800782c:	2181      	movs	r1, #129	; 0x81
 800782e:	4813      	ldr	r0, [pc, #76]	; (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007830:	f000 fc8f 	bl	8008152 <USBD_GetEpDesc>
 8007834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2210      	movs	r2, #16
 8007840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2200      	movs	r2, #0
 800784c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007850:	711a      	strb	r2, [r3, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007864:	711a      	strb	r2, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2243      	movs	r2, #67	; 0x43
 800786e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007870:	4b02      	ldr	r3, [pc, #8]	; (800787c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000050 	.word	0x20000050

08007880 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220a      	movs	r2, #10
 800788c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	2000000c 	.word	0x2000000c

080078a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e009      	b.n	80078c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	33b0      	adds	r3, #176	; 0xb0
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	32b0      	adds	r2, #176	; 0xb0
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e008      	b.n	800790c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	32b0      	adds	r2, #176	; 0xb0
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	e004      	b.n	8007946 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32b0      	adds	r2, #176	; 0xb0
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32b0      	adds	r2, #176	; 0xb0
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	e018      	b.n	80079b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <USBD_CDC_ReceivePacket+0x68>)
 800798c:	7819      	ldrb	r1, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 ffd1 	bl	8009940 <USBD_LL_PrepareReceive>
 800799e:	e008      	b.n	80079b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <USBD_CDC_ReceivePacket+0x68>)
 80079a2:	7819      	ldrb	r1, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 ffc7 	bl	8009940 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000094 	.word	0x20000094

080079c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e01f      	b.n	8007a18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	79fa      	ldrb	r2, [r7, #7]
 8007a0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f001 fe41 	bl	8009694 <USBD_LL_Init>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e025      	b.n	8007a84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32ae      	adds	r2, #174	; 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00f      	beq.n	8007a74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32ae      	adds	r2, #174	; 0xae
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	f107 020e 	add.w	r2, r7, #14
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fe49 	bl	800972c <USBD_LL_Start>
 8007a9a:	4603      	mov	r3, r0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d009      	beq.n	8007ae8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f932 	bl	8008da2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d01a      	beq.n	8007b98 <USBD_LL_SetupStage+0x72>
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d822      	bhi.n	8007bac <USBD_LL_SetupStage+0x86>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <USBD_LL_SetupStage+0x4a>
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d00a      	beq.n	8007b84 <USBD_LL_SetupStage+0x5e>
 8007b6e:	e01d      	b.n	8007bac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb5f 	bl	800823c <USBD_StdDevReq>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]
      break;
 8007b82:	e020      	b.n	8007bc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fbc7 	bl	8008320 <USBD_StdItfReq>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
      break;
 8007b96:	e016      	b.n	8007bc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc29 	bl	80083f8 <USBD_StdEPReq>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8007baa:	e00c      	b.n	8007bc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fe16 	bl	80097ec <USBD_LL_StallEP>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc4:	bf00      	nop
  }

  return ret;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d16e      	bne.n	8007cc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	f040 8098 	bne.w	8007d2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d913      	bls.n	8007c30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	bf28      	it	cs
 8007c22:	4613      	movcs	r3, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 f9ae 	bl	8008f8a <USBD_CtlContinueRx>
 8007c2e:	e07d      	b.n	8007d2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d014      	beq.n	8007c68 <USBD_LL_DataOutStage+0x98>
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d81d      	bhi.n	8007c7e <USBD_LL_DataOutStage+0xae>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <USBD_LL_DataOutStage+0x7c>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d003      	beq.n	8007c52 <USBD_LL_DataOutStage+0x82>
 8007c4a:	e018      	b.n	8007c7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	75bb      	strb	r3, [r7, #22]
            break;
 8007c50:	e018      	b.n	8007c84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fa5e 	bl	800811e <USBD_CoreFindIF>
 8007c62:	4603      	mov	r3, r0
 8007c64:	75bb      	strb	r3, [r7, #22]
            break;
 8007c66:	e00d      	b.n	8007c84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	4619      	mov	r1, r3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fa60 	bl	8008138 <USBD_CoreFindEP>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75bb      	strb	r3, [r7, #22]
            break;
 8007c7c:	e002      	b.n	8007c84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75bb      	strb	r3, [r7, #22]
            break;
 8007c82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c84:	7dbb      	ldrb	r3, [r7, #22]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d119      	bne.n	8007cbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d113      	bne.n	8007cbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c96:	7dba      	ldrb	r2, [r7, #22]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	32ae      	adds	r2, #174	; 0xae
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ca6:	7dba      	ldrb	r2, [r7, #22]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cae:	7dba      	ldrb	r2, [r7, #22]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	32ae      	adds	r2, #174	; 0xae
 8007cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f001 f974 	bl	8008fac <USBD_CtlSendStatus>
 8007cc4:	e032      	b.n	8007d2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fa31 	bl	8008138 <USBD_CoreFindEP>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cda:	7dbb      	ldrb	r3, [r7, #22]
 8007cdc:	2bff      	cmp	r3, #255	; 0xff
 8007cde:	d025      	beq.n	8007d2c <USBD_LL_DataOutStage+0x15c>
 8007ce0:	7dbb      	ldrb	r3, [r7, #22]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d122      	bne.n	8007d2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d117      	bne.n	8007d22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007cf2:	7dba      	ldrb	r2, [r7, #22]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	32ae      	adds	r2, #174	; 0xae
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d02:	7dba      	ldrb	r2, [r7, #22]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d0a:	7dba      	ldrb	r2, [r7, #22]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	32ae      	adds	r2, #174	; 0xae
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	7afa      	ldrb	r2, [r7, #11]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	e000      	b.n	8007d2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d16f      	bne.n	8007e2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d15a      	bne.n	8007e10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d914      	bls.n	8007d90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f001 f8d6 	bl	8008f2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d82:	2300      	movs	r3, #0
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 fdd9 	bl	8009940 <USBD_LL_PrepareReceive>
 8007d8e:	e03f      	b.n	8007e10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d11c      	bne.n	8007dd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d316      	bcc.n	8007dd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d20f      	bcs.n	8007dd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 f8b7 	bl	8008f2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f001 fdb6 	bl	8009940 <USBD_LL_PrepareReceive>
 8007dd4:	e01c      	b.n	8007e10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d10f      	bne.n	8007e02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e02:	2180      	movs	r1, #128	; 0x80
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 fcf1 	bl	80097ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f001 f8e1 	bl	8008fd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d03a      	beq.n	8007e90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff fe42 	bl	8007aa4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e28:	e032      	b.n	8007e90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	4619      	mov	r1, r3
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f97f 	bl	8008138 <USBD_CoreFindEP>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2bff      	cmp	r3, #255	; 0xff
 8007e42:	d025      	beq.n	8007e90 <USBD_LL_DataInStage+0x15a>
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d122      	bne.n	8007e90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d11c      	bne.n	8007e90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e56:	7dfa      	ldrb	r2, [r7, #23]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	32ae      	adds	r2, #174	; 0xae
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d014      	beq.n	8007e90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e66:	7dfa      	ldrb	r2, [r7, #23]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e6e:	7dfa      	ldrb	r2, [r7, #23]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	32ae      	adds	r2, #174	; 0xae
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	7afa      	ldrb	r2, [r7, #11]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e86:	7dbb      	ldrb	r3, [r7, #22]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e8c:	7dbb      	ldrb	r3, [r7, #22]
 8007e8e:	e000      	b.n	8007e92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d014      	beq.n	8007f00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00e      	beq.n	8007f00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6852      	ldr	r2, [r2, #4]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	2200      	movs	r2, #0
 8007f04:	2100      	movs	r1, #0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fc2b 	bl	8009762 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2240      	movs	r2, #64	; 0x40
 8007f18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f1c:	2340      	movs	r3, #64	; 0x40
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2180      	movs	r1, #128	; 0x80
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 fc1d 	bl	8009762 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2240      	movs	r2, #64	; 0x40
 8007f32:	621a      	str	r2, [r3, #32]

  return ret;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2204      	movs	r2, #4
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d106      	bne.n	8007fac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d110      	bne.n	8007ff0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	32ae      	adds	r2, #174	; 0xae
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	e01c      	b.n	8008056 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b03      	cmp	r3, #3
 8008026:	d115      	bne.n	8008054 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32ae      	adds	r2, #174	; 0xae
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32ae      	adds	r2, #174	; 0xae
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	4611      	mov	r1, r2
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32ae      	adds	r2, #174	; 0xae
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e01c      	b.n	80080ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b03      	cmp	r3, #3
 800808a:	d115      	bne.n	80080b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	32ae      	adds	r2, #174	; 0xae
 8008096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32ae      	adds	r2, #174	; 0xae
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	78fa      	ldrb	r2, [r7, #3]
 80080b2:	4611      	mov	r1, r2
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6852      	ldr	r2, [r2, #4]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	4611      	mov	r1, r2
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800812a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008144:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	429a      	cmp	r2, r3
 8008178:	d920      	bls.n	80081bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008182:	e013      	b.n	80081ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008184:	f107 030a 	add.w	r3, r7, #10
 8008188:	4619      	mov	r1, r3
 800818a:	6978      	ldr	r0, [r7, #20]
 800818c:	f000 f81b 	bl	80081c6 <USBD_GetNextDesc>
 8008190:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b05      	cmp	r3, #5
 8008198:	d108      	bne.n	80081ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	789b      	ldrb	r3, [r3, #2]
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d008      	beq.n	80081ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	897b      	ldrh	r3, [r7, #10]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d8e5      	bhi.n	8008184 <USBD_GetEpDesc+0x32>
 80081b8:	e000      	b.n	80081bc <USBD_GetEpDesc+0x6a>
          break;
 80081ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081bc:	693b      	ldr	r3, [r7, #16]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	881a      	ldrh	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	4413      	add	r3, r2
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	3301      	adds	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800821e:	8a3b      	ldrh	r3, [r7, #16]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	b21a      	sxth	r2, r3
 8008224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008228:	4313      	orrs	r3, r2
 800822a:	b21b      	sxth	r3, r3
 800822c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800822e:	89fb      	ldrh	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d005      	beq.n	8008262 <USBD_StdDevReq+0x26>
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d857      	bhi.n	800830a <USBD_StdDevReq+0xce>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00f      	beq.n	800827e <USBD_StdDevReq+0x42>
 800825e:	2b20      	cmp	r3, #32
 8008260:	d153      	bne.n	800830a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	32ae      	adds	r2, #174	; 0xae
 800826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
      break;
 800827c:	e04a      	b.n	8008314 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	2b09      	cmp	r3, #9
 8008284:	d83b      	bhi.n	80082fe <USBD_StdDevReq+0xc2>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBD_StdDevReq+0x50>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082e1 	.word	0x080082e1
 8008290:	080082f5 	.word	0x080082f5
 8008294:	080082ff 	.word	0x080082ff
 8008298:	080082eb 	.word	0x080082eb
 800829c:	080082ff 	.word	0x080082ff
 80082a0:	080082bf 	.word	0x080082bf
 80082a4:	080082b5 	.word	0x080082b5
 80082a8:	080082ff 	.word	0x080082ff
 80082ac:	080082d7 	.word	0x080082d7
 80082b0:	080082c9 	.word	0x080082c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa3c 	bl	8008734 <USBD_GetDescriptor>
          break;
 80082bc:	e024      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbcb 	bl	8008a5c <USBD_SetAddress>
          break;
 80082c6:	e01f      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fc0a 	bl	8008ae4 <USBD_SetConfig>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]
          break;
 80082d4:	e018      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fcad 	bl	8008c38 <USBD_GetConfig>
          break;
 80082de:	e013      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fcde 	bl	8008ca4 <USBD_GetStatus>
          break;
 80082e8:	e00e      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fd0d 	bl	8008d0c <USBD_SetFeature>
          break;
 80082f2:	e009      	b.n	8008308 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fd31 	bl	8008d5e <USBD_ClrFeature>
          break;
 80082fc:	e004      	b.n	8008308 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fd88 	bl	8008e16 <USBD_CtlError>
          break;
 8008306:	bf00      	nop
      }
      break;
 8008308:	e004      	b.n	8008314 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fd82 	bl	8008e16 <USBD_CtlError>
      break;
 8008312:	bf00      	nop
  }

  return ret;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop

08008320 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d005      	beq.n	8008346 <USBD_StdItfReq+0x26>
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d852      	bhi.n	80083e4 <USBD_StdItfReq+0xc4>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <USBD_StdItfReq+0x26>
 8008342:	2b20      	cmp	r3, #32
 8008344:	d14e      	bne.n	80083e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	2b02      	cmp	r3, #2
 8008352:	d840      	bhi.n	80083d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	889b      	ldrh	r3, [r3, #4]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b01      	cmp	r3, #1
 800835c:	d836      	bhi.n	80083cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	889b      	ldrh	r3, [r3, #4]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fed9 	bl	800811e <USBD_CoreFindIF>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2bff      	cmp	r3, #255	; 0xff
 8008374:	d01d      	beq.n	80083b2 <USBD_StdItfReq+0x92>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d11a      	bne.n	80083b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800837c:	7bba      	ldrb	r2, [r7, #14]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	; 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00f      	beq.n	80083ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800838c:	7bba      	ldrb	r2, [r7, #14]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008394:	7bba      	ldrb	r2, [r7, #14]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32ae      	adds	r2, #174	; 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083aa:	e004      	b.n	80083b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083b0:	e001      	b.n	80083b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083b2:	2303      	movs	r3, #3
 80083b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	88db      	ldrh	r3, [r3, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d110      	bne.n	80083e0 <USBD_StdItfReq+0xc0>
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10d      	bne.n	80083e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fdf1 	bl	8008fac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083ca:	e009      	b.n	80083e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fd21 	bl	8008e16 <USBD_CtlError>
          break;
 80083d4:	e004      	b.n	80083e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fd1c 	bl	8008e16 <USBD_CtlError>
          break;
 80083de:	e000      	b.n	80083e2 <USBD_StdItfReq+0xc2>
          break;
 80083e0:	bf00      	nop
      }
      break;
 80083e2:	e004      	b.n	80083ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fd15 	bl	8008e16 <USBD_CtlError>
      break;
 80083ec:	bf00      	nop
  }

  return ret;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	889b      	ldrh	r3, [r3, #4]
 800840a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d007      	beq.n	8008428 <USBD_StdEPReq+0x30>
 8008418:	2b40      	cmp	r3, #64	; 0x40
 800841a:	f200 817f 	bhi.w	800871c <USBD_StdEPReq+0x324>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d02a      	beq.n	8008478 <USBD_StdEPReq+0x80>
 8008422:	2b20      	cmp	r3, #32
 8008424:	f040 817a 	bne.w	800871c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fe83 	bl	8008138 <USBD_CoreFindEP>
 8008432:	4603      	mov	r3, r0
 8008434:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008436:	7b7b      	ldrb	r3, [r7, #13]
 8008438:	2bff      	cmp	r3, #255	; 0xff
 800843a:	f000 8174 	beq.w	8008726 <USBD_StdEPReq+0x32e>
 800843e:	7b7b      	ldrb	r3, [r7, #13]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 8170 	bne.w	8008726 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008446:	7b7a      	ldrb	r2, [r7, #13]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800844e:	7b7a      	ldrb	r2, [r7, #13]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	32ae      	adds	r2, #174	; 0xae
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8163 	beq.w	8008726 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008460:	7b7a      	ldrb	r2, [r7, #13]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	32ae      	adds	r2, #174	; 0xae
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008476:	e156      	b.n	8008726 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d008      	beq.n	8008492 <USBD_StdEPReq+0x9a>
 8008480:	2b03      	cmp	r3, #3
 8008482:	f300 8145 	bgt.w	8008710 <USBD_StdEPReq+0x318>
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 809b 	beq.w	80085c2 <USBD_StdEPReq+0x1ca>
 800848c:	2b01      	cmp	r3, #1
 800848e:	d03c      	beq.n	800850a <USBD_StdEPReq+0x112>
 8008490:	e13e      	b.n	8008710 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d002      	beq.n	80084a4 <USBD_StdEPReq+0xac>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d016      	beq.n	80084d0 <USBD_StdEPReq+0xd8>
 80084a2:	e02c      	b.n	80084fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00d      	beq.n	80084c6 <USBD_StdEPReq+0xce>
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d00a      	beq.n	80084c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f999 	bl	80097ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ba:	2180      	movs	r1, #128	; 0x80
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f995 	bl	80097ec <USBD_LL_StallEP>
 80084c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084c4:	e020      	b.n	8008508 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fca4 	bl	8008e16 <USBD_CtlError>
              break;
 80084ce:	e01b      	b.n	8008508 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	885b      	ldrh	r3, [r3, #2]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10e      	bne.n	80084f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <USBD_StdEPReq+0xfe>
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b80      	cmp	r3, #128	; 0x80
 80084e2:	d008      	beq.n	80084f6 <USBD_StdEPReq+0xfe>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	88db      	ldrh	r3, [r3, #6]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f97b 	bl	80097ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fd58 	bl	8008fac <USBD_CtlSendStatus>

              break;
 80084fc:	e004      	b.n	8008508 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fc88 	bl	8008e16 <USBD_CtlError>
              break;
 8008506:	bf00      	nop
          }
          break;
 8008508:	e107      	b.n	800871a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d002      	beq.n	800851c <USBD_StdEPReq+0x124>
 8008516:	2b03      	cmp	r3, #3
 8008518:	d016      	beq.n	8008548 <USBD_StdEPReq+0x150>
 800851a:	e04b      	b.n	80085b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00d      	beq.n	800853e <USBD_StdEPReq+0x146>
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b80      	cmp	r3, #128	; 0x80
 8008526:	d00a      	beq.n	800853e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f95d 	bl	80097ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f959 	bl	80097ec <USBD_LL_StallEP>
 800853a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800853c:	e040      	b.n	80085c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fc68 	bl	8008e16 <USBD_CtlError>
              break;
 8008546:	e03b      	b.n	80085c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d136      	bne.n	80085be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f963 	bl	800982a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fd21 	bl	8008fac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff fde2 	bl	8008138 <USBD_CoreFindEP>
 8008574:	4603      	mov	r3, r0
 8008576:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008578:	7b7b      	ldrb	r3, [r7, #13]
 800857a:	2bff      	cmp	r3, #255	; 0xff
 800857c:	d01f      	beq.n	80085be <USBD_StdEPReq+0x1c6>
 800857e:	7b7b      	ldrb	r3, [r7, #13]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11c      	bne.n	80085be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008584:	7b7a      	ldrb	r2, [r7, #13]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800858c:	7b7a      	ldrb	r2, [r7, #13]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	; 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d010      	beq.n	80085be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800859c:	7b7a      	ldrb	r2, [r7, #13]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32ae      	adds	r2, #174	; 0xae
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085b2:	e004      	b.n	80085be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fc2d 	bl	8008e16 <USBD_CtlError>
              break;
 80085bc:	e000      	b.n	80085c0 <USBD_StdEPReq+0x1c8>
              break;
 80085be:	bf00      	nop
          }
          break;
 80085c0:	e0ab      	b.n	800871a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d002      	beq.n	80085d4 <USBD_StdEPReq+0x1dc>
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d032      	beq.n	8008638 <USBD_StdEPReq+0x240>
 80085d2:	e097      	b.n	8008704 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <USBD_StdEPReq+0x1f2>
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b80      	cmp	r3, #128	; 0x80
 80085de:	d004      	beq.n	80085ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc17 	bl	8008e16 <USBD_CtlError>
                break;
 80085e8:	e091      	b.n	800870e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da0b      	bge.n	800860a <USBD_StdEPReq+0x212>
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	3310      	adds	r3, #16
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	3304      	adds	r3, #4
 8008608:	e00b      	b.n	8008622 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2202      	movs	r2, #2
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc61 	bl	8008ef8 <USBD_CtlSendData>
              break;
 8008636:	e06a      	b.n	800870e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800863c:	2b00      	cmp	r3, #0
 800863e:	da11      	bge.n	8008664 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	f003 020f 	and.w	r2, r3, #15
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d117      	bne.n	800868a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbda 	bl	8008e16 <USBD_CtlError>
                  break;
 8008662:	e054      	b.n	800870e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbc7 	bl	8008e16 <USBD_CtlError>
                  break;
 8008688:	e041      	b.n	800870e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	da0b      	bge.n	80086aa <USBD_StdEPReq+0x2b2>
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	3310      	adds	r3, #16
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	3304      	adds	r3, #4
 80086a8:	e00b      	b.n	80086c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <USBD_StdEPReq+0x2d8>
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b80      	cmp	r3, #128	; 0x80
 80086ce:	d103      	bne.n	80086d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e00e      	b.n	80086f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 f8c3 	bl	8009868 <USBD_LL_IsStallEP>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2201      	movs	r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e002      	b.n	80086f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2202      	movs	r2, #2
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fbfb 	bl	8008ef8 <USBD_CtlSendData>
              break;
 8008702:	e004      	b.n	800870e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fb85 	bl	8008e16 <USBD_CtlError>
              break;
 800870c:	bf00      	nop
          }
          break;
 800870e:	e004      	b.n	800871a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fb7f 	bl	8008e16 <USBD_CtlError>
          break;
 8008718:	bf00      	nop
      }
      break;
 800871a:	e005      	b.n	8008728 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fb79 	bl	8008e16 <USBD_CtlError>
      break;
 8008724:	e000      	b.n	8008728 <USBD_StdEPReq+0x330>
      break;
 8008726:	bf00      	nop
  }

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	2b0e      	cmp	r3, #14
 8008756:	f200 8152 	bhi.w	80089fe <USBD_GetDescriptor+0x2ca>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <USBD_GetDescriptor+0x2c>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	080087d1 	.word	0x080087d1
 8008764:	080087e9 	.word	0x080087e9
 8008768:	08008829 	.word	0x08008829
 800876c:	080089ff 	.word	0x080089ff
 8008770:	080089ff 	.word	0x080089ff
 8008774:	0800899f 	.word	0x0800899f
 8008778:	080089cb 	.word	0x080089cb
 800877c:	080089ff 	.word	0x080089ff
 8008780:	080089ff 	.word	0x080089ff
 8008784:	080089ff 	.word	0x080089ff
 8008788:	080089ff 	.word	0x080089ff
 800878c:	080089ff 	.word	0x080089ff
 8008790:	080089ff 	.word	0x080089ff
 8008794:	080089ff 	.word	0x080089ff
 8008798:	0800879d 	.word	0x0800879d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	7c12      	ldrb	r2, [r2, #16]
 80087b4:	f107 0108 	add.w	r1, r7, #8
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087be:	e126      	b.n	8008a0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb27 	bl	8008e16 <USBD_CtlError>
        err++;
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	3301      	adds	r3, #1
 80087cc:	72fb      	strb	r3, [r7, #11]
      break;
 80087ce:	e11e      	b.n	8008a0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	7c12      	ldrb	r2, [r2, #16]
 80087dc:	f107 0108 	add.w	r1, r7, #8
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	60f8      	str	r0, [r7, #12]
      break;
 80087e6:	e112      	b.n	8008a0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7c1b      	ldrb	r3, [r3, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10d      	bne.n	800880c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f107 0208 	add.w	r2, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	2202      	movs	r2, #2
 8008808:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800880a:	e100      	b.n	8008a0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	f107 0208 	add.w	r2, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	2202      	movs	r2, #2
 8008824:	701a      	strb	r2, [r3, #0]
      break;
 8008826:	e0f2      	b.n	8008a0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b05      	cmp	r3, #5
 8008830:	f200 80ac 	bhi.w	800898c <USBD_GetDescriptor+0x258>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USBD_GetDescriptor+0x108>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008855 	.word	0x08008855
 8008840:	08008889 	.word	0x08008889
 8008844:	080088bd 	.word	0x080088bd
 8008848:	080088f1 	.word	0x080088f1
 800884c:	08008925 	.word	0x08008925
 8008850:	08008959 	.word	0x08008959
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e091      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 facb 	bl	8008e16 <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e089      	b.n	800899c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e077      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fab1 	bl	8008e16 <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e06f      	b.n	800899c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088de:	e05d      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa97 	bl	8008e16 <USBD_CtlError>
            err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
          break;
 80088ee:	e055      	b.n	800899c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e043      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa7d 	bl	8008e16 <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e03b      	b.n	800899c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e029      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa63 	bl	8008e16 <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e021      	b.n	800899c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e00f      	b.n	800899c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa49 	bl	8008e16 <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e007      	b.n	800899c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa41 	bl	8008e16 <USBD_CtlError>
          err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800899a:	bf00      	nop
      }
      break;
 800899c:	e037      	b.n	8008a0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7c1b      	ldrb	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	f107 0208 	add.w	r2, r7, #8
 80089b2:	4610      	mov	r0, r2
 80089b4:	4798      	blx	r3
 80089b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b8:	e029      	b.n	8008a0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fa2a 	bl	8008e16 <USBD_CtlError>
        err++;
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	3301      	adds	r3, #1
 80089c6:	72fb      	strb	r3, [r7, #11]
      break;
 80089c8:	e021      	b.n	8008a0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7c1b      	ldrb	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f107 0208 	add.w	r2, r7, #8
 80089de:	4610      	mov	r0, r2
 80089e0:	4798      	blx	r3
 80089e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3301      	adds	r3, #1
 80089e8:	2207      	movs	r2, #7
 80089ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ec:	e00f      	b.n	8008a0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fa10 	bl	8008e16 <USBD_CtlError>
        err++;
 80089f6:	7afb      	ldrb	r3, [r7, #11]
 80089f8:	3301      	adds	r3, #1
 80089fa:	72fb      	strb	r3, [r7, #11]
      break;
 80089fc:	e007      	b.n	8008a0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa08 	bl	8008e16 <USBD_CtlError>
      err++;
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a0c:	bf00      	nop
  }

  if (err != 0U)
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11e      	bne.n	8008a52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	88db      	ldrh	r3, [r3, #6]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d016      	beq.n	8008a4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a1c:	893b      	ldrh	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00e      	beq.n	8008a40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	88da      	ldrh	r2, [r3, #6]
 8008a26:	893b      	ldrh	r3, [r7, #8]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	bf28      	it	cs
 8008a2c:	4613      	movcs	r3, r2
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a32:	893b      	ldrh	r3, [r7, #8]
 8008a34:	461a      	mov	r2, r3
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa5d 	bl	8008ef8 <USBD_CtlSendData>
 8008a3e:	e009      	b.n	8008a54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9e7 	bl	8008e16 <USBD_CtlError>
 8008a48:	e004      	b.n	8008a54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 faae 	bl	8008fac <USBD_CtlSendStatus>
 8008a50:	e000      	b.n	8008a54 <USBD_GetDescriptor+0x320>
    return;
 8008a52:	bf00      	nop
  }
}
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop

08008a5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d131      	bne.n	8008ad2 <USBD_SetAddress+0x76>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88db      	ldrh	r3, [r3, #6]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d12d      	bne.n	8008ad2 <USBD_SetAddress+0x76>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a7c:	d829      	bhi.n	8008ad2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	885b      	ldrh	r3, [r3, #2]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d104      	bne.n	8008aa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f9bc 	bl	8008e16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9e:	e01d      	b.n	8008adc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7bfa      	ldrb	r2, [r7, #15]
 8008aa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 ff07 	bl	80098c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa7a 	bl	8008fac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	e009      	b.n	8008adc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad0:	e004      	b.n	8008adc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f99e 	bl	8008e16 <USBD_CtlError>
  }
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	885b      	ldrh	r3, [r3, #2]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	4b4e      	ldr	r3, [pc, #312]	; (8008c34 <USBD_SetConfig+0x150>)
 8008afa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008afc:	4b4d      	ldr	r3, [pc, #308]	; (8008c34 <USBD_SetConfig+0x150>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d905      	bls.n	8008b10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f985 	bl	8008e16 <USBD_CtlError>
    return USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e08c      	b.n	8008c2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d002      	beq.n	8008b22 <USBD_SetConfig+0x3e>
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d029      	beq.n	8008b74 <USBD_SetConfig+0x90>
 8008b20:	e075      	b.n	8008c0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b22:	4b44      	ldr	r3, [pc, #272]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d020      	beq.n	8008b6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b2a:	4b42      	ldr	r3, [pc, #264]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b34:	4b3f      	ldr	r3, [pc, #252]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fe ffbd 	bl	8007aba <USBD_SetClassConfig>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f962 	bl	8008e16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b5a:	e065      	b.n	8008c28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa25 	bl	8008fac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2203      	movs	r2, #3
 8008b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b6a:	e05d      	b.n	8008c28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa1d 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008b72:	e059      	b.n	8008c28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b74:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d112      	bne.n	8008ba2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b84:	4b2b      	ldr	r3, [pc, #172]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b8e:	4b29      	ldr	r3, [pc, #164]	; (8008c34 <USBD_SetConfig+0x150>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7fe ffac 	bl	8007af2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa06 	bl	8008fac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ba0:	e042      	b.n	8008c28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <USBD_SetConfig+0x150>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d02a      	beq.n	8008c06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7fe ff9a 	bl	8007af2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bbe:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <USBD_SetConfig+0x150>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	; (8008c34 <USBD_SetConfig+0x150>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fe ff73 	bl	8007aba <USBD_SetClassConfig>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f918 	bl	8008e16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fe ff7f 	bl	8007af2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bfc:	e014      	b.n	8008c28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9d4 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008c04:	e010      	b.n	8008c28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9d0 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008c0c:	e00c      	b.n	8008c28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f900 	bl	8008e16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <USBD_SetConfig+0x150>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe ff68 	bl	8007af2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c22:	2303      	movs	r3, #3
 8008c24:	73fb      	strb	r3, [r7, #15]
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200003a0 	.word	0x200003a0

08008c38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	88db      	ldrh	r3, [r3, #6]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d004      	beq.n	8008c54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8e2 	bl	8008e16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c52:	e023      	b.n	8008c9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	dc02      	bgt.n	8008c66 <USBD_GetConfig+0x2e>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc03      	bgt.n	8008c6c <USBD_GetConfig+0x34>
 8008c64:	e015      	b.n	8008c92 <USBD_GetConfig+0x5a>
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d00b      	beq.n	8008c82 <USBD_GetConfig+0x4a>
 8008c6a:	e012      	b.n	8008c92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3308      	adds	r3, #8
 8008c76:	2201      	movs	r2, #1
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f93c 	bl	8008ef8 <USBD_CtlSendData>
        break;
 8008c80:	e00c      	b.n	8008c9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	2201      	movs	r2, #1
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f934 	bl	8008ef8 <USBD_CtlSendData>
        break;
 8008c90:	e004      	b.n	8008c9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8be 	bl	8008e16 <USBD_CtlError>
        break;
 8008c9a:	bf00      	nop
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d81e      	bhi.n	8008cfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	88db      	ldrh	r3, [r3, #6]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d004      	beq.n	8008cce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f8a5 	bl	8008e16 <USBD_CtlError>
        break;
 8008ccc:	e01a      	b.n	8008d04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f043 0202 	orr.w	r2, r3, #2
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	330c      	adds	r3, #12
 8008cee:	2202      	movs	r2, #2
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f900 	bl	8008ef8 <USBD_CtlSendData>
      break;
 8008cf8:	e004      	b.n	8008d04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f88a 	bl	8008e16 <USBD_CtlError>
      break;
 8008d02:	bf00      	nop
  }
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d107      	bne.n	8008d2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f940 	bl	8008fac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d2c:	e013      	b.n	8008d56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	885b      	ldrh	r3, [r3, #2]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d10b      	bne.n	8008d4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	889b      	ldrh	r3, [r3, #4]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f930 	bl	8008fac <USBD_CtlSendStatus>
}
 8008d4c:	e003      	b.n	8008d56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f860 	bl	8008e16 <USBD_CtlError>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d80b      	bhi.n	8008d8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d10c      	bne.n	8008d98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f910 	bl	8008fac <USBD_CtlSendStatus>
      }
      break;
 8008d8c:	e004      	b.n	8008d98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f840 	bl	8008e16 <USBD_CtlError>
      break;
 8008d96:	e000      	b.n	8008d9a <USBD_ClrFeature+0x3c>
      break;
 8008d98:	bf00      	nop
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fa17 	bl	8008200 <SWAPBYTE>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fa0a 	bl	8008200 <SWAPBYTE>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff f9fd 	bl	8008200 <SWAPBYTE>
 8008e06:	4603      	mov	r3, r0
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	80da      	strh	r2, [r3, #6]
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fce2 	bl	80097ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e28:	2100      	movs	r1, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fcde 	bl	80097ec <USBD_LL_StallEP>
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d036      	beq.n	8008ebc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e52:	6938      	ldr	r0, [r7, #16]
 8008e54:	f000 f836 	bl	8008ec4 <USBD_GetLen>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	3301      	adds	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	2203      	movs	r2, #3
 8008e80:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	3301      	adds	r3, #1
 8008e86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e88:	e013      	b.n	8008eb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	4413      	add	r3, r2
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
    idx++;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
    idx++;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e7      	bne.n	8008e8a <USBD_GetString+0x52>
 8008eba:	e000      	b.n	8008ebe <USBD_GetString+0x86>
    return;
 8008ebc:	bf00      	nop
  }
}
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ed4:	e005      	b.n	8008ee2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f5      	bne.n	8008ed6 <USBD_GetLen+0x12>
  }

  return len;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fced 	bl	80098fe <USBD_LL_Transmit>

  return USBD_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 fcdc 	bl	80098fe <USBD_LL_Transmit>

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2203      	movs	r2, #3
 8008f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fce0 	bl	8009940 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fccf 	bl	8009940 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fc9b 	bl	80098fe <USBD_LL_Transmit>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2205      	movs	r2, #5
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fca9 	bl	8009940 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4912      	ldr	r1, [pc, #72]	; (8009048 <MX_USB_DEVICE_Init+0x50>)
 8009000:	4812      	ldr	r0, [pc, #72]	; (800904c <MX_USB_DEVICE_Init+0x54>)
 8009002:	f7fe fcdd 	bl	80079c0 <USBD_Init>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800900c:	f7f7 fece 	bl	8000dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009010:	490f      	ldr	r1, [pc, #60]	; (8009050 <MX_USB_DEVICE_Init+0x58>)
 8009012:	480e      	ldr	r0, [pc, #56]	; (800904c <MX_USB_DEVICE_Init+0x54>)
 8009014:	f7fe fd04 	bl	8007a20 <USBD_RegisterClass>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800901e:	f7f7 fec5 	bl	8000dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009022:	490c      	ldr	r1, [pc, #48]	; (8009054 <MX_USB_DEVICE_Init+0x5c>)
 8009024:	4809      	ldr	r0, [pc, #36]	; (800904c <MX_USB_DEVICE_Init+0x54>)
 8009026:	f7fe fc3b 	bl	80078a0 <USBD_CDC_RegisterInterface>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009030:	f7f7 febc 	bl	8000dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <MX_USB_DEVICE_Init+0x54>)
 8009036:	f7fe fd29 	bl	8007a8c <USBD_Start>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009040:	f7f7 feb4 	bl	8000dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009044:	bf00      	nop
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200000ac 	.word	0x200000ac
 800904c:	200003a4 	.word	0x200003a4
 8009050:	20000018 	.word	0x20000018
 8009054:	20000098 	.word	0x20000098

08009058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800905c:	2200      	movs	r2, #0
 800905e:	4905      	ldr	r1, [pc, #20]	; (8009074 <CDC_Init_FS+0x1c>)
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <CDC_Init_FS+0x20>)
 8009062:	f7fe fc37 	bl	80078d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009066:	4905      	ldr	r1, [pc, #20]	; (800907c <CDC_Init_FS+0x24>)
 8009068:	4803      	ldr	r0, [pc, #12]	; (8009078 <CDC_Init_FS+0x20>)
 800906a:	f7fe fc55 	bl	8007918 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800906e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009070:	4618      	mov	r0, r3
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000e80 	.word	0x20000e80
 8009078:	200003a4 	.word	0x200003a4
 800907c:	20000680 	.word	0x20000680

08009080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009086:	4618      	mov	r0, r3
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
 800909c:	4613      	mov	r3, r2
 800909e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	2b23      	cmp	r3, #35	; 0x23
 80090a4:	d84a      	bhi.n	800913c <CDC_Control_FS+0xac>
 80090a6:	a201      	add	r2, pc, #4	; (adr r2, 80090ac <CDC_Control_FS+0x1c>)
 80090a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ac:	0800913d 	.word	0x0800913d
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	0800913d 	.word	0x0800913d
 80090b8:	0800913d 	.word	0x0800913d
 80090bc:	0800913d 	.word	0x0800913d
 80090c0:	0800913d 	.word	0x0800913d
 80090c4:	0800913d 	.word	0x0800913d
 80090c8:	0800913d 	.word	0x0800913d
 80090cc:	0800913d 	.word	0x0800913d
 80090d0:	0800913d 	.word	0x0800913d
 80090d4:	0800913d 	.word	0x0800913d
 80090d8:	0800913d 	.word	0x0800913d
 80090dc:	0800913d 	.word	0x0800913d
 80090e0:	0800913d 	.word	0x0800913d
 80090e4:	0800913d 	.word	0x0800913d
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	0800913d 	.word	0x0800913d
 80090f0:	0800913d 	.word	0x0800913d
 80090f4:	0800913d 	.word	0x0800913d
 80090f8:	0800913d 	.word	0x0800913d
 80090fc:	0800913d 	.word	0x0800913d
 8009100:	0800913d 	.word	0x0800913d
 8009104:	0800913d 	.word	0x0800913d
 8009108:	0800913d 	.word	0x0800913d
 800910c:	0800913d 	.word	0x0800913d
 8009110:	0800913d 	.word	0x0800913d
 8009114:	0800913d 	.word	0x0800913d
 8009118:	0800913d 	.word	0x0800913d
 800911c:	0800913d 	.word	0x0800913d
 8009120:	0800913d 	.word	0x0800913d
 8009124:	0800913d 	.word	0x0800913d
 8009128:	0800913d 	.word	0x0800913d
 800912c:	0800913d 	.word	0x0800913d
 8009130:	0800913d 	.word	0x0800913d
 8009134:	0800913d 	.word	0x0800913d
 8009138:	0800913d 	.word	0x0800913d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800913c:	bf00      	nop
  }

  return (USBD_OK);
 800913e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4805      	ldr	r0, [pc, #20]	; (8009170 <CDC_Receive_FS+0x24>)
 800915a:	f7fe fbdd 	bl	8007918 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800915e:	4804      	ldr	r0, [pc, #16]	; (8009170 <CDC_Receive_FS+0x24>)
 8009160:	f7fe fbf8 	bl	8007954 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	200003a4 	.word	0x200003a4

08009174 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800918a:	4618      	mov	r0, r3
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2212      	movs	r2, #18
 80091a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	200000cc 	.word	0x200000cc

080091bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2204      	movs	r2, #4
 80091cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200000ec 	.word	0x200000ec

080091e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4907      	ldr	r1, [pc, #28]	; (8009214 <USBD_FS_ProductStrDescriptor+0x34>)
 80091f6:	4808      	ldr	r0, [pc, #32]	; (8009218 <USBD_FS_ProductStrDescriptor+0x38>)
 80091f8:	f7ff fe1e 	bl	8008e38 <USBD_GetString>
 80091fc:	e004      	b.n	8009208 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4904      	ldr	r1, [pc, #16]	; (8009214 <USBD_FS_ProductStrDescriptor+0x34>)
 8009202:	4805      	ldr	r0, [pc, #20]	; (8009218 <USBD_FS_ProductStrDescriptor+0x38>)
 8009204:	f7ff fe18 	bl	8008e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20001680 	.word	0x20001680
 8009218:	08009b3c 	.word	0x08009b3c

0800921c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	4904      	ldr	r1, [pc, #16]	; (800923c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800922c:	4804      	ldr	r0, [pc, #16]	; (8009240 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800922e:	f7ff fe03 	bl	8008e38 <USBD_GetString>
  return USBD_StrDesc;
 8009232:	4b02      	ldr	r3, [pc, #8]	; (800923c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20001680 	.word	0x20001680
 8009240:	08009b54 	.word	0x08009b54

08009244 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	221a      	movs	r2, #26
 8009254:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009256:	f000 f855 	bl	8009304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800925a:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200000f0 	.word	0x200000f0

08009268 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4907      	ldr	r1, [pc, #28]	; (800929c <USBD_FS_ConfigStrDescriptor+0x34>)
 800927e:	4808      	ldr	r0, [pc, #32]	; (80092a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009280:	f7ff fdda 	bl	8008e38 <USBD_GetString>
 8009284:	e004      	b.n	8009290 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4904      	ldr	r1, [pc, #16]	; (800929c <USBD_FS_ConfigStrDescriptor+0x34>)
 800928a:	4805      	ldr	r0, [pc, #20]	; (80092a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800928c:	f7ff fdd4 	bl	8008e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20001680 	.word	0x20001680
 80092a0:	08009b68 	.word	0x08009b68

080092a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d105      	bne.n	80092c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4907      	ldr	r1, [pc, #28]	; (80092d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092bc:	f7ff fdbc 	bl	8008e38 <USBD_GetString>
 80092c0:	e004      	b.n	80092cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4904      	ldr	r1, [pc, #16]	; (80092d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092c6:	4805      	ldr	r0, [pc, #20]	; (80092dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092c8:	f7ff fdb6 	bl	8008e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20001680 	.word	0x20001680
 80092dc:	08009b74 	.word	0x08009b74

080092e0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	220c      	movs	r2, #12
 80092f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	200000e0 	.word	0x200000e0

08009304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800930a:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <Get_SerialNum+0x44>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009310:	4b0e      	ldr	r3, [pc, #56]	; (800934c <Get_SerialNum+0x48>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009316:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <Get_SerialNum+0x4c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800932a:	2208      	movs	r2, #8
 800932c:	4909      	ldr	r1, [pc, #36]	; (8009354 <Get_SerialNum+0x50>)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f814 	bl	800935c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009334:	2204      	movs	r2, #4
 8009336:	4908      	ldr	r1, [pc, #32]	; (8009358 <Get_SerialNum+0x54>)
 8009338:	68b8      	ldr	r0, [r7, #8]
 800933a:	f000 f80f 	bl	800935c <IntToUnicode>
  }
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	1fff7a10 	.word	0x1fff7a10
 800934c:	1fff7a14 	.word	0x1fff7a14
 8009350:	1fff7a18 	.word	0x1fff7a18
 8009354:	200000f2 	.word	0x200000f2
 8009358:	20000102 	.word	0x20000102

0800935c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800936e:	2300      	movs	r3, #0
 8009370:	75fb      	strb	r3, [r7, #23]
 8009372:	e027      	b.n	80093c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0f1b      	lsrs	r3, r3, #28
 8009378:	2b09      	cmp	r3, #9
 800937a:	d80b      	bhi.n	8009394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0f1b      	lsrs	r3, r3, #28
 8009380:	b2da      	uxtb	r2, r3
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4619      	mov	r1, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	440b      	add	r3, r1
 800938c:	3230      	adds	r2, #48	; 0x30
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e00a      	b.n	80093aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0f1b      	lsrs	r3, r3, #28
 8009398:	b2da      	uxtb	r2, r3
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4619      	mov	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	440b      	add	r3, r1
 80093a4:	3237      	adds	r2, #55	; 0x37
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	3301      	adds	r3, #1
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	3301      	adds	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
 80093c4:	7dfa      	ldrb	r2, [r7, #23]
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3d3      	bcc.n	8009374 <IntToUnicode+0x18>
  }
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b0a0      	sub	sp, #128	; 0x80
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	609a      	str	r2, [r3, #8]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	225c      	movs	r2, #92	; 0x5c
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fb89 	bl	8009b14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800940a:	d149      	bne.n	80094a0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800940c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009410:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009412:	2300      	movs	r3, #0
 8009414:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009416:	f107 0310 	add.w	r3, r7, #16
 800941a:	4618      	mov	r0, r3
 800941c:	f7fa f95c 	bl	80036d8 <HAL_RCCEx_PeriphCLKConfig>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009426:	f7f7 fcc1 	bl	8000dac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	6313      	str	r3, [r2, #48]	; 0x30
 800943a:	4b1b      	ldr	r3, [pc, #108]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009446:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800944a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800944c:	2302      	movs	r3, #2
 800944e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009450:	2300      	movs	r3, #0
 8009452:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009454:	2303      	movs	r3, #3
 8009456:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009458:	230a      	movs	r3, #10
 800945a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800945c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009460:	4619      	mov	r1, r3
 8009462:	4812      	ldr	r0, [pc, #72]	; (80094ac <HAL_PCD_MspInit+0xd0>)
 8009464:	f7f8 fba8 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009468:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 800946a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946c:	4a0e      	ldr	r2, [pc, #56]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 800946e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009472:	6353      	str	r3, [r2, #52]	; 0x34
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
 8009478:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 800947a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947c:	4a0a      	ldr	r2, [pc, #40]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 800947e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009482:	6453      	str	r3, [r2, #68]	; 0x44
 8009484:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <HAL_PCD_MspInit+0xcc>)
 8009486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	2043      	movs	r0, #67	; 0x43
 8009496:	f7f8 fb36 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800949a:	2043      	movs	r0, #67	; 0x43
 800949c:	f7f8 fb4f 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094a0:	bf00      	nop
 80094a2:	3780      	adds	r7, #128	; 0x80
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	40023800 	.word	0x40023800
 80094ac:	40020000 	.word	0x40020000

080094b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fe fb2d 	bl	8007b26 <USBD_LL_SetupStage>
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	4619      	mov	r1, r3
 80094fe:	f7fe fb67 	bl	8007bd0 <USBD_LL_DataOutStage>
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	334c      	adds	r3, #76	; 0x4c
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	4619      	mov	r1, r3
 8009532:	f7fe fc00 	bl	8007d36 <USBD_LL_DataInStage>
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fd34 	bl	8007fba <USBD_LL_SOF>
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009562:	2301      	movs	r3, #1
 8009564:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	e008      	b.n	8009586 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d102      	bne.n	8009582 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800957c:	2301      	movs	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e001      	b.n	8009586 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009582:	f7f7 fc13 	bl	8000dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800958c:	7bfa      	ldrb	r2, [r7, #15]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe fcd4 	bl	8007f3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fc7c 	bl	8007e9a <USBD_LL_Reset>
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fccf 	bl	8007f5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <HAL_PCD_SuspendCallback+0x48>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	4a03      	ldr	r2, [pc, #12]	; (80095f4 <HAL_PCD_SuspendCallback+0x48>)
 80095e6:	f043 0306 	orr.w	r3, r3, #6
 80095ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed00 	.word	0xe000ed00

080095f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fcbf 	bl	8007f8a <USBD_LL_Resume>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fd17 	bl	800805e <USBD_LL_IsoOUTIncomplete>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fcd3 	bl	8007ffa <USBD_LL_IsoINIncomplete>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fd29 	bl	80080c2 <USBD_LL_DevConnected>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fd26 	bl	80080d8 <USBD_LL_DevDisconnected>
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d13c      	bne.n	800971e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096a4:	4a20      	ldr	r2, [pc, #128]	; (8009728 <USBD_LL_Init+0x94>)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a1e      	ldr	r2, [pc, #120]	; (8009728 <USBD_LL_Init+0x94>)
 80096b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096b4:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <USBD_LL_Init+0x94>)
 80096b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <USBD_LL_Init+0x94>)
 80096be:	2206      	movs	r2, #6
 80096c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096c2:	4b19      	ldr	r3, [pc, #100]	; (8009728 <USBD_LL_Init+0x94>)
 80096c4:	2202      	movs	r2, #2
 80096c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096c8:	4b17      	ldr	r3, [pc, #92]	; (8009728 <USBD_LL_Init+0x94>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <USBD_LL_Init+0x94>)
 80096d0:	2202      	movs	r2, #2
 80096d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096d4:	4b14      	ldr	r3, [pc, #80]	; (8009728 <USBD_LL_Init+0x94>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096da:	4b13      	ldr	r3, [pc, #76]	; (8009728 <USBD_LL_Init+0x94>)
 80096dc:	2200      	movs	r2, #0
 80096de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <USBD_LL_Init+0x94>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <USBD_LL_Init+0x94>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <USBD_LL_Init+0x94>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <USBD_LL_Init+0x94>)
 80096f4:	f7f8 fc0d 	bl	8001f12 <HAL_PCD_Init>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096fe:	f7f7 fb55 	bl	8000dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	4808      	ldr	r0, [pc, #32]	; (8009728 <USBD_LL_Init+0x94>)
 8009706:	f7f9 fe98 	bl	800343a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	2100      	movs	r1, #0
 800970e:	4806      	ldr	r0, [pc, #24]	; (8009728 <USBD_LL_Init+0x94>)
 8009710:	f7f9 fe4c 	bl	80033ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009714:	2280      	movs	r2, #128	; 0x80
 8009716:	2101      	movs	r1, #1
 8009718:	4803      	ldr	r0, [pc, #12]	; (8009728 <USBD_LL_Init+0x94>)
 800971a:	f7f9 fe47 	bl	80033ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20001880 	.word	0x20001880

0800972c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009742:	4618      	mov	r0, r3
 8009744:	f7f8 fd09 	bl	800215a <HAL_PCD_Start>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f990 	bl	8009a74 <USBD_Get_USB_Status>
 8009754:	4603      	mov	r3, r0
 8009756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009758:	7bbb      	ldrb	r3, [r7, #14]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	4608      	mov	r0, r1
 800976c:	4611      	mov	r1, r2
 800976e:	461a      	mov	r2, r3
 8009770:	4603      	mov	r3, r0
 8009772:	70fb      	strb	r3, [r7, #3]
 8009774:	460b      	mov	r3, r1
 8009776:	70bb      	strb	r3, [r7, #2]
 8009778:	4613      	mov	r3, r2
 800977a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800978a:	78bb      	ldrb	r3, [r7, #2]
 800978c:	883a      	ldrh	r2, [r7, #0]
 800978e:	78f9      	ldrb	r1, [r7, #3]
 8009790:	f7f9 fa07 	bl	8002ba2 <HAL_PCD_EP_Open>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f96a 	bl	8009a74 <USBD_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f9 fa50 	bl	8002c72 <HAL_PCD_EP_Close>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 f94b 	bl	8009a74 <USBD_Get_USB_Status>
 80097de:	4603      	mov	r3, r0
 80097e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7f9 fb28 	bl	8002e60 <HAL_PCD_EP_SetStall>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f92c 	bl	8009a74 <USBD_Get_USB_Status>
 800981c:	4603      	mov	r3, r0
 800981e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	4611      	mov	r1, r2
 8009848:	4618      	mov	r0, r3
 800984a:	f7f9 fb6d 	bl	8002f28 <HAL_PCD_EP_ClrStall>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f90d 	bl	8009a74 <USBD_Get_USB_Status>
 800985a:	4603      	mov	r3, r0
 800985c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800985e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800987a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800987c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da0b      	bge.n	800989c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	4613      	mov	r3, r2
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	333e      	adds	r3, #62	; 0x3e
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	e00b      	b.n	80098b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	4613      	mov	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7f9 f93a 	bl	8002b58 <HAL_PCD_SetAddress>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f8c2 	bl	8009a74 <USBD_Get_USB_Status>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b086      	sub	sp, #24
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	460b      	mov	r3, r1
 800990c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800991c:	7af9      	ldrb	r1, [r7, #11]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f7f9 fa53 	bl	8002dcc <HAL_PCD_EP_Transmit>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f8a1 	bl	8009a74 <USBD_Get_USB_Status>
 8009932:	4603      	mov	r3, r0
 8009934:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009936:	7dbb      	ldrb	r3, [r7, #22]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	460b      	mov	r3, r1
 800994e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800995e:	7af9      	ldrb	r1, [r7, #11]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	f7f9 f9cf 	bl	8002d06 <HAL_PCD_EP_Receive>
 8009968:	4603      	mov	r3, r0
 800996a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f880 	bl	8009a74 <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009978:	7dbb      	ldrb	r3, [r7, #22]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009994:	78fa      	ldrb	r2, [r7, #3]
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7f9 f9ff 	bl	8002d9c <HAL_PCD_EP_GetRxCount>
 800999e:	4603      	mov	r3, r0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <HAL_PCDEx_LPM_Callback+0x18>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d01f      	beq.n	80099fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80099be:	e03b      	b.n	8009a38 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80099c8:	f7f7 f984 	bl	8000cd4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099cc:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <HAL_PCDEx_LPM_Callback+0x98>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <HAL_PCDEx_LPM_Callback+0x98>)
 80099d2:	f023 0306 	bic.w	r3, r3, #6
 80099d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fac7 	bl	8007f8a <USBD_LL_Resume>
    break;
 80099fc:	e01c      	b.n	8009a38 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a10:	f043 0301 	orr.w	r3, r3, #1
 8009a14:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fa9e 	bl	8007f5e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	4a04      	ldr	r2, [pc, #16]	; (8009a40 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a30:	f043 0306 	orr.w	r3, r3, #6
 8009a34:	6113      	str	r3, [r2, #16]
    break;
 8009a36:	bf00      	nop
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	e000ed00 	.word	0xe000ed00

08009a44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	; (8009a5c <USBD_static_malloc+0x18>)
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20001d8c 	.word	0x20001d8c

08009a60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]

}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d817      	bhi.n	8009ab8 <USBD_Get_USB_Status+0x44>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <USBD_Get_USB_Status+0x1c>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009aa1 	.word	0x08009aa1
 8009a94:	08009aa7 	.word	0x08009aa7
 8009a98:	08009aad 	.word	0x08009aad
 8009a9c:	08009ab3 	.word	0x08009ab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	e00b      	b.n	8009abe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aaa:	e008      	b.n	8009abe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab0:	e005      	b.n	8009abe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab6:	e002      	b.n	8009abe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	73fb      	strb	r3, [r7, #15]
    break;
 8009abc:	bf00      	nop
  }
  return usb_status;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4d0d      	ldr	r5, [pc, #52]	; (8009b04 <__libc_init_array+0x38>)
 8009ad0:	4c0d      	ldr	r4, [pc, #52]	; (8009b08 <__libc_init_array+0x3c>)
 8009ad2:	1b64      	subs	r4, r4, r5
 8009ad4:	10a4      	asrs	r4, r4, #2
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	42a6      	cmp	r6, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	4d0b      	ldr	r5, [pc, #44]	; (8009b0c <__libc_init_array+0x40>)
 8009ade:	4c0c      	ldr	r4, [pc, #48]	; (8009b10 <__libc_init_array+0x44>)
 8009ae0:	f000 f820 	bl	8009b24 <_init>
 8009ae4:	1b64      	subs	r4, r4, r5
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	2600      	movs	r6, #0
 8009aea:	42a6      	cmp	r6, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af4:	4798      	blx	r3
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afe:	4798      	blx	r3
 8009b00:	3601      	adds	r6, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	08009ba4 	.word	0x08009ba4
 8009b08:	08009ba4 	.word	0x08009ba4
 8009b0c:	08009ba4 	.word	0x08009ba4
 8009b10:	08009ba8 	.word	0x08009ba8

08009b14 <memset>:
 8009b14:	4402      	add	r2, r0
 8009b16:	4603      	mov	r3, r0
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d100      	bne.n	8009b1e <memset+0xa>
 8009b1c:	4770      	bx	lr
 8009b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b22:	e7f9      	b.n	8009b18 <memset+0x4>

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
