
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a714  0800a714  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a71c  0800a71c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a720  0800a720  0001a720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800a724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea0  2000010c  0800a830  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  0800a830  00021fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f369  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c99  00000000  00000000  0003f4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00044140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  00045a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015ab9  00000000  00000000  000470a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006eee  00000000  00000000  0005cb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00063a4f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000654c  00000000  00000000  00063aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a69c 	.word	0x0800a69c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	0800a69c 	.word	0x0800a69c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <PIDContollerUpdate>:
	PID.output = 0;
	PID.setpoint = 0;
	PID.updated = false;
}

void PIDContollerUpdate(float measurement){
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	ed87 0a01 	vstr	s0, [r7, #4]

	float error = PID.setpoint - measurement;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000514:	ed93 7a03 	vldr	s14, [r3, #12]
 8000518:	edd7 7a01 	vldr	s15, [r7, #4]
 800051c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000520:	edc7 7a05 	vstr	s15, [r7, #20]

    float proportional = PID.Kp * error;
 8000524:	4b35      	ldr	r3, [pc, #212]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000526:	edd3 7a00 	vldr	s15, [r3]
 800052a:	ed97 7a05 	vldr	s14, [r7, #20]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	edc7 7a04 	vstr	s15, [r7, #16]

    PID.integral += PID.Ki * error;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000538:	ed93 7a01 	vldr	s14, [r3, #4]
 800053c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000546:	edd3 7a04 	vldr	s15, [r3, #16]
 800054a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000550:	edc3 7a04 	vstr	s15, [r3, #16]

    // Limit the integral term to prevent windup
    if (PID.integral > MAX_PID_OUTPUT) {
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000556:	edd3 7a04 	vldr	s15, [r3, #16]
 800055a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000600 <PIDContollerUpdate+0xf8>
 800055e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000566:	dd03      	ble.n	8000570 <PIDContollerUpdate+0x68>
    		PID.integral = MAX_PID_OUTPUT;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <PIDContollerUpdate+0xf4>)
 800056a:	4a26      	ldr	r2, [pc, #152]	; (8000604 <PIDContollerUpdate+0xfc>)
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	e00b      	b.n	8000588 <PIDContollerUpdate+0x80>
        }
    else if (PID.integral < MIN_PID_OUTPUT) {
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000572:	edd3 7a04 	vldr	s15, [r3, #16]
 8000576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057e:	d503      	bpl.n	8000588 <PIDContollerUpdate+0x80>
    		PID.integral = MIN_PID_OUTPUT;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
        }

    float derivative = PID.Kd * (error - PID.last_error);
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <PIDContollerUpdate+0xf4>)
 800058a:	ed93 7a02 	vldr	s14, [r3, #8]
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <PIDContollerUpdate+0xf4>)
 8000590:	edd3 7a05 	vldr	s15, [r3, #20]
 8000594:	edd7 6a05 	vldr	s13, [r7, #20]
 8000598:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800059c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a0:	edc7 7a03 	vstr	s15, [r7, #12]

    PID.output = proportional + PID.integral + derivative;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80005aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005be:	ee17 2a90 	vmov	r2, s15
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c4:	619a      	str	r2, [r3, #24]

    // Limit the output to within the allowable range
    if (PID.output > MAX_PID_OUTPUT) {
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ce:	d904      	bls.n	80005da <PIDContollerUpdate+0xd2>
    	PID.output = MAX_PID_OUTPUT;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	e001      	b.n	80005de <PIDContollerUpdate+0xd6>
      }
    else if (PID.output < MIN_PID_OUTPUT) {
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005dc:	699b      	ldr	r3, [r3, #24]
    	PID.output = MIN_PID_OUTPUT;
      }
    PID.output += PID_OUTPUT_OFFSET;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005e8:	6193      	str	r3, [r2, #24]

    PID.last_error = error;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <PIDContollerUpdate+0xf4>)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	6153      	str	r3, [r2, #20]

}
 80005f0:	bf00      	nop
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000128 	.word	0x20000128
 8000600:	447a0000 	.word	0x447a0000
 8000604:	447a0000 	.word	0x447a0000

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC1_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC1_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC1_Init+0x98>)
 800066a:	f000 ffc7 	bl	80015fc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 fbfe 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	2301      	movs	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC1_Init+0x98>)
 800068a:	f000 fffb 	bl	8001684 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 fbee 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000148 	.word	0x20000148
 80006a4:	40012000 	.word	0x40012000
 80006a8:	0f000001 	.word	0x0f000001

080006ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d127      	bne.n	800071e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_ADC_MspInit+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_ADC_MspInit+0x84>)
 800071a:	f001 fb15 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40012000 	.word	0x40012000
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <GetTotalTime>:

	characteristic.updated = true;
}

uint32_t GetTotalTime()
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	return characteristic.rise_time + characteristic.fall_time + characteristic.hold_time;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <GetTotalTime+0x20>)
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <GetTotalTime+0x20>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	441a      	add	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <GetTotalTime+0x20>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4413      	add	r3, r2
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000190 	.word	0x20000190

08000758 <isCharacteristicUpdated>:
{
	return (characteristic.maximum_RPM - characteristic.baseRPM) / characteristic.delta_falling;
}

bool isCharacteristicUpdated()
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
	bool retval = characteristic.updated;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000764:	71fb      	strb	r3, [r7, #7]
	if(characteristic.updated)
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d011      	beq.n	8000796 <isCharacteristicUpdated+0x3e>
		characteristic.updated = !characteristic.updated;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf14      	ite	ne
 800077e:	2301      	movne	r3, #1
 8000780:	2300      	moveq	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f083 0301 	eor.w	r3, r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <isCharacteristicUpdated+0x4c>)
 8000792:	f883 2020 	strb.w	r2, [r3, #32]

	return retval;
 8000796:	79fb      	ldrb	r3, [r7, #7]
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000190 	.word	0x20000190

080007a8 <CalculateSetPoint>:

uint32_t CalculateSetPoint(bool reset)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	static uint32_t counter = 0;
	static uint32_t setpoint = 0;

	if(reset)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <CalculateSetPoint+0x20>
	{
		counter = 0;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <CalculateSetPoint+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
		setpoint = characteristic.baseRPM;
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <CalculateSetPoint+0xe8>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <CalculateSetPoint+0xec>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e018      	b.n	80007fa <CalculateSetPoint+0x52>
	}

	else
	{
		uint32_t totalTime = GetTotalTime();
 80007c8:	f7ff ffb4 	bl	8000734 <GetTotalTime>
 80007cc:	60f8      	str	r0, [r7, #12]
		 if (totalTime != 0)  // Check if totalTime is non-zero
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00f      	beq.n	80007f4 <CalculateSetPoint+0x4c>
		 {
	            counter = (counter + 1) % (MOTOR_TIM7_FREQ * totalTime);
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <CalculateSetPoint+0xe4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80007e0:	fb01 f202 	mul.w	r2, r1, r2
 80007e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80007e8:	fb01 f202 	mul.w	r2, r1, r2
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <CalculateSetPoint+0xe4>)
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e002      	b.n	80007fa <CalculateSetPoint+0x52>
		 }
		 else
			 counter = 0;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <CalculateSetPoint+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
	}
	if(counter < MOTOR_TIM7_FREQ * characteristic.rise_time)
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <CalculateSetPoint+0xe8>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000802:	fb03 f202 	mul.w	r2, r3, r2
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <CalculateSetPoint+0xe4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d907      	bls.n	800081e <CalculateSetPoint+0x76>
		setpoint += characteristic.delta_rising;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <CalculateSetPoint+0xe8>)
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <CalculateSetPoint+0xec>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <CalculateSetPoint+0xec>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e030      	b.n	8000880 <CalculateSetPoint+0xd8>

	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <CalculateSetPoint+0xe8>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	f242 7210 	movw	r2, #10000	; 0x2710
 8000826:	fb03 f202 	mul.w	r2, r3, r2
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <CalculateSetPoint+0xe4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d20c      	bcs.n	800084c <CalculateSetPoint+0xa4>
			counter < MOTOR_TIM7_FREQ * characteristic.rise_time + characteristic.hold_time)
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <CalculateSetPoint+0xe8>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f242 7210 	movw	r2, #10000	; 0x2710
 800083a:	fb03 f202 	mul.w	r2, r3, r2
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <CalculateSetPoint+0xe8>)
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	441a      	add	r2, r3
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <CalculateSetPoint+0xe4>)
 8000846:	681b      	ldr	r3, [r3, #0]
	else if(counter > MOTOR_TIM7_FREQ * characteristic.rise_time &&
 8000848:	429a      	cmp	r2, r3
 800084a:	d819      	bhi.n	8000880 <CalculateSetPoint+0xd8>
	{
		;
	}

	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <CalculateSetPoint+0xe8>)
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <CalculateSetPoint+0xe8>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	4413      	add	r3, r2
 8000856:	f242 7210 	movw	r2, #10000	; 0x2710
 800085a:	fb03 f202 	mul.w	r2, r3, r2
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <CalculateSetPoint+0xe4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d20c      	bcs.n	8000880 <CalculateSetPoint+0xd8>
			(setpoint >= characteristic.baseRPM))
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <CalculateSetPoint+0xe8>)
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <CalculateSetPoint+0xec>)
 800086c:	681b      	ldr	r3, [r3, #0]
	else if((counter > MOTOR_TIM7_FREQ * (characteristic.rise_time + characteristic.hold_time)) &&
 800086e:	429a      	cmp	r2, r3
 8000870:	d806      	bhi.n	8000880 <CalculateSetPoint+0xd8>
				setpoint -= characteristic.delta_falling;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <CalculateSetPoint+0xe8>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <CalculateSetPoint+0xec>)
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <CalculateSetPoint+0xec>)
 800087e:	6013      	str	r3, [r2, #0]

	return setpoint;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <CalculateSetPoint+0xec>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001b4 	.word	0x200001b4
 8000890:	20000190 	.word	0x20000190
 8000894:	200001b8 	.word	0x200001b8

08000898 <enterCriticalSection>:
 *
 *  Created on: May 13, 2023
 *      Author: plasz
 */
#include "compontents.h"
void enterCriticalSection() {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
    __disable_irq();  // Disable interrupts globally
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <exitCriticalSection>:

void exitCriticalSection() {
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80008ae:	b662      	cpsie	i
}
 80008b0:	bf00      	nop
    __enable_irq();  // Enable interrupts globally
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <GetDigits>:
#include "display.h"

volatile uint8_t Digits[2];

void GetDigits(uint8_t number)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	enterCriticalSection();
 80008c6:	f7ff ffe7 	bl	8000898 <enterCriticalSection>
	//diagnosztika, hogy jó értéket ad-e az encoder, ha pörög a motor és 0 lesz a kijelzőn, akkor tudom, hogy nem
	if(number > 99)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b63      	cmp	r3, #99	; 0x63
 80008ce:	d901      	bls.n	80008d4 <GetDigits+0x18>
		number = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]

    Digits[0] = convertTo7Segment((number % 10));
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <GetDigits+0x64>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	08d9      	lsrs	r1, r3, #3
 80008de:	460b      	mov	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f81c 	bl	8000928 <convertTo7Segment>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <GetDigits+0x68>)
 80008f6:	701a      	strb	r2, [r3, #0]
	Digits[1] = convertTo7Segment((number / 10));
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <GetDigits+0x64>)
 80008fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f80f 	bl	8000928 <convertTo7Segment>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <GetDigits+0x68>)
 8000910:	705a      	strb	r2, [r3, #1]
    exitCriticalSection();
 8000912:	f7ff ffca 	bl	80008aa <exitCriticalSection>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	cccccccd 	.word	0xcccccccd
 8000924:	200001bc 	.word	0x200001bc

08000928 <convertTo7Segment>:

uint8_t convertTo7Segment(uint8_t value) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    switch (value) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b09      	cmp	r3, #9
 8000936:	d835      	bhi.n	80009a4 <convertTo7Segment+0x7c>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <convertTo7Segment+0x18>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000969 	.word	0x08000969
 8000944:	0800096f 	.word	0x0800096f
 8000948:	08000975 	.word	0x08000975
 800094c:	0800097b 	.word	0x0800097b
 8000950:	08000981 	.word	0x08000981
 8000954:	08000987 	.word	0x08000987
 8000958:	0800098d 	.word	0x0800098d
 800095c:	08000993 	.word	0x08000993
 8000960:	08000999 	.word	0x08000999
 8000964:	0800099f 	.word	0x0800099f
        case 0:
            value = 0x3F;
 8000968:	233f      	movs	r3, #63	; 0x3f
 800096a:	71fb      	strb	r3, [r7, #7]
            break;
 800096c:	e01d      	b.n	80009aa <convertTo7Segment+0x82>
        case 1:
            value = 0x06;
 800096e:	2306      	movs	r3, #6
 8000970:	71fb      	strb	r3, [r7, #7]
            break;
 8000972:	e01a      	b.n	80009aa <convertTo7Segment+0x82>
        case 2:
            value = 0x5B;
 8000974:	235b      	movs	r3, #91	; 0x5b
 8000976:	71fb      	strb	r3, [r7, #7]
            break;
 8000978:	e017      	b.n	80009aa <convertTo7Segment+0x82>
        case 3:
            value = 0x4F;
 800097a:	234f      	movs	r3, #79	; 0x4f
 800097c:	71fb      	strb	r3, [r7, #7]
            break;
 800097e:	e014      	b.n	80009aa <convertTo7Segment+0x82>
        case 4:
            value = 0x66;
 8000980:	2366      	movs	r3, #102	; 0x66
 8000982:	71fb      	strb	r3, [r7, #7]
            break;
 8000984:	e011      	b.n	80009aa <convertTo7Segment+0x82>
        case 5:
            value = 0x6D;
 8000986:	236d      	movs	r3, #109	; 0x6d
 8000988:	71fb      	strb	r3, [r7, #7]
            break;
 800098a:	e00e      	b.n	80009aa <convertTo7Segment+0x82>
        case 6:
            value = 0x7D;
 800098c:	237d      	movs	r3, #125	; 0x7d
 800098e:	71fb      	strb	r3, [r7, #7]
            break;
 8000990:	e00b      	b.n	80009aa <convertTo7Segment+0x82>
        case 7:
            value = 0x07;
 8000992:	2307      	movs	r3, #7
 8000994:	71fb      	strb	r3, [r7, #7]
            break;
 8000996:	e008      	b.n	80009aa <convertTo7Segment+0x82>
        case 8:
            value = 0x7F;
 8000998:	237f      	movs	r3, #127	; 0x7f
 800099a:	71fb      	strb	r3, [r7, #7]
            break;
 800099c:	e005      	b.n	80009aa <convertTo7Segment+0x82>
        case 9:
            value = 0x6F;
 800099e:	236f      	movs	r3, #111	; 0x6f
 80009a0:	71fb      	strb	r3, [r7, #7]
            break;
 80009a2:	e002      	b.n	80009aa <convertTo7Segment+0x82>

        default:
            // Handle unsupported values or return a default value
            value = 0x00;  // Blank segment (all segments turned off)
 80009a4:	2300      	movs	r3, #0
 80009a6:	71fb      	strb	r3, [r7, #7]
            break;
 80009a8:	bf00      	nop
    }
    return value;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DisplayValue>:

void DisplayValue(int32_t value)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(value < 0)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da02      	bge.n	80009cc <DisplayValue+0x14>
		value = -value;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	425b      	negs	r3, r3
 80009ca:	607b      	str	r3, [r7, #4]
	GetDigits(value);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff73 	bl	80008bc <GetDigits>
	SPI_EnableChip(true);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 fb96 	bl	8001108 <SPI_EnableChip>
	SPI_SEND(Digits, 2);
 80009dc:	2102      	movs	r1, #2
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <DisplayValue+0x3c>)
 80009e0:	f000 fba4 	bl	800112c <SPI_SEND>
	SPI_EnableChip(false);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fb8f 	bl	8001108 <SPI_EnableChip>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001bc 	.word	0x200001bc

080009f8 <EnableDisplays>:

void EnableDisplays(bool enable)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, !enable);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f083 0301 	eor.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <EnableDisplays+0x28>)
 8000a12:	f001 fb2d 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020800 	.word	0x40020800

08000a24 <InitQEP>:

TIM_HandleTypeDef Tim1Handle;

// TIM3 inicializálása QEP üzemmódban
void InitQEP()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
	// APB1: 84 MHz (TIMx: 168 MHz)
	__TIM1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <InitQEP+0x98>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <InitQEP+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <InitQEP+0x98>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

	// Timer3 konfigurációja enkóder módban

	// HAL_TIM_Base_Init hívása a megfelelően kitöltött TIM_HandleTypeDef struktúrával,
	// 1 teljes motorfordulat alatt MOTOR_RES_ENC inkrement érkezik
	Tim1Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <InitQEP+0x9c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	Tim1Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <InitQEP+0x9c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]

	Tim1Handle.Init.Prescaler = 1;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <InitQEP+0x9c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
	Tim1Handle.Init.Period = 2000;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <InitQEP+0x9c>)
 8000a5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a5e:	60da      	str	r2, [r3, #12]
	

	Tim1Handle.State = HAL_TIM_STATE_RESET;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <InitQEP+0x9c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Tim1Handle.Instance = TIM1;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <InitQEP+0x9c>)
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <InitQEP+0xa0>)
 8000a6c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Init(&Tim1Handle);
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <InitQEP+0x9c>)
 8000a70:	f004 faa0 	bl	8004fb4 <HAL_TIM_Base_Init>
	
	// HAL_TIM_Encoder_Init hív�sa a megfelelően kitöltött TIM_Encoder_InitTypeDef struktúrával,
	// 2 csatornára, 4-szeres kiértékeléssel, előosztás nélkül
	TIM_Encoder_InitTypeDef TIM_Encoder_InitStructure;
	
	TIM_Encoder_InitStructure.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a74:	2303      	movs	r3, #3
 8000a76:	607b      	str	r3, [r7, #4]
	TIM_Encoder_InitStructure.IC1Prescaler = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
	TIM_Encoder_InitStructure.IC2Prescaler = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]

	TIM_Encoder_InitStructure.IC1Filter = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
	TIM_Encoder_InitStructure.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
	TIM_Encoder_InitStructure.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]

	TIM_Encoder_InitStructure.IC2Filter = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_Encoder_InitStructure.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
	TIM_Encoder_InitStructure.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]

	HAL_TIM_Encoder_Init(&Tim1Handle, &TIM_Encoder_InitStructure);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <InitQEP+0x9c>)
 8000a9e:	f004 fbf9 	bl	8005294 <HAL_TIM_Encoder_Init>

	HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_1);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <InitQEP+0x9c>)
 8000aa6:	f004 fca5 	bl	80053f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&Tim1Handle, TIM_CHANNEL_2);
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <InitQEP+0x9c>)
 8000aae:	f004 fca1 	bl	80053f4 <HAL_TIM_Encoder_Start>
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	200001c0 	.word	0x200001c0
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <GetQEPValue>:

// Enkóder érték kiolvasása
uint16_t GetQEPValue()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
//	return (uint16_t)HAL_TIM_ReadCapturedValue(&Tim1Handle, TIM_CHANNEL_1);

    static uint16_t previousCount = 0;
    static uint32_t previousTime = 0;

    uint16_t currentCount = (uint16_t)Tim1Handle.Instance->CNT;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <GetQEPValue+0x88>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	83fb      	strh	r3, [r7, #30]
    uint32_t currentTime = HAL_GetTick();
 8000ad6:	f000 fd61 	bl	800159c <HAL_GetTick>
 8000ada:	61b8      	str	r0, [r7, #24]

    uint16_t countDiff = currentCount - previousCount;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <GetQEPValue+0x8c>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	8bfa      	ldrh	r2, [r7, #30]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	82fb      	strh	r3, [r7, #22]
    uint32_t timeDiff = currentTime - previousTime;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <GetQEPValue+0x90>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	613b      	str	r3, [r7, #16]

    float rotations = (float)countDiff / (MOTOR_RES_ENC * 4.0f); // Number of rotations since the previous reading
 8000af0:	8afb      	ldrh	r3, [r7, #22]
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000afa:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000b5c <GetQEPValue+0x94>
 8000afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b02:	edc7 7a03 	vstr	s15, [r7, #12]
    float elapsedMinutes = (float)timeDiff / (1000.0f * 60.0f); // Elapsed time in minutes
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b10:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000b60 <GetQEPValue+0x98>
 8000b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b18:	edc7 7a02 	vstr	s15, [r7, #8]

    float rpm = rotations / elapsedMinutes; // Rotations per minute
 8000b1c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b20:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b28:	edc7 7a01 	vstr	s15, [r7, #4]

    previousCount = currentCount;
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <GetQEPValue+0x8c>)
 8000b2e:	8bfb      	ldrh	r3, [r7, #30]
 8000b30:	8013      	strh	r3, [r2, #0]
    previousTime = currentTime;
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <GetQEPValue+0x90>)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	6013      	str	r3, [r2, #0]

    return (uint16_t)rpm;
 8000b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b40:	ee17 3a90 	vmov	r3, s15
 8000b44:	b29b      	uxth	r3, r3
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001c0 	.word	0x200001c0
 8000b54:	20000208 	.word	0x20000208
 8000b58:	2000020c 	.word	0x2000020c
 8000b5c:	42800000 	.word	0x42800000
 8000b60:	476a6000 	.word	0x476a6000

08000b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a4a      	ldr	r2, [pc, #296]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b48      	ldr	r3, [pc, #288]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b44      	ldr	r3, [pc, #272]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a43      	ldr	r2, [pc, #268]	; (8000cac <MX_GPIO_Init+0x148>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MX_GPIO_Init+0x148>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a3c      	ldr	r2, [pc, #240]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a35      	ldr	r2, [pc, #212]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_GPIO_Init+0x148>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2120      	movs	r1, #32
 8000bee:	4830      	ldr	r0, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bf0:	f001 fa3e 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedPC_Pin|LedPos_Pin|CS_SEG_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f241 0190 	movw	r1, #4240	; 0x1090
 8000bfa:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000bfc:	f001 fa38 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SEG_GPIO_Port, EN_SEG_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c08:	f001 fa32 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedSpeed_GPIO_Port, LedSpeed_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000c12:	f001 fa2d 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4821      	ldr	r0, [pc, #132]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c2e:	f001 f88b 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c4a:	f001 f87d 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LedPC_Pin|LedPos_Pin|EN_SEG_Pin|CS_SEG_Pin;
 8000c4e:	f241 4390 	movw	r3, #5264	; 0x1490
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c68:	f001 f86e 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PC_Pin|ModeSelect_Pin|asd_Pin;
 8000c6c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000c82:	f001 f861 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedSpeed_Pin;
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedSpeed_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000c9e:	f001 f853 	bl	8001d48 <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <InitAF>:

/* USER CODE BEGIN 2 */
GPIO_InitTypeDef  GPIO_InitStructure;
void InitAF()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
// DC-DC DRIVE VA-VB MOTOR PWM TIM1

GPIO_InitStructure.Pin = MOTOR_AQE_PIN | MOTOR_BQE_PIN;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <InitAF+0x34>)
 8000cc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cc6:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF1_TIM1;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <InitAF+0x34>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_PWM_PORT, &GPIO_InitStructure);
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <InitAF+0x34>)
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <InitAF+0x38>)
 8000cd2:	f001 f839 	bl	8001d48 <HAL_GPIO_Init>

// DC-DC DRIVE A_QE-B_QE-Z_QE QEP TIM3
GPIO_InitStructure.Pin = MOTOR_VA_PIN | MOTOR_VB_PIN;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <InitAF+0x34>)
 8000cd8:	22c0      	movs	r2, #192	; 0xc0
 8000cda:	601a      	str	r2, [r3, #0]
GPIO_InitStructure.Alternate = GPIO_AF2_TIM3;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <InitAF+0x34>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	611a      	str	r2, [r3, #16]
HAL_GPIO_Init(MOTOR_QE_PORT, &GPIO_InitStructure);
 8000ce2:	4903      	ldr	r1, [pc, #12]	; (8000cf0 <InitAF+0x34>)
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <InitAF+0x38>)
 8000ce6:	f001 f82f 	bl	8001d48 <HAL_GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000210 	.word	0x20000210
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fbe8 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f84c 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f7ff ff2e 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 fb3e 	bl	8001388 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000d0c:	f000 f956 	bl	8000fbc <MX_SPI2_Init>
  MX_ADC1_Init();
 8000d10:	f7ff fc7a 	bl	8000608 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000d14:	f008 ff2c 	bl	8009b70 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000d18:	f000 fa94 	bl	8001244 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  InitAF();
 8000d1c:	f7ff ffce 	bl	8000cbc <InitAF>
  //InitTimer();
  InitMotorPWM();
 8000d20:	f000 f8ae 	bl	8000e80 <InitMotorPWM>
  InitQEP();
 8000d24:	f7ff fe7e 	bl	8000a24 <InitQEP>
  SetPWM(0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f903 	bl	8000f34 <SetPWM>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <main+0x94>)
 8000d34:	f001 f99c 	bl	8002070 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <main+0x98>)
 8000d3e:	f001 f997 	bl	8002070 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <main+0x98>)
 8000d48:	f001 f992 	bl	8002070 <HAL_GPIO_WritePin>
  EnableDisplays(true);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fe53 	bl	80009f8 <EnableDisplays>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static int i = 0;

	  DisplayValue(i);
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <main+0x9c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fe2e 	bl	80009b8 <DisplayValue>

	  i++;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <main+0x9c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <main+0x9c>)
 8000d64:	6013      	str	r3, [r2, #0]
	  i = i % 100;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <main+0x9c>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <main+0xa0>)
 8000d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d70:	1159      	asrs	r1, r3, #5
 8000d72:	17d3      	asrs	r3, r2, #31
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	2164      	movs	r1, #100	; 0x64
 8000d78:	fb01 f303 	mul.w	r3, r1, r3
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <main+0x9c>)
 8000d80:	6013      	str	r3, [r2, #0]
//	      // Process the received data
//	      uint8_t data = rxBuffer[i];
//	      // ...
//	    }
//	  }
	  HAL_Delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f000 fc15 	bl	80015b4 <HAL_Delay>
  {
 8000d8a:	e7e2      	b.n	8000d52 <main+0x5a>
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	20000224 	.word	0x20000224
 8000d98:	51eb851f 	.word	0x51eb851f

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2234      	movs	r2, #52	; 0x34
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f009 fc6e 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <SystemClock_Config+0xd0>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <SystemClock_Config+0xd0>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <SystemClock_Config+0xd0>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <SystemClock_Config+0xd4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <SystemClock_Config+0xd4>)
 8000de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <SystemClock_Config+0xd4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e10:	23a8      	movs	r3, #168	; 0xa8
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fa79 	bl	800431c <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e30:	f000 f820 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2105      	movs	r1, #5
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fbee 	bl	8003634 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e5e:	f000 f809 	bl	8000e74 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <InitMotorPWM>:
#include "stm32f4xx_hal_cortex.h"
TIM_HandleTypeDef Tim3Handle;

// TIM1 inicializálása PWM üzemmódban
void InitMotorPWM()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
	// APB2: 42 MHz (TIM3: 84 MHz)
	__TIM3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <InitMotorPWM+0xa8>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <InitMotorPWM+0xa8>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <InitMotorPWM+0xa8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

	// Timer1 konfigurációja PWM üzemmódban a ledek  alapján 21 kHz-re

	// HAL_TIM_Base_Init és HAL_TIM_PWM_Init hívása a megfelelően kitöltött TIM_HandleTypeDef struktúrával
	Tim3Handle.Instance = TIM3;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <InitMotorPWM+0xac>)
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <InitMotorPWM+0xb0>)
 8000ea6:	601a      	str	r2, [r3, #0]
	Tim3Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <InitMotorPWM+0xac>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
	Tim3Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <InitMotorPWM+0xac>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
	Tim3Handle.Init.Prescaler = 3;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <InitMotorPWM+0xac>)
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	605a      	str	r2, [r3, #4]
	Tim3Handle.Init.Period = MOTOR_D_MAX;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <InitMotorPWM+0xac>)
 8000ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec0:	60da      	str	r2, [r3, #12]
	Tim3Handle.State = HAL_TIM_STATE_RESET;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <InitMotorPWM+0xac>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	HAL_TIM_Base_Init(&Tim3Handle);
 8000eca:	4818      	ldr	r0, [pc, #96]	; (8000f2c <InitMotorPWM+0xac>)
 8000ecc:	f004 f872 	bl	8004fb4 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(&Tim3Handle);
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <InitMotorPWM+0xac>)
 8000ed2:	f004 f8be 	bl	8005052 <HAL_TIM_PWM_Init>
	TIM_OC_InitTypeDef TIM_OCInitStructure;
	// HAL_TIM_PWM_ConfigChannel hívása a megfelelően kitöltött TIM_OC_InitTypeDef struktúrával 2 csatornára

	TIM_OCInitStructure.OCMode = TIM_OCMODE_PWM1;
 8000ed6:	2360      	movs	r3, #96	; 0x60
 8000ed8:	607b      	str	r3, [r7, #4]
	TIM_OCInitStructure.Pulse = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
	TIM_OCInitStructure.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	613b      	str	r3, [r7, #16]
	TIM_OCInitStructure.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
	TIM_OCInitStructure.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
	TIM_OCInitStructure.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef2:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &TIM_OCInitStructure, TIM_CHANNEL_1);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <InitMotorPWM+0xac>)
 8000efc:	f004 fc10 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>
	TIM_OCInitStructure.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f00:	2302      	movs	r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_ConfigChannel(&Tim3Handle, &TIM_OCInitStructure, TIM_CHANNEL_2);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2204      	movs	r2, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <InitMotorPWM+0xac>)
 8000f0c:	f004 fc08 	bl	8005720 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <InitMotorPWM+0xac>)
 8000f14:	f004 f8f6 	bl	8005104 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&Tim3Handle, TIM_CHANNEL_2);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <InitMotorPWM+0xac>)
 8000f1c:	f004 f8f2 	bl	8005104 <HAL_TIM_PWM_Start>
}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	20000228 	.word	0x20000228
 8000f30:	40000400 	.word	0x40000400

08000f34 <SetPWM>:

void SetPWM(int32_t d)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if (d > MOTOR_D_MAX)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f42:	dd03      	ble.n	8000f4c <SetPWM+0x18>
	{
		d=MOTOR_D_MAX;
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e004      	b.n	8000f56 <SetPWM+0x22>
	}
	else if (d < 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da01      	bge.n	8000f56 <SetPWM+0x22>
	{
		d=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
	}

	// PWM csatornák beállítása SetMotorCh1 és SetMotorCh2 hívásával
	SetMotorCh1(d);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f80a 	bl	8000f74 <SetMotorCh1>
	SetMotorCh2(d);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f817 	bl	8000f98 <SetMotorCh2>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <SetMotorCh1>:

void SetMotorCh1(uint16_t d)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR1 = d;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SetMotorCh1+0x20>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000228 	.word	0x20000228

08000f98 <SetMotorCh2>:

void SetMotorCh2(uint16_t d)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	Tim3Handle.Instance->CCR2 = d;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SetMotorCh2+0x20>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000228 	.word	0x20000228

08000fbc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <MX_SPI2_Init+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI2_Init+0x64>)
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI2_Init+0x64>)
 8000ff0:	2218      	movs	r2, #24
 8000ff2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_SPI2_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI2_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_SPI2_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI2_Init+0x64>)
 8001008:	220a      	movs	r2, #10
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_SPI2_Init+0x64>)
 800100e:	f003 fc23 	bl	8004858 <HAL_SPI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001018:	f7ff ff2c 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000270 	.word	0x20000270
 8001024:	40003800 	.word	0x40003800

08001028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <HAL_SPI_MspInit+0xd0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d152      	bne.n	80010f0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_SPI_MspInit+0xd4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800109e:	2302      	movs	r3, #2
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0xd8>)
 80010ba:	f000 fe45 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d0:	2305      	movs	r3, #5
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <HAL_SPI_MspInit+0xdc>)
 80010dc:	f000 fe34 	bl	8001d48 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2024      	movs	r0, #36	; 0x24
 80010e6:	f000 fdd6 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010ea:	2024      	movs	r0, #36	; 0x24
 80010ec:	f000 fdef 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40003800 	.word	0x40003800
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020800 	.word	0x40020800
 8001104:	40020400 	.word	0x40020400

08001108 <SPI_EnableChip>:
  }
}

/* USER CODE BEGIN 1 */
void SPI_EnableChip(uint8_t enable)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SEG_GPIO_Port, CS_SEG_Pin, enable);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	461a      	mov	r2, r3
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <SPI_EnableChip+0x20>)
 800111c:	f000 ffa8 	bl	8002070 <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020800 	.word	0x40020800

0800112c <SPI_SEND>:

HAL_StatusTypeDef SPI_SEND(uint8_t* pData, uint16_t datasize)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi2, pData, datasize, HAL_MAX_DELAY);
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <SPI_SEND+0x24>)
 8001142:	f003 fc12 	bl	800496a <HAL_SPI_Transmit>
 8001146:	4603      	mov	r3, r0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000270 	.word	0x20000270

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f9c0 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <SPI2_IRQHandler+0x10>)
 80011fe:	f003 fcf1 	bl	8004be4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000270 	.word	0x20000270

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f001 f89d 	bl	8002350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20001880 	.word	0x20001880

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_TIM10_Init+0x40>)
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_TIM10_Init+0x44>)
 800124c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_TIM10_Init+0x40>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_TIM10_Init+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_TIM10_Init+0x40>)
 800125c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_TIM10_Init+0x40>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_TIM10_Init+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_TIM10_Init+0x40>)
 8001270:	f003 fea0 	bl	8004fb4 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800127a:	f7ff fdfb 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002c8 	.word	0x200002c8
 8001288:	40014400 	.word	0x40014400

0800128c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10d      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40014400 	.word	0x40014400
 80012cc:	40023800 	.word	0x40023800

080012d0 <TIM7_IRQHandler>:
	HAL_TIM_Base_Start_IT(&Tim7Handle);
}

// Megszakításkezelő a TIM7 időzítőhöz
void TIM7_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim7Handle);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM7_IRQHandler+0x10>)
 80012d6:	f004 f91b 	bl	8005510 <HAL_TIM_IRQHandler>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000310 	.word	0x20000310

080012e4 <TimerHandler>:



void TimerHandler()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	int32_t measurement = GetQEPValue();
 80012ea:	f7ff fbed 	bl	8000ac8 <GetQEPValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	607b      	str	r3, [r7, #4]

	if(isCharacteristicUpdated())//ez itt nem jó, inkább vizsáljuk majd jött-e üzenet
 80012f2:	f7ff fa31 	bl	8000758 <isCharacteristicUpdated>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00f      	beq.n	800131c <TimerHandler+0x38>
	{
		//if(prevbase != currentbase)
		//itt megvan még minden adatunk, mentsük lee
		//	elösször álljunk ba a basere
		 //uint32_t prev_baseRPM = characteristic.baseRPM ;
		 if((characteristic.baseRPM - measurement) > 3)
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <TimerHandler+0x78>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d913      	bls.n	8001330 <TimerHandler+0x4c>
			 PID.setpoint = characteristic.baseRPM;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <TimerHandler+0x78>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <TimerHandler+0x7c>)
 8001316:	edc3 7a03 	vstr	s15, [r3, #12]
 800131a:	e009      	b.n	8001330 <TimerHandler+0x4c>

	}
	else{
//		if(prev_baseRPM == characteristic.baseRPM)
//
		PID.setpoint = CalculateSetPoint(0);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fa43 	bl	80007a8 <CalculateSetPoint>
 8001322:	ee07 0a90 	vmov	s15, r0
 8001326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <TimerHandler+0x7c>)
 800132c:	edc3 7a03 	vstr	s15, [r3, #12]
	}


	PIDContollerUpdate(measurement);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	f7ff f8e3 	bl	8000508 <PIDContollerUpdate>

	SetPWM(PID.output);
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <TimerHandler+0x7c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdf4 	bl	8000f34 <SetPWM>

	DisplayValue(measurement);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fb33 	bl	80009b8 <DisplayValue>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000190 	.word	0x20000190
 8001360:	20000128 	.word	0x20000128

08001364 <HAL_TIM_PeriodElapsedCallback>:
// Megszakításkezelő callback a Timer megszakításkezelőhöz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        TimerHandler();
 8001376:	f7ff ffb5 	bl	80012e4 <TimerHandler>
    }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40001400 	.word	0x40001400

08001388 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <MX_USART2_UART_Init+0x60>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013c0:	f004 fd21 	bl	8005e06 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f7ff fd53 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000358 	.word	0x20000358
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_UART_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001446:	230c      	movs	r3, #12
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0x8c>)
 8001462:	f000 fc71 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004400 	.word	0x40004400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a6:	f7ff febb 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f009 f8cb 	bl	800a644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff fc23 	bl	8000cf8 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80014c0:	0800a724 	.word	0x0800a724
  ldr r2, =_sbss
 80014c4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80014c8:	20001fac 	.word	0x20001fac

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_Init+0x40>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_Init+0x40>)
 80014e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_Init+0x40>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 fbc1 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f808 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fe26 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fbd9 	bl	8001cea <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 fba1 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	20000008 	.word	0x20000008
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	2000039c 	.word	0x2000039c

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000039c 	.word	0x2000039c

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e033      	b.n	800167a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff f846 	bl	80006ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001642:	f023 0302 	bic.w	r3, r3, #2
 8001646:	f043 0202 	orr.w	r2, r3, #2
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f94a 	bl	80018e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
 800166a:	e001      	b.n	8001670 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1c>
 800169c:	2302      	movs	r3, #2
 800169e:	e113      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x244>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d925      	bls.n	80016fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	3b1e      	subs	r3, #30
 80016c6:	2207      	movs	r2, #7
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43da      	mvns	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	400a      	ands	r2, r1
 80016d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68d9      	ldr	r1, [r3, #12]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4403      	add	r3, r0
 80016ee:	3b1e      	subs	r3, #30
 80016f0:	409a      	lsls	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	e022      	b.n	8001742 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	2207      	movs	r2, #7
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6919      	ldr	r1, [r3, #16]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	4603      	mov	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4403      	add	r3, r0
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d824      	bhi.n	8001794 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b05      	subs	r3, #5
 800175c:	221f      	movs	r2, #31
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	400a      	ands	r2, r1
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b05      	subs	r3, #5
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	e04c      	b.n	800182e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d824      	bhi.n	80017e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b23      	subs	r3, #35	; 0x23
 80017ae:	221f      	movs	r2, #31
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43da      	mvns	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	400a      	ands	r2, r1
 80017bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b23      	subs	r3, #35	; 0x23
 80017d8:	fa00 f203 	lsl.w	r2, r0, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
 80017e4:	e023      	b.n	800182e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b41      	subs	r3, #65	; 0x41
 80017f8:	221f      	movs	r2, #31
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b41      	subs	r3, #65	; 0x41
 8001822:	fa00 f203 	lsl.w	r2, r0, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_ADC_ConfigChannel+0x250>)
 8001830:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a28      	ldr	r2, [pc, #160]	; (80018d8 <HAL_ADC_ConfigChannel+0x254>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d10f      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d8>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b12      	cmp	r3, #18
 8001842:	d10b      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_ADC_ConfigChannel+0x254>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12b      	bne.n	80018be <HAL_ADC_ConfigChannel+0x23a>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_ADC_ConfigChannel+0x258>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d003      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x1f4>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b11      	cmp	r3, #17
 8001876:	d122      	bne.n	80018be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_ADC_ConfigChannel+0x258>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d111      	bne.n	80018be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_ADC_ConfigChannel+0x25c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_ADC_ConfigChannel+0x260>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9a      	lsrs	r2, r3, #18
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	40012000 	.word	0x40012000
 80018dc:	10000012 	.word	0x10000012
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <ADC_Init+0x1f0>)
 80018f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800191c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	021a      	lsls	r2, r3, #8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6899      	ldr	r1, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	4a58      	ldr	r2, [pc, #352]	; (8001adc <ADC_Init+0x1f4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d022      	beq.n	80019c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800198e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6899      	ldr	r1, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e00f      	b.n	80019e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0202 	bic.w	r2, r2, #2
 80019f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e1b      	ldrb	r3, [r3, #24]
 8001a00:	005a      	lsls	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	035a      	lsls	r2, r3, #13
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	e007      	b.n	8001a5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	051a      	lsls	r2, r3, #20
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a9e:	025a      	lsls	r2, r3, #9
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	029a      	lsls	r2, r3, #10
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	0f000001 	.word	0x0f000001

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00c      	b.n	8001d3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2205      	movs	r2, #5
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e165      	b.n	8002030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f040 8154 	bne.w	800202a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d005      	beq.n	8001d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d130      	bne.n	8001dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ae 	beq.w	800202a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_GPIO_Init+0x304>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x308>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d025      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x30c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01f      	beq.n	8001f5e <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x310>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d019      	beq.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x314>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x318>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00d      	beq.n	8001f52 <HAL_GPIO_Init+0x20a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x31c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <HAL_GPIO_Init+0x206>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_GPIO_Init+0x202>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f74:	4935      	ldr	r1, [pc, #212]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_GPIO_Init+0x324>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_GPIO_Init+0x324>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_GPIO_Init+0x324>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_GPIO_Init+0x324>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae96 	bls.w	8001d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a4:	b08f      	sub	sp, #60	; 0x3c
 80020a6:	af0a      	add	r7, sp, #40	; 0x28
 80020a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e116      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f007 ff40 	bl	8009f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fa5d 	bl	80065b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	687e      	ldr	r6, [r7, #4]
 8002100:	466d      	mov	r5, sp
 8002102:	f106 0410 	add.w	r4, r6, #16
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002112:	e885 0003 	stmia.w	r5, {r0, r1}
 8002116:	1d33      	adds	r3, r6, #4
 8002118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211a:	6838      	ldr	r0, [r7, #0]
 800211c:	f004 f934 	bl	8006388 <USB_CoreInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0d7      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fa4b 	bl	80065d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e04a      	b.n	80021da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	333d      	adds	r3, #61	; 0x3d
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	333c      	adds	r3, #60	; 0x3c
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	b298      	uxth	r0, r3
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3344      	adds	r3, #68	; 0x44
 8002180:	4602      	mov	r2, r0
 8002182:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3340      	adds	r3, #64	; 0x40
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	334c      	adds	r3, #76	; 0x4c
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3354      	adds	r3, #84	; 0x54
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3af      	bcc.n	8002144 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e044      	b.n	8002274 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	3301      	adds	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3b5      	bcc.n	80021ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	687e      	ldr	r6, [r7, #4]
 8002286:	466d      	mov	r5, sp
 8002288:	f106 0410 	add.w	r4, r6, #16
 800228c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002298:	e885 0003 	stmia.w	r5, {r0, r1}
 800229c:	1d33      	adds	r3, r6, #4
 800229e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f004 f9e3 	bl	800666c <USB_DevInit>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e014      	b.n	80022e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 f98b 	bl	80035ec <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 fb25 	bl	800792a <USB_DevDisconnect>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_Start+0x1c>
 8002302:	2302      	movs	r3, #2
 8002304:	e020      	b.n	8002348 <HAL_PCD_Start+0x5e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	2b01      	cmp	r3, #1
 8002314:	d109      	bne.n	800232a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 f92e 	bl	8006590 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f005 fad5 	bl	80078e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b08d      	sub	sp, #52	; 0x34
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f005 fb93 	bl	8007a92 <USB_GetMode>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 84b7 	bne.w	8002ce2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f005 faf7 	bl	800796c <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 84ad 	beq.w	8002ce0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fae4 	bl	800796c <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d107      	bne.n	80023be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 0202 	and.w	r2, r2, #2
 80023bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fad2 	bl	800796c <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d161      	bne.n	8002496 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0210 	bic.w	r2, r2, #16
 80023e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	0c5b      	lsrs	r3, r3, #17
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	2b02      	cmp	r3, #2
 800240c:	d124      	bne.n	8002458 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d035      	beq.n	8002486 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	6a38      	ldr	r0, [r7, #32]
 800242e:	f005 f909 	bl	8007644 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800243e:	441a      	add	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002450:	441a      	add	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	e016      	b.n	8002486 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	0c5b      	lsrs	r3, r3, #17
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	2b06      	cmp	r3, #6
 8002462:	d110      	bne.n	8002486 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246a:	2208      	movs	r2, #8
 800246c:	4619      	mov	r1, r3
 800246e:	6a38      	ldr	r0, [r7, #32]
 8002470:	f005 f8e8 	bl	8007644 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002480:	441a      	add	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0210 	orr.w	r2, r2, #16
 8002494:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f005 fa66 	bl	800796c <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024aa:	f040 80a7 	bne.w	80025fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 fa6b 	bl	8007992 <USB_ReadDevAllOutEpInterrupt>
 80024bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024be:	e099      	b.n	80025f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 808e 	beq.w	80025e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fa8f 	bl	80079fa <USB_ReadDevOutEPInterrupt>
 80024dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00c      	beq.n	8002502 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 feef 	bl	80032e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2308      	movs	r3, #8
 800251c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 ffc5 	bl	80034b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	2310      	movs	r3, #16
 8002540:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d030      	beq.n	80025ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d109      	bne.n	800256c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	78db      	ldrb	r3, [r3, #3]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f007 fdf8 	bl	800a18c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a8:	461a      	mov	r2, r3
 80025aa:	2302      	movs	r3, #2
 80025ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c4:	461a      	mov	r2, r3
 80025c6:	2320      	movs	r3, #32
 80025c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	3301      	adds	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f af62 	bne.w	80024c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f005 f9b3 	bl	800796c <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002610:	f040 80db 	bne.w	80027ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f005 f9d4 	bl	80079c6 <USB_ReadDevAllInEpInterrupt>
 800261e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002624:	e0cd      	b.n	80027c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80c2 	beq.w	80027b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f005 f9fa 	bl	8007a36 <USB_ReadDevInEPInterrupt>
 8002642:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d057      	beq.n	80026fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2201      	movs	r2, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	69f9      	ldr	r1, [r7, #28]
 800266a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800266e:	4013      	ands	r3, r2
 8002670:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d132      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334c      	adds	r3, #76	; 0x4c
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4403      	add	r3, r0
 80026ac:	3348      	adds	r3, #72	; 0x48
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4419      	add	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4403      	add	r3, r0
 80026c0:	334c      	adds	r3, #76	; 0x4c
 80026c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x3a2>
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3354      	adds	r3, #84	; 0x54
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d108      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ea:	461a      	mov	r2, r3
 80026ec:	2101      	movs	r1, #1
 80026ee:	f005 fa01 	bl	8007af4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f007 fcc2 	bl	800a082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002714:	461a      	mov	r2, r3
 8002716:	2308      	movs	r3, #8
 8002718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002730:	461a      	mov	r2, r3
 8002732:	2310      	movs	r3, #16
 8002734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274c:	461a      	mov	r2, r3
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d023      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800275c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275e:	6a38      	ldr	r0, [r7, #32]
 8002760:	f004 f8e2 	bl	8006928 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3338      	adds	r3, #56	; 0x38
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	78db      	ldrb	r3, [r3, #3]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2200      	movs	r2, #0
 8002784:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f007 fd0f 	bl	800a1b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279e:	461a      	mov	r2, r3
 80027a0:	2302      	movs	r3, #2
 80027a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fd08 	bl	80031c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	3301      	adds	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f af2e 	bne.w	8002626 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 f8cc 	bl	800796c <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027de:	d122      	bne.n	8002826 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002806:	2100      	movs	r1, #0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f007 fe89 	bl	800a520 <HAL_PCDEx_LPM_Callback>
 800280e:	e002      	b.n	8002816 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f007 fcad 	bl	800a170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f005 f89e 	bl	800796c <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283a:	d112      	bne.n	8002862 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f007 fc69 	bl	800a124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002860:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f005 f880 	bl	800796c <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002876:	d121      	bne.n	80028bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002886:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d111      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028ac:	2101      	movs	r1, #1
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f007 fe36 	bl	800a520 <HAL_PCDEx_LPM_Callback>
 80028b4:	e002      	b.n	80028bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f007 fc34 	bl	800a124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 f853 	bl	800796c <USB_ReadInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	f040 80b7 	bne.w	8002a42 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2110      	movs	r1, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 f81a 	bl	8006928 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f8:	e046      	b.n	8002988 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002906:	461a      	mov	r2, r3
 8002908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800290c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	440a      	add	r2, r1
 8002924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800292c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002940:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002952:	0151      	lsls	r1, r2, #5
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	440a      	add	r2, r1
 8002958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800295c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002960:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002972:	0151      	lsls	r1, r2, #5
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	440a      	add	r2, r1
 8002978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800297c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002980:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	3301      	adds	r3, #1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298e:	429a      	cmp	r2, r3
 8002990:	d3b3      	bcc.n	80028fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029be:	f043 030b 	orr.w	r3, r3, #11
 80029c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d4:	f043 030b 	orr.w	r3, r3, #11
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	e015      	b.n	8002a08 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a02:	f043 030b 	orr.w	r3, r3, #11
 8002a06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f005 f861 	bl	8007af4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 ff90 	bl	800796c <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	d124      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 f826 	bl	8007aae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 ffdb 	bl	8006a22 <USB_GetDevSpeed>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	f000 fec2 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4620      	mov	r0, r4
 8002a88:	f003 fce0 	bl	800644c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f007 fb20 	bl	800a0d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 ff60 	bl	800796c <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d10a      	bne.n	8002acc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f007 fafd 	bl	800a0b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f002 0208 	and.w	r2, r2, #8
 8002aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 ff4b 	bl	800796c <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d122      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	e014      	b.n	8002b1c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fb27 	bl	8003164 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3e5      	bcc.n	8002af2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 ff1e 	bl	800796c <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3a:	d13b      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	e02b      	b.n	8002b9a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3340      	adds	r3, #64	; 0x40
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d115      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da12      	bge.n	8002b94 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	333f      	adds	r3, #63	; 0x3f
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fae8 	bl	8003164 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	3301      	adds	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3ce      	bcc.n	8002b42 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fed7 	bl	800796c <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc8:	d155      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bca:	2301      	movs	r3, #1
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e045      	b.n	8002c5c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d12e      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da2b      	bge.n	8002c56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d121      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6053      	str	r3, [r2, #4]
            break;
 8002c54:	e007      	b.n	8002c66 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3b4      	bcc.n	8002bd0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fe76 	bl	800796c <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f007 faa1 	bl	800a1d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fe60 	bl	800796c <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d115      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f007 fa91 	bl	800a1f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e000      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x992>
      return;
 8002ce0:	bf00      	nop
    }
  }
}
 8002ce2:	3734      	adds	r7, #52	; 0x34
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd90      	pop	{r4, r7, pc}

08002ce8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_SetAddress+0x1a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e013      	b.n	8002d2a <HAL_PCD_SetAddress+0x42>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fdbe 	bl	800789c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	4608      	mov	r0, r1
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	70fb      	strb	r3, [r7, #3]
 8002d44:	460b      	mov	r3, r1
 8002d46:	803b      	strh	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da0f      	bge.n	8002d78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3338      	adds	r3, #56	; 0x38
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	705a      	strb	r2, [r3, #1]
 8002d76:	e00f      	b.n	8002d98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002da4:	883a      	ldrh	r2, [r7, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	78ba      	ldrb	r2, [r7, #2]
 8002dae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dc2:	78bb      	ldrb	r3, [r7, #2]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d102      	bne.n	8002dce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_PCD_EP_Open+0xaa>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e00e      	b.n	8002dfa <HAL_PCD_EP_Open+0xc8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fe3e 	bl	8006a6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002df8:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da0f      	bge.n	8002e36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3338      	adds	r3, #56	; 0x38
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	705a      	strb	r2, [r3, #1]
 8002e34:	e00f      	b.n	8002e56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_EP_Close+0x6e>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e00e      	b.n	8002e8e <HAL_PCD_EP_Close+0x8c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68f9      	ldr	r1, [r7, #12]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fe7c 	bl	8006b7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	f004 f95b 	bl	80071c4 <USB_EP0StartXfer>
 8002f0e:	e008      	b.n	8002f22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6979      	ldr	r1, [r7, #20]
 8002f1e:	f003 ff09 	bl	8006d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6979      	ldr	r1, [r7, #20]
 8002fce:	f004 f8f9 	bl	80071c4 <USB_EP0StartXfer>
 8002fd2:	e008      	b.n	8002fe6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	f003 fea7 	bl	8006d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d901      	bls.n	800300e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e050      	b.n	80030b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800300e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003012:	2b00      	cmp	r3, #0
 8003014:	da0f      	bge.n	8003036 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 020f 	and.w	r2, r3, #15
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3338      	adds	r3, #56	; 0x38
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	705a      	strb	r2, [r3, #1]
 8003034:	e00d      	b.n	8003052 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_EP_SetStall+0x82>
 800306e:	2302      	movs	r3, #2
 8003070:	e01e      	b.n	80030b0 <HAL_PCD_EP_SetStall+0xc0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fb37 	bl	80076f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	b2d9      	uxtb	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a0:	461a      	mov	r2, r3
 80030a2:	f004 fd27 	bl	8007af4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 020f 	and.w	r2, r3, #15
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d901      	bls.n	80030d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e042      	b.n	800315c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da0f      	bge.n	80030fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	3338      	adds	r3, #56	; 0x38
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	705a      	strb	r2, [r3, #1]
 80030fc:	e00f      	b.n	800311e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_PCD_EP_ClrStall+0x86>
 800313a:	2302      	movs	r3, #2
 800313c:	e00e      	b.n	800315c <HAL_PCD_EP_ClrStall+0xa4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	4618      	mov	r0, r3
 800314e:	f004 fb3f 	bl	80077d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da0c      	bge.n	8003192 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e00c      	b.n	80031ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	3304      	adds	r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 f95e 	bl	8007474 <USB_EPStopXfer>
 80031b8:	4603      	mov	r3, r0
 80031ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	; 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3338      	adds	r3, #56	; 0x38
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d901      	bls.n	80031fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06c      	b.n	80032d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	d902      	bls.n	800321a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3303      	adds	r3, #3
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003222:	e02b      	b.n	800327c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	429a      	cmp	r2, r3
 8003238:	d902      	bls.n	8003240 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3303      	adds	r3, #3
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003258:	b2db      	uxtb	r3, r3
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4603      	mov	r3, r0
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f004 f9b2 	bl	80075c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	441a      	add	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	b29b      	uxth	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	d809      	bhi.n	80032a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800329a:	429a      	cmp	r2, r3
 800329c:	d203      	bcs.n	80032a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1be      	bne.n	8003224 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d811      	bhi.n	80032d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	2201      	movs	r2, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	6939      	ldr	r1, [r7, #16]
 80032ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d2:	4013      	ands	r3, r2
 80032d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	333c      	adds	r3, #60	; 0x3c
 80032f8:	3304      	adds	r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d17b      	bne.n	800340e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	f240 80b9 	bls.w	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80b3 	beq.w	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	e0a7      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	461a      	mov	r2, r3
 8003364:	2320      	movs	r3, #32
 8003366:	6093      	str	r3, [r2, #8]
 8003368:	e098      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 8093 	bne.w	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d90f      	bls.n	800339e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	461a      	mov	r2, r3
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	6093      	str	r3, [r2, #8]
 800339c:	e07e      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	0159      	lsls	r1, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	440b      	add	r3, r1
 80033c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e8:	461a      	mov	r2, r3
 80033ea:	2101      	movs	r1, #1
 80033ec:	f004 fb82 	bl	8007af4 <USB_EP0_OutStart>
 80033f0:	e006      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	441a      	add	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f006 fe20 	bl	800a04c <HAL_PCD_DataOutStageCallback>
 800340c:	e046      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d124      	bne.n	8003460 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	e032      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	2320      	movs	r3, #32
 8003450:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f006 fdf7 	bl	800a04c <HAL_PCD_DataOutStageCallback>
 800345e:	e01d      	b.n	800349c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d114      	bne.n	8003490 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003488:	461a      	mov	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f004 fb32 	bl	8007af4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f006 fdd8 	bl	800a04c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	4f54300a 	.word	0x4f54300a
 80034ac:	4f54310a 	.word	0x4f54310a

080034b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	333c      	adds	r3, #60	; 0x3c
 80034c8:	3304      	adds	r3, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <PCD_EP_OutSetupPacket_int+0x88>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d90e      	bls.n	8003504 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	461a      	mov	r2, r3
 80034fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003502:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f006 fd8f 	bl	800a028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <PCD_EP_OutSetupPacket_int+0x88>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d90c      	bls.n	800352c <PCD_EP_OutSetupPacket_int+0x7c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003524:	461a      	mov	r2, r3
 8003526:	2101      	movs	r1, #1
 8003528:	f004 fae4 	bl	8007af4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	4f54300a 	.word	0x4f54300a

0800353c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
 8003548:	4613      	mov	r3, r2
 800354a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800355a:	883b      	ldrh	r3, [r7, #0]
 800355c:	0419      	lsls	r1, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	430a      	orrs	r2, r1
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
 8003568:	e028      	b.n	80035bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	4413      	add	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e00d      	b.n	800359a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3340      	adds	r3, #64	; 0x40
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4413      	add	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	3301      	adds	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	3b01      	subs	r3, #1
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3ec      	bcc.n	800357e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035a4:	883b      	ldrh	r3, [r7, #0]
 80035a6:	0418      	lsls	r0, r3, #16
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4302      	orrs	r2, r0
 80035b4:	3340      	adds	r3, #64	; 0x40
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	f043 0303 	orr.w	r3, r3, #3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fd ff3a 	bl	800159c <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fd ff36 	bl	800159c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 fb7f 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fe9a 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	0800a6fc 	.word	0x0800a6fc
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	0800a70c 	.word	0x0800a70c

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffdc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0b5b      	lsrs	r3, r3, #13
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	0800a70c 	.word	0x0800a70c

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80038a0:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	496c      	ldr	r1, [pc, #432]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80038be:	2301      	movs	r3, #1
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80038ce:	4b64      	ldr	r3, [pc, #400]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	4960      	ldr	r1, [pc, #384]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038fc:	4b58      	ldr	r3, [pc, #352]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4955      	ldr	r1, [pc, #340]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391a:	d101      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800391c:	2301      	movs	r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003938:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800393a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4946      	ldr	r1, [pc, #280]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003956:	d101      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003958:	2301      	movs	r3, #1
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003964:	2301      	movs	r3, #1
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 808a 	beq.w	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800399e:	f7fd fdfd 	bl	800159c <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fd fdf9 	bl	800159c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e278      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02f      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d028      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e2:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039fe:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d114      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fdc7 	bl	800159c <HAL_GetTick>
 8003a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fd fdc3 	bl	800159c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e240      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ee      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a40:	d114      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	4902      	ldr	r1, [pc, #8]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42470e40 	.word	0x42470e40
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	4944      	ldr	r1, [pc, #272]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a9e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	4937      	ldr	r1, [pc, #220]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	492e      	ldr	r1, [pc, #184]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d011      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003af0:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	4926      	ldr	r1, [pc, #152]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003b10:	2301      	movs	r3, #1
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	491a      	ldr	r1, [pc, #104]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d011      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	4911      	ldr	r1, [pc, #68]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d101      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b62:	2301      	movs	r3, #1
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b74:	f040 80ff 	bne.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fd0d 	bl	800159c <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b84:	e00e      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b86:	f7fd fd09 	bl	800159c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d907      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e188      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	424711e0 	.word	0x424711e0
 8003ba0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba4:	4b7e      	ldr	r3, [pc, #504]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ea      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d028      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d124      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bd8:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	3301      	adds	r3, #1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	0e1b      	lsrs	r3, r3, #24
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	431a      	orrs	r2, r3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4961      	ldr	r1, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d035      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d130      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c4e:	4b54      	ldr	r3, [pc, #336]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c60:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	019b      	lsls	r3, r3, #6
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	071b      	lsls	r3, r3, #28
 8003c90:	4943      	ldr	r1, [pc, #268]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9e:	f023 021f 	bic.w	r2, r3, #31
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	493d      	ldr	r1, [pc, #244]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d029      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d124      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	0f1b      	lsrs	r3, r3, #28
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	019b      	lsls	r3, r3, #6
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	4925      	ldr	r1, [pc, #148]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fd fc24 	bl	800159c <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d58:	f7fd fc20 	bl	800159c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e09f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 8095 	bne.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fd fc0a 	bl	800159c <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d8a:	e00f      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d8c:	f7fd fc06 	bl	800159c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d908      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e085      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470068 	.word	0x42470068
 8003da8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dac:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db8:	d0e8      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d127      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	3b01      	subs	r3, #1
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	4928      	ldr	r1, [pc, #160]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	3b01      	subs	r3, #1
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	4922      	ldr	r1, [pc, #136]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e46:	d118      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	0e1b      	lsrs	r3, r3, #24
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	019b      	lsls	r3, r3, #6
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	4910      	ldr	r1, [pc, #64]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e80:	f7fd fb8c 	bl	800159c <HAL_GetTick>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e88:	f7fd fb88 	bl	800159c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e007      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea6:	d1ef      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3730      	adds	r7, #48	; 0x30
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470070 	.word	0x42470070

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b0ae      	sub	sp, #184	; 0xb8
 8003ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee2:	4bcb      	ldr	r3, [pc, #812]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	f200 8206 	bhi.w	80042fc <HAL_RCC_GetSysClockFreq+0x440>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	080042fd 	.word	0x080042fd
 8003f00:	080042fd 	.word	0x080042fd
 8003f04:	080042fd 	.word	0x080042fd
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	080042fd 	.word	0x080042fd
 8003f10:	080042fd 	.word	0x080042fd
 8003f14:	080042fd 	.word	0x080042fd
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	080042fd 	.word	0x080042fd
 8003f20:	080042fd 	.word	0x080042fd
 8003f24:	080042fd 	.word	0x080042fd
 8003f28:	0800412d 	.word	0x0800412d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4bb9      	ldr	r3, [pc, #740]	; (8004214 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f32:	e1e7      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f34:	4bb8      	ldr	r3, [pc, #736]	; (8004218 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f3a:	e1e3      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4bb4      	ldr	r3, [pc, #720]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f48:	4bb1      	ldr	r3, [pc, #708]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d071      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f54:	4bae      	ldr	r3, [pc, #696]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	f04f 0000 	mov.w	r0, #0
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	0159      	lsls	r1, r3, #5
 8003f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8c:	0150      	lsls	r0, r2, #5
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4621      	mov	r1, r4
 8003f94:	1a51      	subs	r1, r2, r1
 8003f96:	6439      	str	r1, [r7, #64]	; 0x40
 8003f98:	4629      	mov	r1, r5
 8003f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003fac:	4649      	mov	r1, r9
 8003fae:	018b      	lsls	r3, r1, #6
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	018a      	lsls	r2, r1, #6
 8003fba:	4641      	mov	r1, r8
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	00cb      	lsls	r3, r1, #3
 8003fd8:	4641      	mov	r1, r8
 8003fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fde:	4641      	mov	r1, r8
 8003fe0:	00ca      	lsls	r2, r1, #3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4622      	mov	r2, r4
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	462b      	mov	r3, r5
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	eb42 0303 	adc.w	r3, r2, r3
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004004:	4629      	mov	r1, r5
 8004006:	024b      	lsls	r3, r1, #9
 8004008:	4621      	mov	r1, r4
 800400a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800400e:	4621      	mov	r1, r4
 8004010:	024a      	lsls	r2, r1, #9
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004024:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004028:	f7fc f8ec 	bl	8000204 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004036:	e067      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4b75      	ldr	r3, [pc, #468]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004044:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	67bb      	str	r3, [r7, #120]	; 0x78
 8004052:	2300      	movs	r3, #0
 8004054:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004056:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406c:	0150      	lsls	r0, r2, #5
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4621      	mov	r1, r4
 8004074:	1a51      	subs	r1, r2, r1
 8004076:	62b9      	str	r1, [r7, #40]	; 0x28
 8004078:	4629      	mov	r1, r5
 800407a:	eb63 0301 	sbc.w	r3, r3, r1
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800408c:	4649      	mov	r1, r9
 800408e:	018b      	lsls	r3, r1, #6
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004096:	4641      	mov	r1, r8
 8004098:	018a      	lsls	r2, r1, #6
 800409a:	4641      	mov	r1, r8
 800409c:	ebb2 0a01 	subs.w	sl, r2, r1
 80040a0:	4649      	mov	r1, r9
 80040a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ba:	4692      	mov	sl, r2
 80040bc:	469b      	mov	fp, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	eb1a 0303 	adds.w	r3, sl, r3
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	462b      	mov	r3, r5
 80040c8:	eb4b 0303 	adc.w	r3, fp, r3
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040f0:	2200      	movs	r2, #0
 80040f2:	673b      	str	r3, [r7, #112]	; 0x70
 80040f4:	677a      	str	r2, [r7, #116]	; 0x74
 80040f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040fa:	f7fc f883 	bl	8000204 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4613      	mov	r3, r2
 8004104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004108:	4b41      	ldr	r3, [pc, #260]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800411a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800411e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800412a:	e0eb      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d06b      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <HAL_RCC_GetSysClockFreq+0x354>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	2200      	movs	r2, #0
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
 800414e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004156:	663b      	str	r3, [r7, #96]	; 0x60
 8004158:	2300      	movs	r3, #0
 800415a:	667b      	str	r3, [r7, #100]	; 0x64
 800415c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004160:	4622      	mov	r2, r4
 8004162:	462b      	mov	r3, r5
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4621      	mov	r1, r4
 800417a:	1a51      	subs	r1, r2, r1
 800417c:	61b9      	str	r1, [r7, #24]
 800417e:	4629      	mov	r1, r5
 8004180:	eb63 0301 	sbc.w	r3, r3, r1
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004192:	4659      	mov	r1, fp
 8004194:	018b      	lsls	r3, r1, #6
 8004196:	4651      	mov	r1, sl
 8004198:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419c:	4651      	mov	r1, sl
 800419e:	018a      	lsls	r2, r1, #6
 80041a0:	4651      	mov	r1, sl
 80041a2:	ebb2 0801 	subs.w	r8, r2, r1
 80041a6:	4659      	mov	r1, fp
 80041a8:	eb63 0901 	sbc.w	r9, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c0:	4690      	mov	r8, r2
 80041c2:	4699      	mov	r9, r3
 80041c4:	4623      	mov	r3, r4
 80041c6:	eb18 0303 	adds.w	r3, r8, r3
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	462b      	mov	r3, r5
 80041ce:	eb49 0303 	adc.w	r3, r9, r3
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041e0:	4629      	mov	r1, r5
 80041e2:	024b      	lsls	r3, r1, #9
 80041e4:	4621      	mov	r1, r4
 80041e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ea:	4621      	mov	r1, r4
 80041ec:	024a      	lsls	r2, r1, #9
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f6:	2200      	movs	r2, #0
 80041f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80041fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004200:	f7fc f800 	bl	8000204 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800420e:	e065      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x420>
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCC_GetSysClockFreq+0x458>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	2200      	movs	r2, #0
 8004224:	4618      	mov	r0, r3
 8004226:	4611      	mov	r1, r2
 8004228:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800422c:	653b      	str	r3, [r7, #80]	; 0x50
 800422e:	2300      	movs	r3, #0
 8004230:	657b      	str	r3, [r7, #84]	; 0x54
 8004232:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004236:	4642      	mov	r2, r8
 8004238:	464b      	mov	r3, r9
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004248:	0150      	lsls	r0, r2, #5
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4641      	mov	r1, r8
 8004250:	1a51      	subs	r1, r2, r1
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	4649      	mov	r1, r9
 8004256:	eb63 0301 	sbc.w	r3, r3, r1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004268:	4659      	mov	r1, fp
 800426a:	018b      	lsls	r3, r1, #6
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004272:	4651      	mov	r1, sl
 8004274:	018a      	lsls	r2, r1, #6
 8004276:	4651      	mov	r1, sl
 8004278:	1a54      	subs	r4, r2, r1
 800427a:	4659      	mov	r1, fp
 800427c:	eb63 0501 	sbc.w	r5, r3, r1
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	464b      	mov	r3, r9
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c4:	2200      	movs	r2, #0
 80042c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80042ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042ce:	f7fb ff99 	bl	8000204 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4613      	mov	r3, r2
 80042d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_GetSysClockFreq+0x458>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0f1b      	lsrs	r3, r3, #28
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042fa:	e003      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004308:	4618      	mov	r0, r3
 800430a:	37b8      	adds	r7, #184	; 0xb8
 800430c:	46bd      	mov	sp, r7
 800430e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	00f42400 	.word	0x00f42400

0800431c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e28d      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8083 	beq.w	8004442 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800433c:	4b94      	ldr	r3, [pc, #592]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b04      	cmp	r3, #4
 8004346:	d019      	beq.n	800437c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004348:	4b91      	ldr	r3, [pc, #580]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004350:	2b08      	cmp	r3, #8
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004354:	4b8e      	ldr	r3, [pc, #568]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004360:	d00c      	beq.n	800437c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b8b      	ldr	r3, [pc, #556]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d112      	bne.n	8004394 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b88      	ldr	r3, [pc, #544]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437a:	d10b      	bne.n	8004394 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05b      	beq.n	8004440 <HAL_RCC_OscConfig+0x124>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d157      	bne.n	8004440 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e25a      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x90>
 800439e:	4b7c      	ldr	r3, [pc, #496]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7b      	ldr	r2, [pc, #492]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xcc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0xb4>
 80043b6:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a75      	ldr	r2, [pc, #468]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a72      	ldr	r2, [pc, #456]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xcc>
 80043d0:	4b6f      	ldr	r3, [pc, #444]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6e      	ldr	r2, [pc, #440]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd f8d4 	bl	800159c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fd f8d0 	bl	800159c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e21f      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xdc>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd f8c0 	bl	800159c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd f8bc 	bl	800159c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e20b      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b57      	ldr	r3, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x104>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d06f      	beq.n	800452e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d017      	beq.n	800448a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800445a:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d105      	bne.n	8004472 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d11c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b44      	ldr	r3, [pc, #272]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d116      	bne.n	80044b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_RCC_OscConfig+0x186>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1d3      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4937      	ldr	r1, [pc, #220]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	e03a      	b.n	800452e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c0:	4b34      	ldr	r3, [pc, #208]	; (8004594 <HAL_RCC_OscConfig+0x278>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fd f869 	bl	800159c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fd f865 	bl	800159c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1b4      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4925      	ldr	r1, [pc, #148]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	e015      	b.n	800452e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_RCC_OscConfig+0x278>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd f848 	bl	800159c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004510:	f7fd f844 	bl	800159c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e193      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d036      	beq.n	80045a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <HAL_RCC_OscConfig+0x27c>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd f828 	bl	800159c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004550:	f7fd f824 	bl	800159c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e173      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x234>
 800456e:	e01b      	b.n	80045a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_OscConfig+0x27c>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fd f811 	bl	800159c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	e00e      	b.n	800459c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457e:	f7fd f80d 	bl	800159c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d907      	bls.n	800459c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e15c      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
 8004590:	40023800 	.word	0x40023800
 8004594:	42470000 	.word	0x42470000
 8004598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	4b8a      	ldr	r3, [pc, #552]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8097 	beq.w	80046e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ba:	4b83      	ldr	r3, [pc, #524]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b7f      	ldr	r3, [pc, #508]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4a7e      	ldr	r2, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	; 0x40
 80045d6:	4b7c      	ldr	r3, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	4b79      	ldr	r3, [pc, #484]	; (80047cc <HAL_RCC_OscConfig+0x4b0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d118      	bne.n	8004624 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f2:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x4b0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a75      	ldr	r2, [pc, #468]	; (80047cc <HAL_RCC_OscConfig+0x4b0>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fe:	f7fc ffcd 	bl	800159c <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004606:	f7fc ffc9 	bl	800159c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e118      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	4b6c      	ldr	r3, [pc, #432]	; (80047cc <HAL_RCC_OscConfig+0x4b0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x31e>
 800462c:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	e01c      	b.n	8004674 <HAL_RCC_OscConfig+0x358>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x340>
 8004642:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a60      	ldr	r2, [pc, #384]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6713      	str	r3, [r2, #112]	; 0x70
 800464e:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0x358>
 800465c:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4a59      	ldr	r2, [pc, #356]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
 8004668:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	f023 0304 	bic.w	r3, r3, #4
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc ff8e 	bl	800159c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fc ff8a 	bl	800159c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0d7      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ee      	beq.n	8004684 <HAL_RCC_OscConfig+0x368>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc ff78 	bl	800159c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fc ff74 	bl	800159c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0c1      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ee      	bne.n	80046b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80ad 	beq.w	8004848 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ee:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d060      	beq.n	80047bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d145      	bne.n	800478e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x4b4>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fc ff48 	bl	800159c <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fc ff44 	bl	800159c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e093      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x4b4>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fc ff19 	bl	800159c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fc ff15 	bl	800159c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e064      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x452>
 800478c:	e05c      	b.n	8004848 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x4b4>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fc ff02 	bl	800159c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fc fefe 	bl	800159c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e04d      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x480>
 80047ba:	e045      	b.n	8004848 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e040      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_RCC_OscConfig+0x538>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d030      	beq.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d129      	bne.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d122      	bne.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d119      	bne.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d10f      	bne.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07b      	b.n	8004962 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487a:	d009      	beq.n	8004890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	61da      	str	r2, [r3, #28]
 8004882:	e005      	b.n	8004890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fbbc 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	ea42 0103 	orr.w	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0104 	and.w	r1, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0210 	and.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b088      	sub	sp, #32
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_SPI_Transmit+0x22>
 8004988:	2302      	movs	r3, #2
 800498a:	e126      	b.n	8004bda <HAL_SPI_Transmit+0x270>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004994:	f7fc fe02 	bl	800159c <HAL_GetTick>
 8004998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ae:	e10b      	b.n	8004bc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x52>
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c0:	e102      	b.n	8004bc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2203      	movs	r2, #3
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a08:	d10f      	bne.n	8004a2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a50:	d14b      	bne.n	8004aea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Transmit+0xf6>
 8004a5a:	8afb      	ldrh	r3, [r7, #22]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d13e      	bne.n	8004ade <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a84:	e02b      	b.n	8004ade <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d112      	bne.n	8004aba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	881a      	ldrh	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab8:	e011      	b.n	8004ade <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aba:	f7fc fd6f 	bl	800159c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d803      	bhi.n	8004ad2 <HAL_SPI_Transmit+0x168>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_Transmit+0x16e>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004adc:	e074      	b.n	8004bc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ce      	bne.n	8004a86 <HAL_SPI_Transmit+0x11c>
 8004ae8:	e04c      	b.n	8004b84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0x18e>
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d140      	bne.n	8004b7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b1e:	e02c      	b.n	8004b7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d113      	bne.n	8004b56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b54:	e011      	b.n	8004b7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b56:	f7fc fd21 	bl	800159c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d803      	bhi.n	8004b6e <HAL_SPI_Transmit+0x204>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_Transmit+0x20a>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b78:	e026      	b.n	8004bc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1cd      	bne.n	8004b20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9d1 	bl	8004f30 <SPI_EndRxTxTransaction>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e000      	b.n	8004bc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	099b      	lsrs	r3, r3, #6
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
    return;
 8004c26:	e0d7      	b.n	8004dd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_SPI_IRQHandler+0x66>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	09db      	lsrs	r3, r3, #7
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
    return;
 8004c48:	e0c6      	b.n	8004dd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10c      	bne.n	8004c70 <HAL_SPI_IRQHandler+0x8c>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80b4 	beq.w	8004dd8 <HAL_SPI_IRQHandler+0x1f4>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80ad 	beq.w	8004dd8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d023      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d011      	beq.n	8004cba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	e00b      	b.n	8004cd2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
        return;
 8004cd0:	e082      	b.n	8004dd8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f043 0208 	orr.w	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04f      	beq.n	8004dd6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <HAL_SPI_IRQHandler+0x17e>
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d034      	beq.n	8004dcc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0203 	bic.w	r2, r2, #3
 8004d70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d011      	beq.n	8004d9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_SPI_IRQHandler+0x1fc>)
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc ffbb 	bl	8001d02 <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <HAL_SPI_IRQHandler+0x1fc>)
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc ffa5 	bl	8001d02 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004dca:	e003      	b.n	8004dd4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f809 	bl	8004de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dd2:	e000      	b.n	8004dd6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004dd4:	bf00      	nop
    return;
 8004dd6:	bf00      	nop
  }
}
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	08004df9 	.word	0x08004df9

08004de4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff ffe6 	bl	8004de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e30:	f7fc fbb4 	bl	800159c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e40:	f7fc fbac 	bl	800159c <HAL_GetTick>
 8004e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	015b      	lsls	r3, r3, #5
 8004e4c:	0d1b      	lsrs	r3, r3, #20
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e56:	e054      	b.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d050      	beq.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e60:	f7fc fb9c 	bl	800159c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d902      	bls.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8e:	d111      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e98:	d004      	beq.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d107      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d10f      	bne.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e017      	b.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d19b      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000000 	.word	0x20000000

08004f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <SPI_EndRxTxTransaction+0x7c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <SPI_EndRxTxTransaction+0x80>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0d5b      	lsrs	r3, r3, #21
 8004f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d112      	bne.n	8004f82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff ff5a 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e00f      	b.n	8004fa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b80      	cmp	r3, #128	; 0x80
 8004f9a:	d0f2      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x52>
 8004f9c:	e000      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f9e:	bf00      	nop
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000000 	.word	0x20000000
 8004fb0:	165e9f81 	.word	0x165e9f81

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e041      	b.n	800504a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc f956 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fc7e 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e041      	b.n	80050e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f839 	bl	80050f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fc2f 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x24>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x3e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x58>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07c      	b.n	8005270 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0x82>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0x92>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fdec 	bl	8005d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <HAL_TIM_PWM_Start+0x174>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_PWM_Start+0xcc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2c      	ldr	r2, [pc, #176]	; (800527c <HAL_TIM_PWM_Start+0x178>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_PWM_Start+0xd0>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_PWM_Start+0xd2>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_TIM_PWM_Start+0x174>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fc:	d01d      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_TIM_PWM_Start+0x17c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <HAL_TIM_PWM_Start+0x180>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIM_PWM_Start+0x184>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIM_PWM_Start+0x178>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIM_PWM_Start+0x188>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIM_PWM_Start+0x18c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d010      	beq.n	800526e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	e007      	b.n	800526e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010000 	.word	0x40010000
 800527c:	40010400 	.word	0x40010400
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40001800 	.word	0x40001800

08005294 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e097      	b.n	80053d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f88f 	bl	80053e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d8:	f023 0307 	bic.w	r3, r3, #7
 80052dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 fb03 	bl	80058f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	4313      	orrs	r3, r2
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005334:	f023 030c 	bic.w	r3, r3, #12
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	4313      	orrs	r3, r2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	031b      	lsls	r3, r3, #12
 8005364:	4313      	orrs	r3, r2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	4313      	orrs	r3, r2
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005404:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800540c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005414:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800541c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d110      	bne.n	8005446 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800542a:	7b7b      	ldrb	r3, [r7, #13]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e069      	b.n	8005508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005444:	e031      	b.n	80054aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d110      	bne.n	800546e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d102      	bne.n	8005458 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005452:	7b3b      	ldrb	r3, [r7, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e055      	b.n	8005508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800546c:	e01d      	b.n	80054aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d108      	bne.n	8005486 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d105      	bne.n	8005486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800547a:	7b7b      	ldrb	r3, [r7, #13]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d102      	bne.n	8005486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005480:	7b3b      	ldrb	r3, [r7, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e03e      	b.n	8005508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_TIM_Encoder_Start+0xc4>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d008      	beq.n	80054c8 <HAL_TIM_Encoder_Start+0xd4>
 80054b6:	e00f      	b.n	80054d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc67 	bl	8005d94 <TIM_CCxChannelCmd>
      break;
 80054c6:	e016      	b.n	80054f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	2104      	movs	r1, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fc5f 	bl	8005d94 <TIM_CCxChannelCmd>
      break;
 80054d6:	e00e      	b.n	80054f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2201      	movs	r2, #1
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fc57 	bl	8005d94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2201      	movs	r2, #1
 80054ec:	2104      	movs	r1, #4
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fc50 	bl	8005d94 <TIM_CCxChannelCmd>
      break;
 80054f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0201 	orr.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9b0 	bl	80058b8 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9a2 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9b3 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0204 	mvn.w	r2, #4
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f986 	bl	80058b8 <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f978 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f989 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f95c 	bl	80058b8 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f94e 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f95f 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f932 	bl	80058b8 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f924 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f935 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fe68 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fb99 	bl	8005df2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8fa 	bl	80058e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b20      	cmp	r3, #32
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0220 	mvn.w	r2, #32
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fb63 	bl	8005dde <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800573a:	2302      	movs	r3, #2
 800573c:	e0ae      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b0c      	cmp	r3, #12
 800574a:	f200 809f 	bhi.w	800588c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005789 	.word	0x08005789
 8005758:	0800588d 	.word	0x0800588d
 800575c:	0800588d 	.word	0x0800588d
 8005760:	0800588d 	.word	0x0800588d
 8005764:	080057c9 	.word	0x080057c9
 8005768:	0800588d 	.word	0x0800588d
 800576c:	0800588d 	.word	0x0800588d
 8005770:	0800588d 	.word	0x0800588d
 8005774:	0800580b 	.word	0x0800580b
 8005778:	0800588d 	.word	0x0800588d
 800577c:	0800588d 	.word	0x0800588d
 8005780:	0800588d 	.word	0x0800588d
 8005784:	0800584b 	.word	0x0800584b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f950 	bl	8005a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0208 	orr.w	r2, r2, #8
 80057a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	619a      	str	r2, [r3, #24]
      break;
 80057c6:	e064      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9a0 	bl	8005b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	619a      	str	r2, [r3, #24]
      break;
 8005808:	e043      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 f9f5 	bl	8005c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0208 	orr.w	r2, r2, #8
 8005824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0204 	bic.w	r2, r2, #4
 8005834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69d9      	ldr	r1, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	61da      	str	r2, [r3, #28]
      break;
 8005848:	e023      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fa49 	bl	8005ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	021a      	lsls	r2, r3, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	61da      	str	r2, [r3, #28]
      break;
 800588a:	e002      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <TIM_Base_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a3d      	ldr	r2, [pc, #244]	; (8005a0c <TIM_Base_SetConfig+0x118>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3c      	ldr	r2, [pc, #240]	; (8005a10 <TIM_Base_SetConfig+0x11c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3b      	ldr	r2, [pc, #236]	; (8005a14 <TIM_Base_SetConfig+0x120>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a3a      	ldr	r2, [pc, #232]	; (8005a18 <TIM_Base_SetConfig+0x124>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <TIM_Base_SetConfig+0x114>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d027      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <TIM_Base_SetConfig+0x118>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d023      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2b      	ldr	r2, [pc, #172]	; (8005a10 <TIM_Base_SetConfig+0x11c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01f      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <TIM_Base_SetConfig+0x120>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <TIM_Base_SetConfig+0x124>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d017      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <TIM_Base_SetConfig+0x128>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <TIM_Base_SetConfig+0x12c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00f      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <TIM_Base_SetConfig+0x130>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <TIM_Base_SetConfig+0x134>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <TIM_Base_SetConfig+0x138>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <TIM_Base_SetConfig+0x13c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d108      	bne.n	80059b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <TIM_Base_SetConfig+0x114>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0xf8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <TIM_Base_SetConfig+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d103      	bne.n	80059f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	615a      	str	r2, [r3, #20]
}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800
 8005a28:	40001800 	.word	0x40001800
 8005a2c:	40001c00 	.word	0x40001c00
 8005a30:	40002000 	.word	0x40002000

08005a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 0302 	bic.w	r3, r3, #2
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <TIM_OC1_SetConfig+0xd8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_OC1_SetConfig+0x64>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <TIM_OC1_SetConfig+0xdc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d10c      	bne.n	8005ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0308 	bic.w	r3, r3, #8
 8005a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <TIM_OC1_SetConfig+0xd8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC1_SetConfig+0x8e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <TIM_OC1_SetConfig+0xdc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d111      	bne.n	8005ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0210 	bic.w	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0320 	bic.w	r3, r3, #32
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <TIM_OC2_SetConfig+0xe4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC2_SetConfig+0x68>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a21      	ldr	r2, [pc, #132]	; (8005bfc <TIM_OC2_SetConfig+0xe8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10d      	bne.n	8005b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <TIM_OC2_SetConfig+0xe4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x94>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <TIM_OC2_SetConfig+0xe8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d113      	bne.n	8005bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40010400 	.word	0x40010400

08005c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0303 	bic.w	r3, r3, #3
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <TIM_OC3_SetConfig+0xe0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC3_SetConfig+0x66>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a20      	ldr	r2, [pc, #128]	; (8005ce4 <TIM_OC3_SetConfig+0xe4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10d      	bne.n	8005c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <TIM_OC3_SetConfig+0xe0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x92>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <TIM_OC3_SetConfig+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d113      	bne.n	8005cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40010400 	.word	0x40010400

08005ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <TIM_OC4_SetConfig+0xa4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_OC4_SetConfig+0x68>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <TIM_OC4_SetConfig+0xa8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d109      	bne.n	8005d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	019b      	lsls	r3, r3, #6
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400

08005d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2201      	movs	r2, #1
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1a      	ldr	r2, [r3, #32]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	401a      	ands	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e03f      	b.n	8005e98 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fb fadd 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	; 0x24
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f828 	bl	8005ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b0c0      	sub	sp, #256	; 0x100
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	68d9      	ldr	r1, [r3, #12]
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	ea40 0301 	orr.w	r3, r0, r1
 8005ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ef8:	f021 010c 	bic.w	r1, r1, #12
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f06:	430b      	orrs	r3, r1
 8005f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	6999      	ldr	r1, [r3, #24]
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	ea40 0301 	orr.w	r3, r0, r1
 8005f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b8f      	ldr	r3, [pc, #572]	; (800616c <UART_SetConfig+0x2cc>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d005      	beq.n	8005f40 <UART_SetConfig+0xa0>
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b8d      	ldr	r3, [pc, #564]	; (8006170 <UART_SetConfig+0x2d0>)
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d104      	bne.n	8005f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7fd fc7e 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8005f44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f48:	e003      	b.n	8005f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f4a:	f7fd fc65 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	f040 810c 	bne.w	8006178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f72:	4622      	mov	r2, r4
 8005f74:	462b      	mov	r3, r5
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f82:	4621      	mov	r1, r4
 8005f84:	eb12 0801 	adds.w	r8, r2, r1
 8005f88:	4629      	mov	r1, r5
 8005f8a:	eb43 0901 	adc.w	r9, r3, r1
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fa2:	4690      	mov	r8, r2
 8005fa4:	4699      	mov	r9, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	eb18 0303 	adds.w	r3, r8, r3
 8005fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	eb49 0303 	adc.w	r3, r9, r3
 8005fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fce:	460b      	mov	r3, r1
 8005fd0:	18db      	adds	r3, r3, r3
 8005fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	eb42 0303 	adc.w	r3, r2, r3
 8005fda:	657b      	str	r3, [r7, #84]	; 0x54
 8005fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fe4:	f7fa f90e 	bl	8000204 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4b61      	ldr	r3, [pc, #388]	; (8006174 <UART_SetConfig+0x2d4>)
 8005fee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	011c      	lsls	r4, r3, #4
 8005ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	1891      	adds	r1, r2, r2
 800600e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006010:	415b      	adcs	r3, r3
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006018:	4641      	mov	r1, r8
 800601a:	eb12 0a01 	adds.w	sl, r2, r1
 800601e:	4649      	mov	r1, r9
 8006020:	eb43 0b01 	adc.w	fp, r3, r1
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006038:	4692      	mov	sl, r2
 800603a:	469b      	mov	fp, r3
 800603c:	4643      	mov	r3, r8
 800603e:	eb1a 0303 	adds.w	r3, sl, r3
 8006042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006046:	464b      	mov	r3, r9
 8006048:	eb4b 0303 	adc.w	r3, fp, r3
 800604c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006064:	460b      	mov	r3, r1
 8006066:	18db      	adds	r3, r3, r3
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
 800606a:	4613      	mov	r3, r2
 800606c:	eb42 0303 	adc.w	r3, r2, r3
 8006070:	647b      	str	r3, [r7, #68]	; 0x44
 8006072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800607a:	f7fa f8c3 	bl	8000204 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4611      	mov	r1, r2
 8006084:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <UART_SetConfig+0x2d4>)
 8006086:	fba3 2301 	umull	r2, r3, r3, r1
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	2264      	movs	r2, #100	; 0x64
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	1acb      	subs	r3, r1, r3
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800609a:	4b36      	ldr	r3, [pc, #216]	; (8006174 <UART_SetConfig+0x2d4>)
 800609c:	fba3 2302 	umull	r2, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a8:	441c      	add	r4, r3
 80060aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	1891      	adds	r1, r2, r2
 80060c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c4:	415b      	adcs	r3, r3
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060cc:	4641      	mov	r1, r8
 80060ce:	1851      	adds	r1, r2, r1
 80060d0:	6339      	str	r1, [r7, #48]	; 0x30
 80060d2:	4649      	mov	r1, r9
 80060d4:	414b      	adcs	r3, r1
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060e4:	4659      	mov	r1, fp
 80060e6:	00cb      	lsls	r3, r1, #3
 80060e8:	4651      	mov	r1, sl
 80060ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ee:	4651      	mov	r1, sl
 80060f0:	00ca      	lsls	r2, r1, #3
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	4642      	mov	r2, r8
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006100:	464b      	mov	r3, r9
 8006102:	460a      	mov	r2, r1
 8006104:	eb42 0303 	adc.w	r3, r2, r3
 8006108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800611c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006120:	460b      	mov	r3, r1
 8006122:	18db      	adds	r3, r3, r3
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	4613      	mov	r3, r2
 8006128:	eb42 0303 	adc.w	r3, r2, r3
 800612c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006136:	f7fa f865 	bl	8000204 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <UART_SetConfig+0x2d4>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	; 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	3332      	adds	r3, #50	; 0x32
 8006152:	4a08      	ldr	r2, [pc, #32]	; (8006174 <UART_SetConfig+0x2d4>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0207 	and.w	r2, r3, #7
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4422      	add	r2, r4
 8006166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006168:	e105      	b.n	8006376 <UART_SetConfig+0x4d6>
 800616a:	bf00      	nop
 800616c:	40011000 	.word	0x40011000
 8006170:	40011400 	.word	0x40011400
 8006174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617c:	2200      	movs	r2, #0
 800617e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800618a:	4642      	mov	r2, r8
 800618c:	464b      	mov	r3, r9
 800618e:	1891      	adds	r1, r2, r2
 8006190:	6239      	str	r1, [r7, #32]
 8006192:	415b      	adcs	r3, r3
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619a:	4641      	mov	r1, r8
 800619c:	1854      	adds	r4, r2, r1
 800619e:	4649      	mov	r1, r9
 80061a0:	eb43 0501 	adc.w	r5, r3, r1
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	00eb      	lsls	r3, r5, #3
 80061ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061b2:	00e2      	lsls	r2, r4, #3
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	4643      	mov	r3, r8
 80061ba:	18e3      	adds	r3, r4, r3
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c0:	464b      	mov	r3, r9
 80061c2:	eb45 0303 	adc.w	r3, r5, r3
 80061c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061e6:	4629      	mov	r1, r5
 80061e8:	008b      	lsls	r3, r1, #2
 80061ea:	4621      	mov	r1, r4
 80061ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f0:	4621      	mov	r1, r4
 80061f2:	008a      	lsls	r2, r1, #2
 80061f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061f8:	f7fa f804 	bl	8000204 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4b60      	ldr	r3, [pc, #384]	; (8006384 <UART_SetConfig+0x4e4>)
 8006202:	fba3 2302 	umull	r2, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	011c      	lsls	r4, r3, #4
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	1891      	adds	r1, r2, r2
 8006222:	61b9      	str	r1, [r7, #24]
 8006224:	415b      	adcs	r3, r3
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800622c:	4641      	mov	r1, r8
 800622e:	1851      	adds	r1, r2, r1
 8006230:	6139      	str	r1, [r7, #16]
 8006232:	4649      	mov	r1, r9
 8006234:	414b      	adcs	r3, r1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006244:	4659      	mov	r1, fp
 8006246:	00cb      	lsls	r3, r1, #3
 8006248:	4651      	mov	r1, sl
 800624a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624e:	4651      	mov	r1, sl
 8006250:	00ca      	lsls	r2, r1, #3
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	4603      	mov	r3, r0
 8006258:	4642      	mov	r2, r8
 800625a:	189b      	adds	r3, r3, r2
 800625c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006260:	464b      	mov	r3, r9
 8006262:	460a      	mov	r2, r1
 8006264:	eb42 0303 	adc.w	r3, r2, r3
 8006268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	67bb      	str	r3, [r7, #120]	; 0x78
 8006276:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006284:	4649      	mov	r1, r9
 8006286:	008b      	lsls	r3, r1, #2
 8006288:	4641      	mov	r1, r8
 800628a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800628e:	4641      	mov	r1, r8
 8006290:	008a      	lsls	r2, r1, #2
 8006292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006296:	f7f9 ffb5 	bl	8000204 <__aeabi_uldivmod>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4b39      	ldr	r3, [pc, #228]	; (8006384 <UART_SetConfig+0x4e4>)
 80062a0:	fba3 1302 	umull	r1, r3, r3, r2
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	2164      	movs	r1, #100	; 0x64
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	3332      	adds	r3, #50	; 0x32
 80062b2:	4a34      	ldr	r2, [pc, #208]	; (8006384 <UART_SetConfig+0x4e4>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062be:	441c      	add	r4, r3
 80062c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c4:	2200      	movs	r2, #0
 80062c6:	673b      	str	r3, [r7, #112]	; 0x70
 80062c8:	677a      	str	r2, [r7, #116]	; 0x74
 80062ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062ce:	4642      	mov	r2, r8
 80062d0:	464b      	mov	r3, r9
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	415b      	adcs	r3, r3
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062de:	4641      	mov	r1, r8
 80062e0:	1851      	adds	r1, r2, r1
 80062e2:	6039      	str	r1, [r7, #0]
 80062e4:	4649      	mov	r1, r9
 80062e6:	414b      	adcs	r3, r1
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062f6:	4659      	mov	r1, fp
 80062f8:	00cb      	lsls	r3, r1, #3
 80062fa:	4651      	mov	r1, sl
 80062fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006300:	4651      	mov	r1, sl
 8006302:	00ca      	lsls	r2, r1, #3
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	4603      	mov	r3, r0
 800630a:	4642      	mov	r2, r8
 800630c:	189b      	adds	r3, r3, r2
 800630e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006310:	464b      	mov	r3, r9
 8006312:	460a      	mov	r2, r1
 8006314:	eb42 0303 	adc.w	r3, r2, r3
 8006318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	663b      	str	r3, [r7, #96]	; 0x60
 8006324:	667a      	str	r2, [r7, #100]	; 0x64
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006332:	4649      	mov	r1, r9
 8006334:	008b      	lsls	r3, r1, #2
 8006336:	4641      	mov	r1, r8
 8006338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633c:	4641      	mov	r1, r8
 800633e:	008a      	lsls	r2, r1, #2
 8006340:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006344:	f7f9 ff5e 	bl	8000204 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <UART_SetConfig+0x4e4>)
 800634e:	fba3 1302 	umull	r1, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2164      	movs	r1, #100	; 0x64
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	3332      	adds	r3, #50	; 0x32
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <UART_SetConfig+0x4e4>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 020f 	and.w	r2, r3, #15
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4422      	add	r2, r4
 8006374:	609a      	str	r2, [r3, #8]
}
 8006376:	bf00      	nop
 8006378:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006382:	bf00      	nop
 8006384:	51eb851f 	.word	0x51eb851f

08006388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f107 001c 	add.w	r0, r7, #28
 8006396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b01      	cmp	r3, #1
 800639e:	d122      	bne.n	80063e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fbe8 	bl	8007bb0 <USB_CoreReset>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]
 80063e4:	e01a      	b.n	800641c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fbdc 	bl	8007bb0 <USB_CoreReset>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
 800640e:	e005      	b.n	800641c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	2b01      	cmp	r3, #1
 8006420:	d10b      	bne.n	800643a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f043 0206 	orr.w	r2, r3, #6
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006446:	b004      	add	sp, #16
 8006448:	4770      	bx	lr
	...

0800644c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d165      	bne.n	800652c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a41      	ldr	r2, [pc, #260]	; (8006568 <USB_SetTurnaroundTime+0x11c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d906      	bls.n	8006476 <USB_SetTurnaroundTime+0x2a>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a40      	ldr	r2, [pc, #256]	; (800656c <USB_SetTurnaroundTime+0x120>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d202      	bcs.n	8006476 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006470:	230f      	movs	r3, #15
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e062      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4a3c      	ldr	r2, [pc, #240]	; (800656c <USB_SetTurnaroundTime+0x120>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d306      	bcc.n	800648c <USB_SetTurnaroundTime+0x40>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a3b      	ldr	r2, [pc, #236]	; (8006570 <USB_SetTurnaroundTime+0x124>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d202      	bcs.n	800648c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006486:	230e      	movs	r3, #14
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e057      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a38      	ldr	r2, [pc, #224]	; (8006570 <USB_SetTurnaroundTime+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d306      	bcc.n	80064a2 <USB_SetTurnaroundTime+0x56>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a37      	ldr	r2, [pc, #220]	; (8006574 <USB_SetTurnaroundTime+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d202      	bcs.n	80064a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800649c:	230d      	movs	r3, #13
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e04c      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a33      	ldr	r2, [pc, #204]	; (8006574 <USB_SetTurnaroundTime+0x128>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d306      	bcc.n	80064b8 <USB_SetTurnaroundTime+0x6c>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4a32      	ldr	r2, [pc, #200]	; (8006578 <USB_SetTurnaroundTime+0x12c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d802      	bhi.n	80064b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064b2:	230c      	movs	r3, #12
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e041      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <USB_SetTurnaroundTime+0x12c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d906      	bls.n	80064ce <USB_SetTurnaroundTime+0x82>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a2e      	ldr	r2, [pc, #184]	; (800657c <USB_SetTurnaroundTime+0x130>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d802      	bhi.n	80064ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064c8:	230b      	movs	r3, #11
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e036      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a2a      	ldr	r2, [pc, #168]	; (800657c <USB_SetTurnaroundTime+0x130>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d906      	bls.n	80064e4 <USB_SetTurnaroundTime+0x98>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4a29      	ldr	r2, [pc, #164]	; (8006580 <USB_SetTurnaroundTime+0x134>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d802      	bhi.n	80064e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064de:	230a      	movs	r3, #10
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e02b      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4a26      	ldr	r2, [pc, #152]	; (8006580 <USB_SetTurnaroundTime+0x134>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d906      	bls.n	80064fa <USB_SetTurnaroundTime+0xae>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a25      	ldr	r2, [pc, #148]	; (8006584 <USB_SetTurnaroundTime+0x138>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d202      	bcs.n	80064fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064f4:	2309      	movs	r3, #9
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e020      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4a21      	ldr	r2, [pc, #132]	; (8006584 <USB_SetTurnaroundTime+0x138>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d306      	bcc.n	8006510 <USB_SetTurnaroundTime+0xc4>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a20      	ldr	r2, [pc, #128]	; (8006588 <USB_SetTurnaroundTime+0x13c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d802      	bhi.n	8006510 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800650a:	2308      	movs	r3, #8
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e015      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <USB_SetTurnaroundTime+0x13c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d906      	bls.n	8006526 <USB_SetTurnaroundTime+0xda>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <USB_SetTurnaroundTime+0x140>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d202      	bcs.n	8006526 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006520:	2307      	movs	r3, #7
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e00a      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006526:	2306      	movs	r3, #6
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e007      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006532:	2309      	movs	r3, #9
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e001      	b.n	800653c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006538:	2309      	movs	r3, #9
 800653a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	00d8acbf 	.word	0x00d8acbf
 800656c:	00e4e1c0 	.word	0x00e4e1c0
 8006570:	00f42400 	.word	0x00f42400
 8006574:	01067380 	.word	0x01067380
 8006578:	011a499f 	.word	0x011a499f
 800657c:	01312cff 	.word	0x01312cff
 8006580:	014ca43f 	.word	0x014ca43f
 8006584:	016e3600 	.word	0x016e3600
 8006588:	01a6ab1f 	.word	0x01a6ab1f
 800658c:	01e84800 	.word	0x01e84800

08006590 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f043 0201 	orr.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d115      	bne.n	8006622 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006602:	2001      	movs	r0, #1
 8006604:	f7fa ffd6 	bl	80015b4 <HAL_Delay>
      ms++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fa3f 	bl	8007a92 <USB_GetMode>
 8006614:	4603      	mov	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	d01e      	beq.n	8006658 <USB_SetCurrentMode+0x84>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b31      	cmp	r3, #49	; 0x31
 800661e:	d9f0      	bls.n	8006602 <USB_SetCurrentMode+0x2e>
 8006620:	e01a      	b.n	8006658 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d115      	bne.n	8006654 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006634:	2001      	movs	r0, #1
 8006636:	f7fa ffbd 	bl	80015b4 <HAL_Delay>
      ms++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fa26 	bl	8007a92 <USB_GetMode>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <USB_SetCurrentMode+0x84>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b31      	cmp	r3, #49	; 0x31
 8006650:	d9f0      	bls.n	8006634 <USB_SetCurrentMode+0x60>
 8006652:	e001      	b.n	8006658 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e005      	b.n	8006664 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b32      	cmp	r3, #50	; 0x32
 800665c:	d101      	bne.n	8006662 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800666c:	b084      	sub	sp, #16
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800667a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e009      	b.n	80066a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3340      	adds	r3, #64	; 0x40
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	2200      	movs	r2, #0
 8006698:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3301      	adds	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b0e      	cmp	r3, #14
 80066a4:	d9f2      	bls.n	800668c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11c      	bne.n	80066e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ba:	f043 0302 	orr.w	r3, r3, #2
 80066be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e005      	b.n	80066f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f8:	461a      	mov	r2, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006704:	4619      	mov	r1, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	461a      	mov	r2, r3
 800670e:	680b      	ldr	r3, [r1, #0]
 8006710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10c      	bne.n	8006732 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800671e:	2100      	movs	r1, #0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f965 	bl	80069f0 <USB_SetDevSpeed>
 8006726:	e008      	b.n	800673a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006728:	2101      	movs	r1, #1
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f960 	bl	80069f0 <USB_SetDevSpeed>
 8006730:	e003      	b.n	800673a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006732:	2103      	movs	r1, #3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f95b 	bl	80069f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800673a:	2110      	movs	r1, #16
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8f3 	bl	8006928 <USB_FlushTxFifo>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f91f 	bl	8006990 <USB_FlushRxFifo>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e043      	b.n	800680e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679c:	d118      	bne.n	80067d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	461a      	mov	r2, r3
 80067b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e013      	b.n	80067e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c6:	461a      	mov	r2, r3
 80067c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e008      	b.n	80067e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	461a      	mov	r2, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3301      	adds	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d3b7      	bcc.n	8006786 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	e043      	b.n	80068a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800682e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006832:	d118      	bne.n	8006866 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	461a      	mov	r2, r3
 8006848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e013      	b.n	8006878 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	461a      	mov	r2, r3
 800685e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	e008      	b.n	8006878 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	461a      	mov	r2, r3
 8006874:	2300      	movs	r3, #0
 8006876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	2300      	movs	r3, #0
 8006888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800689c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3301      	adds	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d3b7      	bcc.n	800681c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f043 0210 	orr.w	r2, r3, #16
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <USB_DevInit+0x2b8>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f043 0208 	orr.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d107      	bne.n	8006914 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800690c:	f043 0304 	orr.w	r3, r3, #4
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006920:	b004      	add	sp, #16
 8006922:	4770      	bx	lr
 8006924:	803c3800 	.word	0x803c3800

08006928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <USB_FlushTxFifo+0x64>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e01b      	b.n	8006980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	daf2      	bge.n	8006936 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	019b      	lsls	r3, r3, #6
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <USB_FlushTxFifo+0x64>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e006      	b.n	8006980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b20      	cmp	r3, #32
 800697c:	d0f0      	beq.n	8006960 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	00030d40 	.word	0x00030d40

08006990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a11      	ldr	r2, [pc, #68]	; (80069ec <USB_FlushRxFifo+0x5c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e018      	b.n	80069e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	daf2      	bge.n	800699c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2210      	movs	r2, #16
 80069be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a08      	ldr	r2, [pc, #32]	; (80069ec <USB_FlushRxFifo+0x5c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e006      	b.n	80069e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d0f0      	beq.n	80069c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	00030d40 	.word	0x00030d40

080069f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a10:	4313      	orrs	r3, r2
 8006a12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0306 	and.w	r3, r3, #6
 8006a3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	e00a      	b.n	8006a5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d002      	beq.n	8006a54 <USB_GetDevSpeed+0x32>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b06      	cmp	r3, #6
 8006a52:	d102      	bne.n	8006a5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a54:	2302      	movs	r3, #2
 8006a56:	75fb      	strb	r3, [r7, #23]
 8006a58:	e001      	b.n	8006a5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a5a:	230f      	movs	r3, #15
 8006a5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d13a      	bne.n	8006afe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	2101      	movs	r1, #1
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d155      	bne.n	8006b6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	791b      	ldrb	r3, [r3, #4]
 8006ada:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006adc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	059b      	lsls	r3, r3, #22
 8006ae2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e036      	b.n	8006b6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	69da      	ldr	r2, [r3, #28]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	2101      	movs	r1, #1
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d11a      	bne.n	8006b6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	791b      	ldrb	r3, [r3, #4]
 8006b50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b52:	430b      	orrs	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d161      	bne.n	8006c5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bae:	d11f      	bne.n	8006bf0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f303 	lsl.w	r3, r1, r3
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c10:	4013      	ands	r3, r2
 8006c12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	2101      	movs	r1, #1
 8006c26:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c34:	4013      	ands	r3, r2
 8006c36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	0159      	lsls	r1, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c52:	4619      	mov	r1, r3
 8006c54:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <USB_DeactivateEndpoint+0x1b0>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]
 8006c5a:	e060      	b.n	8006d1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c72:	d11f      	bne.n	8006cb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	0159      	lsls	r1, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	440b      	add	r3, r1
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	4619      	mov	r1, r3
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <USB_DeactivateEndpoint+0x1b4>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	ec337800 	.word	0xec337800
 8006d30:	eff37800 	.word	0xeff37800

08006d34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 815c 	bne.w	800700e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d132      	bne.n	8006dc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbc:	0cdb      	lsrs	r3, r3, #19
 8006dbe:	04db      	lsls	r3, r3, #19
 8006dc0:	6113      	str	r3, [r2, #16]
 8006dc2:	e074      	b.n	8006eae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	0cdb      	lsrs	r3, r3, #19
 8006de0:	04db      	lsls	r3, r3, #19
 8006de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6999      	ldr	r1, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	440b      	add	r3, r1
 8006e20:	1e59      	subs	r1, r3, #1
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e2a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e2c:	4b9d      	ldr	r3, [pc, #628]	; (80070a4 <USB_EPStartXfer+0x370>)
 8006e2e:	400b      	ands	r3, r1
 8006e30:	69b9      	ldr	r1, [r7, #24]
 8006e32:	0148      	lsls	r0, r1, #5
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	4401      	add	r1, r0
 8006e38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e56:	69b9      	ldr	r1, [r7, #24]
 8006e58:	0148      	lsls	r0, r1, #5
 8006e5a:	69f9      	ldr	r1, [r7, #28]
 8006e5c:	4401      	add	r1, r0
 8006e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e62:	4313      	orrs	r3, r2
 8006e64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d11f      	bne.n	8006eae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d14b      	bne.n	8006f4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d009      	beq.n	8006ed0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	791b      	ldrb	r3, [r3, #4]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d128      	bne.n	8006f2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d110      	bne.n	8006f0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e00f      	b.n	8006f2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e133      	b.n	80071b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	791b      	ldrb	r3, [r3, #4]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d015      	beq.n	8006fa0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 811b 	beq.w	80071b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	2101      	movs	r1, #1
 8006f90:	fa01 f303 	lsl.w	r3, r1, r3
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f9e:	e109      	b.n	80071b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	e00f      	b.n	8006ff2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6919      	ldr	r1, [r3, #16]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	b298      	uxth	r0, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	4603      	mov	r3, r0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fade 	bl	80075c8 <USB_WritePacket>
 800700c:	e0d2      	b.n	80071b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	0cdb      	lsrs	r3, r3, #19
 800702a:	04db      	lsls	r3, r3, #19
 800702c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800704c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007050:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d126      	bne.n	80070a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007070:	69b9      	ldr	r1, [r7, #24]
 8007072:	0148      	lsls	r0, r1, #5
 8007074:	69f9      	ldr	r1, [r7, #28]
 8007076:	4401      	add	r1, r0
 8007078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800707c:	4313      	orrs	r3, r2
 800707e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800709e:	6113      	str	r3, [r2, #16]
 80070a0:	e03a      	b.n	8007118 <USB_EPStartXfer+0x3e4>
 80070a2:	bf00      	nop
 80070a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	1e5a      	subs	r2, r3, #1
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	8afa      	ldrh	r2, [r7, #22]
 80070c4:	fb03 f202 	mul.w	r2, r3, r2
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	8afb      	ldrh	r3, [r7, #22]
 80070dc:	04d9      	lsls	r1, r3, #19
 80070de:	4b38      	ldr	r3, [pc, #224]	; (80071c0 <USB_EPStartXfer+0x48c>)
 80070e0:	400b      	ands	r3, r1
 80070e2:	69b9      	ldr	r1, [r7, #24]
 80070e4:	0148      	lsls	r0, r1, #5
 80070e6:	69f9      	ldr	r1, [r7, #28]
 80070e8:	4401      	add	r1, r0
 80070ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	0148      	lsls	r0, r1, #5
 800710c:	69f9      	ldr	r1, [r7, #28]
 800710e:	4401      	add	r1, r0
 8007110:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007114:	4313      	orrs	r3, r2
 8007116:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d10d      	bne.n	800713a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6919      	ldr	r1, [r3, #16]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	460a      	mov	r2, r1
 8007138:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	791b      	ldrb	r3, [r3, #4]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d128      	bne.n	8007194 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d110      	bne.n	8007174 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e00f      	b.n	8007194 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007192:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	1ff80000 	.word	0x1ff80000

080071c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 80ce 	bne.w	8007382 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d132      	bne.n	8007254 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007208:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800720c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	440a      	add	r2, r1
 8007248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724c:	0cdb      	lsrs	r3, r3, #19
 800724e:	04db      	lsls	r3, r3, #19
 8007250:	6113      	str	r3, [r2, #16]
 8007252:	e04e      	b.n	80072f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800726e:	0cdb      	lsrs	r3, r3, #19
 8007270:	04db      	lsls	r3, r3, #19
 8007272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007292:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007296:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d903      	bls.n	80072ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e2:	6939      	ldr	r1, [r7, #16]
 80072e4:	0148      	lsls	r0, r1, #5
 80072e6:	6979      	ldr	r1, [r7, #20]
 80072e8:	4401      	add	r1, r0
 80072ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072ee:	4313      	orrs	r3, r2
 80072f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d11e      	bne.n	8007336 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	e097      	b.n	8007466 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007354:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8083 	beq.w	8007466 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800737c:	4313      	orrs	r3, r2
 800737e:	634b      	str	r3, [r1, #52]	; 0x34
 8007380:	e071      	b.n	8007466 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739c:	0cdb      	lsrs	r3, r3, #19
 800739e:	04db      	lsls	r3, r3, #19
 80073a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007414:	6939      	ldr	r1, [r7, #16]
 8007416:	0148      	lsls	r0, r1, #5
 8007418:	6979      	ldr	r1, [r7, #20]
 800741a:	4401      	add	r1, r0
 800741c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007420:	4313      	orrs	r3, r2
 8007422:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10d      	bne.n	8007446 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6919      	ldr	r1, [r3, #16]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	460a      	mov	r2, r1
 8007444:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007464:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d14a      	bne.n	8007528 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074aa:	f040 8086 	bne.w	80075ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8007502:	4293      	cmp	r3, r2
 8007504:	d902      	bls.n	800750c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
          break;
 800750a:	e056      	b.n	80075ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007524:	d0e7      	beq.n	80074f6 <USB_EPStopXfer+0x82>
 8007526:	e048      	b.n	80075ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007540:	d13b      	bne.n	80075ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	440a      	add	r2, r1
 800755c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007560:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007564:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	7812      	ldrb	r2, [r2, #0]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f242 7210 	movw	r2, #10000	; 0x2710
 8007596:	4293      	cmp	r3, r2
 8007598:	d902      	bls.n	80075a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	75fb      	strb	r3, [r7, #23]
          break;
 800759e:	e00c      	b.n	80075ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b8:	d0e7      	beq.n	800758a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b089      	sub	sp, #36	; 0x24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	460b      	mov	r3, r1
 80075d8:	71fb      	strb	r3, [r7, #7]
 80075da:	4613      	mov	r3, r2
 80075dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d123      	bne.n	8007636 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075ee:	88bb      	ldrh	r3, [r7, #4]
 80075f0:	3303      	adds	r3, #3
 80075f2:	089b      	lsrs	r3, r3, #2
 80075f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e018      	b.n	800762e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	031a      	lsls	r2, r3, #12
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	4413      	add	r3, r2
 8007604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007608:	461a      	mov	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	3301      	adds	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	3301      	adds	r3, #1
 800761a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	3301      	adds	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	3301      	adds	r3, #1
 8007626:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	3301      	adds	r3, #1
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	429a      	cmp	r2, r3
 8007634:	d3e2      	bcc.n	80075fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3724      	adds	r7, #36	; 0x24
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007644:	b480      	push	{r7}
 8007646:	b08b      	sub	sp, #44	; 0x2c
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	089b      	lsrs	r3, r3, #2
 800765e:	b29b      	uxth	r3, r3
 8007660:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800766a:	2300      	movs	r3, #0
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	e014      	b.n	800769a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	601a      	str	r2, [r3, #0]
    pDest++;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	3301      	adds	r3, #1
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	3301      	adds	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	3301      	adds	r3, #1
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	3301      	adds	r3, #1
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	3301      	adds	r3, #1
 8007698:	623b      	str	r3, [r7, #32]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d3e6      	bcc.n	8007670 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076a2:	8bfb      	ldrh	r3, [r7, #30]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01e      	beq.n	80076e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b2:	461a      	mov	r2, r3
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	6812      	ldr	r2, [r2, #0]
 80076ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	701a      	strb	r2, [r3, #0]
      i++;
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	3301      	adds	r3, #1
 80076d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	3301      	adds	r3, #1
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80076da:	8bfb      	ldrh	r3, [r7, #30]
 80076dc:	3b01      	subs	r3, #1
 80076de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1ea      	bne.n	80076bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	372c      	adds	r7, #44	; 0x2c
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d12c      	bne.n	800776a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	db12      	blt.n	8007748 <USB_EPSetStall+0x54>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00f      	beq.n	8007748 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007746:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	e02b      	b.n	80077c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db12      	blt.n	80077a2 <USB_EPSetStall+0xae>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00f      	beq.n	80077a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d128      	bne.n	800783e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800780a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d003      	beq.n	800781c <USB_EPClearStall+0x4c>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	791b      	ldrb	r3, [r3, #4]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d138      	bne.n	800788e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	e027      	b.n	800788e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800785c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d003      	beq.n	800786e <USB_EPClearStall+0x9e>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d10f      	bne.n	800788e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800788c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80078be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d6:	4313      	orrs	r3, r2
 80078d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007916:	f023 0302 	bic.w	r3, r3, #2
 800791a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007944:	f023 0303 	bic.w	r3, r3, #3
 8007948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	4013      	ands	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	0c1b      	lsrs	r3, r3, #16
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	4013      	ands	r3, r2
 80079e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	b29b      	uxth	r3, r3
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a28:	68bb      	ldr	r3, [r7, #8]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	fa22 f303 	lsr.w	r3, r2, r3
 8007a66:	01db      	lsls	r3, r3, #7
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4013      	ands	r3, r2
 8007a82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a84:	68bb      	ldr	r3, [r7, #8]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007acc:	f023 0307 	bic.w	r3, r3, #7
 8007ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	460b      	mov	r3, r1
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	333c      	adds	r3, #60	; 0x3c
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	4a26      	ldr	r2, [pc, #152]	; (8007bac <USB_EP0_OutStart+0xb8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d90a      	bls.n	8007b2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b28:	d101      	bne.n	8007b2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e037      	b.n	8007b9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	461a      	mov	r2, r3
 8007b36:	2300      	movs	r3, #0
 8007b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b5c:	f043 0318 	orr.w	r3, r3, #24
 8007b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10f      	bne.n	8007b9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	461a      	mov	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	4f54300a 	.word	0x4f54300a

08007bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <USB_CoreReset+0x64>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e01b      	b.n	8007c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	daf2      	bge.n	8007bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f043 0201 	orr.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <USB_CoreReset+0x64>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d901      	bls.n	8007bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e006      	b.n	8007c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d0f0      	beq.n	8007be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	00030d40 	.word	0x00030d40

08007c18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c28:	f002 fcc8 	bl	800a5bc <USBD_static_malloc>
 8007c2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32b0      	adds	r2, #176	; 0xb0
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c44:	2302      	movs	r3, #2
 8007c46:	e0d4      	b.n	8007df2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c48:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f002 fd1c 	bl	800a68c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	32b0      	adds	r2, #176	; 0xb0
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	32b0      	adds	r2, #176	; 0xb0
 8007c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7c1b      	ldrb	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d138      	bne.n	8007cf2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c80:	4b5e      	ldr	r3, [pc, #376]	; (8007dfc <USBD_CDC_Init+0x1e4>)
 8007c82:	7819      	ldrb	r1, [r3, #0]
 8007c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c88:	2202      	movs	r2, #2
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 fb25 	bl	800a2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c90:	4b5a      	ldr	r3, [pc, #360]	; (8007dfc <USBD_CDC_Init+0x1e4>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007caa:	4b55      	ldr	r3, [pc, #340]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007cac:	7819      	ldrb	r1, [r3, #0]
 8007cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f002 fb10 	bl	800a2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cba:	4b51      	ldr	r3, [pc, #324]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cd6:	4b4b      	ldr	r3, [pc, #300]	; (8007e04 <USBD_CDC_Init+0x1ec>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	3326      	adds	r3, #38	; 0x26
 8007cec:	2210      	movs	r2, #16
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	e035      	b.n	8007d5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cf2:	4b42      	ldr	r3, [pc, #264]	; (8007dfc <USBD_CDC_Init+0x1e4>)
 8007cf4:	7819      	ldrb	r1, [r3, #0]
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f002 faed 	bl	800a2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d00:	4b3e      	ldr	r3, [pc, #248]	; (8007dfc <USBD_CDC_Init+0x1e4>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	3324      	adds	r3, #36	; 0x24
 8007d16:	2201      	movs	r2, #1
 8007d18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d1a:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007d1c:	7819      	ldrb	r1, [r3, #0]
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	2202      	movs	r2, #2
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f002 fad9 	bl	800a2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d28:	4b35      	ldr	r3, [pc, #212]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d40:	2201      	movs	r2, #1
 8007d42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d44:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <USBD_CDC_Init+0x1ec>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3326      	adds	r3, #38	; 0x26
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d5e:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <USBD_CDC_Init+0x1ec>)
 8007d60:	7819      	ldrb	r1, [r3, #0]
 8007d62:	2308      	movs	r3, #8
 8007d64:	2203      	movs	r2, #3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f002 fab7 	bl	800a2da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d6c:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <USBD_CDC_Init+0x1ec>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 020f 	and.w	r2, r3, #15
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	3324      	adds	r3, #36	; 0x24
 8007d82:	2201      	movs	r2, #1
 8007d84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	33b0      	adds	r3, #176	; 0xb0
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e018      	b.n	8007df2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7c1b      	ldrb	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007dca:	7819      	ldrb	r1, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f002 fb6e 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8007ddc:	e008      	b.n	8007df0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <USBD_CDC_Init+0x1e8>)
 8007de0:	7819      	ldrb	r1, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f002 fb64 	bl	800a4b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000093 	.word	0x20000093
 8007e00:	20000094 	.word	0x20000094
 8007e04:	20000095 	.word	0x20000095

08007e08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e14:	4b3a      	ldr	r3, [pc, #232]	; (8007f00 <USBD_CDC_DeInit+0xf8>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f002 fa83 	bl	800a326 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e20:	4b37      	ldr	r3, [pc, #220]	; (8007f00 <USBD_CDC_DeInit+0xf8>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 020f 	and.w	r2, r3, #15
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	3324      	adds	r3, #36	; 0x24
 8007e36:	2200      	movs	r2, #0
 8007e38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e3a:	4b32      	ldr	r3, [pc, #200]	; (8007f04 <USBD_CDC_DeInit+0xfc>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f002 fa70 	bl	800a326 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e46:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <USBD_CDC_DeInit+0xfc>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 020f 	and.w	r2, r3, #15
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e5e:	2200      	movs	r2, #0
 8007e60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e62:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <USBD_CDC_DeInit+0x100>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f002 fa5c 	bl	800a326 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e6e:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <USBD_CDC_DeInit+0x100>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 020f 	and.w	r2, r3, #15
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	2200      	movs	r2, #0
 8007e86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e88:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <USBD_CDC_DeInit+0x100>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3326      	adds	r3, #38	; 0x26
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	32b0      	adds	r2, #176	; 0xb0
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01f      	beq.n	8007ef4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	33b0      	adds	r3, #176	; 0xb0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	32b0      	adds	r2, #176	; 0xb0
 8007ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f002 fb7e 	bl	800a5d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32b0      	adds	r2, #176	; 0xb0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000093 	.word	0x20000093
 8007f04:	20000094 	.word	0x20000094
 8007f08:	20000095 	.word	0x20000095

08007f0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32b0      	adds	r2, #176	; 0xb0
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e0bf      	b.n	80080bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d050      	beq.n	8007fea <USBD_CDC_Setup+0xde>
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	f040 80af 	bne.w	80080ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d03a      	beq.n	8007fcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b25b      	sxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da1b      	bge.n	8007f98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	33b0      	adds	r3, #176	; 0xb0
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	88d2      	ldrh	r2, [r2, #6]
 8007f7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	88db      	ldrh	r3, [r3, #6]
 8007f82:	2b07      	cmp	r3, #7
 8007f84:	bf28      	it	cs
 8007f86:	2307      	movcs	r3, #7
 8007f88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	89fa      	ldrh	r2, [r7, #14]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fd6d 	bl	8009a70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f96:	e090      	b.n	80080ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	785a      	ldrb	r2, [r3, #1]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8007fa8:	d803      	bhi.n	8007fb2 <USBD_CDC_Setup+0xa6>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	e000      	b.n	8007fb4 <USBD_CDC_Setup+0xa8>
 8007fb2:	2240      	movs	r2, #64	; 0x40
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007fba:	6939      	ldr	r1, [r7, #16]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fd7f 	bl	8009ac8 <USBD_CtlPrepareRx>
      break;
 8007fca:	e076      	b.n	80080ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	33b0      	adds	r3, #176	; 0xb0
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	7850      	ldrb	r0, [r2, #1]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4798      	blx	r3
      break;
 8007fe8:	e067      	b.n	80080ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b0b      	cmp	r3, #11
 8007ff0:	d851      	bhi.n	8008096 <USBD_CDC_Setup+0x18a>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBD_CDC_Setup+0xec>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008029 	.word	0x08008029
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	08008097 	.word	0x08008097
 8008004:	08008097 	.word	0x08008097
 8008008:	08008097 	.word	0x08008097
 800800c:	08008097 	.word	0x08008097
 8008010:	08008097 	.word	0x08008097
 8008014:	08008097 	.word	0x08008097
 8008018:	08008097 	.word	0x08008097
 800801c:	08008097 	.word	0x08008097
 8008020:	08008053 	.word	0x08008053
 8008024:	0800807d 	.word	0x0800807d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b03      	cmp	r3, #3
 8008032:	d107      	bne.n	8008044 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008034:	f107 030a 	add.w	r3, r7, #10
 8008038:	2202      	movs	r2, #2
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fd17 	bl	8009a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008042:	e032      	b.n	80080aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 fca1 	bl	800998e <USBD_CtlError>
            ret = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	75fb      	strb	r3, [r7, #23]
          break;
 8008050:	e02b      	b.n	80080aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b03      	cmp	r3, #3
 800805c:	d107      	bne.n	800806e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800805e:	f107 030d 	add.w	r3, r7, #13
 8008062:	2201      	movs	r2, #1
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fd02 	bl	8009a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806c:	e01d      	b.n	80080aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 fc8c 	bl	800998e <USBD_CtlError>
            ret = USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	75fb      	strb	r3, [r7, #23]
          break;
 800807a:	e016      	b.n	80080aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b03      	cmp	r3, #3
 8008086:	d00f      	beq.n	80080a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fc7f 	bl	800998e <USBD_CtlError>
            ret = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008094:	e008      	b.n	80080a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fc78 	bl	800998e <USBD_CtlError>
          ret = USBD_FAIL;
 800809e:	2303      	movs	r3, #3
 80080a0:	75fb      	strb	r3, [r7, #23]
          break;
 80080a2:	e002      	b.n	80080aa <USBD_CDC_Setup+0x19e>
          break;
 80080a4:	bf00      	nop
 80080a6:	e008      	b.n	80080ba <USBD_CDC_Setup+0x1ae>
          break;
 80080a8:	bf00      	nop
      }
      break;
 80080aa:	e006      	b.n	80080ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fc6d 	bl	800998e <USBD_CtlError>
      ret = USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	75fb      	strb	r3, [r7, #23]
      break;
 80080b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32b0      	adds	r2, #176	; 0xb0
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e065      	b.n	80081ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	32b0      	adds	r2, #176	; 0xb0
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 020f 	and.w	r2, r3, #15
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	3318      	adds	r3, #24
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02f      	beq.n	8008178 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	f003 020f 	and.w	r2, r3, #15
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	3318      	adds	r3, #24
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	f003 010f 	and.w	r1, r3, #15
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	460b      	mov	r3, r1
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	440b      	add	r3, r1
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4403      	add	r3, r0
 8008140:	3348      	adds	r3, #72	; 0x48
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	fbb2 f1f3 	udiv	r1, r2, r3
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800814e:	2b00      	cmp	r3, #0
 8008150:	d112      	bne.n	8008178 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	f003 020f 	and.w	r2, r3, #15
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	3318      	adds	r3, #24
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800816a:	78f9      	ldrb	r1, [r7, #3]
 800816c:	2300      	movs	r3, #0
 800816e:	2200      	movs	r2, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 f980 	bl	800a476 <USBD_LL_Transmit>
 8008176:	e01f      	b.n	80081b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	33b0      	adds	r3, #176	; 0xb0
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	33b0      	adds	r3, #176	; 0xb0
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	32b0      	adds	r2, #176	; 0xb0
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32b0      	adds	r2, #176	; 0xb0
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e01a      	b.n	800822a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f002 f97e 	bl	800a4fa <USBD_LL_GetRxDataSize>
 80081fe:	4602      	mov	r2, r0
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	33b0      	adds	r3, #176	; 0xb0
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008224:	4611      	mov	r1, r2
 8008226:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	32b0      	adds	r2, #176	; 0xb0
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	e025      	b.n	80082a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	33b0      	adds	r3, #176	; 0xb0
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01a      	beq.n	800829e <USBD_CDC_EP0_RxReady+0x6c>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800826e:	2bff      	cmp	r3, #255	; 0xff
 8008270:	d015      	beq.n	800829e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	33b0      	adds	r3, #176	; 0xb0
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800828a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008292:	b292      	uxth	r2, r2
 8008294:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	22ff      	movs	r2, #255	; 0xff
 800829a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082b0:	2182      	movs	r1, #130	; 0x82
 80082b2:	4818      	ldr	r0, [pc, #96]	; (8008314 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082b4:	f000 fd09 	bl	8008cca <USBD_GetEpDesc>
 80082b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ba:	2101      	movs	r1, #1
 80082bc:	4815      	ldr	r0, [pc, #84]	; (8008314 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082be:	f000 fd04 	bl	8008cca <USBD_GetEpDesc>
 80082c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082c4:	2181      	movs	r1, #129	; 0x81
 80082c6:	4813      	ldr	r0, [pc, #76]	; (8008314 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082c8:	f000 fcff 	bl	8008cca <USBD_GetEpDesc>
 80082cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2210      	movs	r2, #16
 80082d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d006      	beq.n	80082ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e8:	711a      	strb	r2, [r3, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fc:	711a      	strb	r2, [r3, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2243      	movs	r2, #67	; 0x43
 8008306:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000050 	.word	0x20000050

08008318 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008320:	2182      	movs	r1, #130	; 0x82
 8008322:	4818      	ldr	r0, [pc, #96]	; (8008384 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008324:	f000 fcd1 	bl	8008cca <USBD_GetEpDesc>
 8008328:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800832a:	2101      	movs	r1, #1
 800832c:	4815      	ldr	r0, [pc, #84]	; (8008384 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800832e:	f000 fccc 	bl	8008cca <USBD_GetEpDesc>
 8008332:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008334:	2181      	movs	r1, #129	; 0x81
 8008336:	4813      	ldr	r0, [pc, #76]	; (8008384 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008338:	f000 fcc7 	bl	8008cca <USBD_GetEpDesc>
 800833c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2210      	movs	r2, #16
 8008348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2200      	movs	r2, #0
 8008354:	711a      	strb	r2, [r3, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f042 0202 	orr.w	r2, r2, #2
 800835c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d006      	beq.n	8008372 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	711a      	strb	r2, [r3, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f042 0202 	orr.w	r2, r2, #2
 8008370:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2243      	movs	r2, #67	; 0x43
 8008376:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000050 	.word	0x20000050

08008388 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008390:	2182      	movs	r1, #130	; 0x82
 8008392:	4818      	ldr	r0, [pc, #96]	; (80083f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008394:	f000 fc99 	bl	8008cca <USBD_GetEpDesc>
 8008398:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800839a:	2101      	movs	r1, #1
 800839c:	4815      	ldr	r0, [pc, #84]	; (80083f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800839e:	f000 fc94 	bl	8008cca <USBD_GetEpDesc>
 80083a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083a4:	2181      	movs	r1, #129	; 0x81
 80083a6:	4813      	ldr	r0, [pc, #76]	; (80083f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083a8:	f000 fc8f 	bl	8008cca <USBD_GetEpDesc>
 80083ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2210      	movs	r2, #16
 80083b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c8:	711a      	strb	r2, [r3, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083dc:	711a      	strb	r2, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2243      	movs	r2, #67	; 0x43
 80083e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000050 	.word	0x20000050

080083f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	220a      	movs	r2, #10
 8008404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2000000c 	.word	0x2000000c

08008418 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	e009      	b.n	8008440 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	33b0      	adds	r3, #176	; 0xb0
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	32b0      	adds	r2, #176	; 0xb0
 8008462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008466:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	e008      	b.n	8008484 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	32b0      	adds	r2, #176	; 0xb0
 80084a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e004      	b.n	80084be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	32b0      	adds	r2, #176	; 0xb0
 80084de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	32b0      	adds	r2, #176	; 0xb0
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e018      	b.n	800852c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008502:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <USBD_CDC_ReceivePacket+0x68>)
 8008504:	7819      	ldrb	r1, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800850c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 ffd1 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008516:	e008      	b.n	800852a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <USBD_CDC_ReceivePacket+0x68>)
 800851a:	7819      	ldrb	r1, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 ffc7 	bl	800a4b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000094 	.word	0x20000094

08008538 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800854c:	2303      	movs	r3, #3
 800854e:	e01f      	b.n	8008590 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	79fa      	ldrb	r2, [r7, #7]
 8008582:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f001 fe41 	bl	800a20c <USBD_LL_Init>
 800858a:	4603      	mov	r3, r0
 800858c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e025      	b.n	80085fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	32ae      	adds	r2, #174	; 0xae
 80085c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00f      	beq.n	80085ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32ae      	adds	r2, #174	; 0xae
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	f107 020e 	add.w	r2, r7, #14
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	4602      	mov	r2, r0
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fe49 	bl	800a2a4 <USBD_LL_Start>
 8008612:	4603      	mov	r3, r0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008624:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	4611      	mov	r1, r2
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 f932 	bl	800991a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d01a      	beq.n	8008710 <USBD_LL_SetupStage+0x72>
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d822      	bhi.n	8008724 <USBD_LL_SetupStage+0x86>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <USBD_LL_SetupStage+0x4a>
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d00a      	beq.n	80086fc <USBD_LL_SetupStage+0x5e>
 80086e6:	e01d      	b.n	8008724 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fb5f 	bl	8008db4 <USBD_StdDevReq>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
      break;
 80086fa:	e020      	b.n	800873e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fbc7 	bl	8008e98 <USBD_StdItfReq>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
      break;
 800870e:	e016      	b.n	800873e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc29 	bl	8008f70 <USBD_StdEPReq>
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
      break;
 8008722:	e00c      	b.n	800873e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800872a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800872e:	b2db      	uxtb	r3, r3
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fe16 	bl	800a364 <USBD_LL_StallEP>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
      break;
 800873c:	bf00      	nop
  }

  return ret;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	460b      	mov	r3, r1
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d16e      	bne.n	800883e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800876e:	2b03      	cmp	r3, #3
 8008770:	f040 8098 	bne.w	80088a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d913      	bls.n	80087a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4293      	cmp	r3, r2
 8008798:	bf28      	it	cs
 800879a:	4613      	movcs	r3, r2
 800879c:	461a      	mov	r2, r3
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f001 f9ae 	bl	8009b02 <USBD_CtlContinueRx>
 80087a6:	e07d      	b.n	80088a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d014      	beq.n	80087e0 <USBD_LL_DataOutStage+0x98>
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d81d      	bhi.n	80087f6 <USBD_LL_DataOutStage+0xae>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <USBD_LL_DataOutStage+0x7c>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d003      	beq.n	80087ca <USBD_LL_DataOutStage+0x82>
 80087c2:	e018      	b.n	80087f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75bb      	strb	r3, [r7, #22]
            break;
 80087c8:	e018      	b.n	80087fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fa5e 	bl	8008c96 <USBD_CoreFindIF>
 80087da:	4603      	mov	r3, r0
 80087dc:	75bb      	strb	r3, [r7, #22]
            break;
 80087de:	e00d      	b.n	80087fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 fa60 	bl	8008cb0 <USBD_CoreFindEP>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75bb      	strb	r3, [r7, #22]
            break;
 80087f4:	e002      	b.n	80087fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75bb      	strb	r3, [r7, #22]
            break;
 80087fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d119      	bne.n	8008836 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d113      	bne.n	8008836 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800880e:	7dba      	ldrb	r2, [r7, #22]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	32ae      	adds	r2, #174	; 0xae
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800881e:	7dba      	ldrb	r2, [r7, #22]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008826:	7dba      	ldrb	r2, [r7, #22]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	32ae      	adds	r2, #174	; 0xae
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f001 f974 	bl	8009b24 <USBD_CtlSendStatus>
 800883c:	e032      	b.n	80088a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008844:	b2db      	uxtb	r3, r3
 8008846:	4619      	mov	r1, r3
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fa31 	bl	8008cb0 <USBD_CoreFindEP>
 800884e:	4603      	mov	r3, r0
 8008850:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008852:	7dbb      	ldrb	r3, [r7, #22]
 8008854:	2bff      	cmp	r3, #255	; 0xff
 8008856:	d025      	beq.n	80088a4 <USBD_LL_DataOutStage+0x15c>
 8008858:	7dbb      	ldrb	r3, [r7, #22]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d122      	bne.n	80088a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b03      	cmp	r3, #3
 8008868:	d117      	bne.n	800889a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800886a:	7dba      	ldrb	r2, [r7, #22]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	32ae      	adds	r2, #174	; 0xae
 8008870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00f      	beq.n	800889a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800887a:	7dba      	ldrb	r2, [r7, #22]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008882:	7dba      	ldrb	r2, [r7, #22]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	32ae      	adds	r2, #174	; 0xae
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	7afa      	ldrb	r2, [r7, #11]
 8008890:	4611      	mov	r1, r2
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	4798      	blx	r3
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	e000      	b.n	80088a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	460b      	mov	r3, r1
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d16f      	bne.n	80089a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3314      	adds	r3, #20
 80088c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d15a      	bne.n	8008988 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d914      	bls.n	8008908 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	1ad2      	subs	r2, r2, r3
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f001 f8d6 	bl	8009aa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088fa:	2300      	movs	r3, #0
 80088fc:	2200      	movs	r2, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 fdd9 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008906:	e03f      	b.n	8008988 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	429a      	cmp	r2, r3
 8008912:	d11c      	bne.n	800894e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800891c:	429a      	cmp	r2, r3
 800891e:	d316      	bcc.n	800894e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800892a:	429a      	cmp	r2, r3
 800892c:	d20f      	bcs.n	800894e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f001 f8b7 	bl	8009aa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008940:	2300      	movs	r3, #0
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f001 fdb6 	bl	800a4b8 <USBD_LL_PrepareReceive>
 800894c:	e01c      	b.n	8008988 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b03      	cmp	r3, #3
 8008958:	d10f      	bne.n	800897a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d009      	beq.n	800897a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f001 fcf1 	bl	800a364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f8e1 	bl	8009b4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d03a      	beq.n	8008a08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7ff fe42 	bl	800861c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089a0:	e032      	b.n	8008a08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f97f 	bl	8008cb0 <USBD_CoreFindEP>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2bff      	cmp	r3, #255	; 0xff
 80089ba:	d025      	beq.n	8008a08 <USBD_LL_DataInStage+0x15a>
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d122      	bne.n	8008a08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d11c      	bne.n	8008a08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089ce:	7dfa      	ldrb	r2, [r7, #23]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	32ae      	adds	r2, #174	; 0xae
 80089d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d014      	beq.n	8008a08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089de:	7dfa      	ldrb	r2, [r7, #23]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089e6:	7dfa      	ldrb	r2, [r7, #23]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	32ae      	adds	r2, #174	; 0xae
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	7afa      	ldrb	r2, [r7, #11]
 80089f4:	4611      	mov	r1, r2
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089fe:	7dbb      	ldrb	r3, [r7, #22]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a04:	7dbb      	ldrb	r3, [r7, #22]
 8008a06:	e000      	b.n	8008a0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d014      	beq.n	8008a78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6852      	ldr	r2, [r2, #4]
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	4611      	mov	r1, r2
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fc2b 	bl	800a2da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2240      	movs	r2, #64	; 0x40
 8008a90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	2200      	movs	r2, #0
 8008a98:	2180      	movs	r1, #128	; 0x80
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fc1d 	bl	800a2da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2240      	movs	r2, #64	; 0x40
 8008aaa:	621a      	str	r2, [r3, #32]

  return ret;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2204      	movs	r2, #4
 8008af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d106      	bne.n	8008b24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d110      	bne.n	8008b68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	32ae      	adds	r2, #174	; 0xae
 8008b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e01c      	b.n	8008bce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d115      	bne.n	8008bcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32ae      	adds	r2, #174	; 0xae
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32ae      	adds	r2, #174	; 0xae
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	32ae      	adds	r2, #174	; 0xae
 8008bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e01c      	b.n	8008c32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d115      	bne.n	8008c30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32ae      	adds	r2, #174	; 0xae
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00b      	beq.n	8008c30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32ae      	adds	r2, #174	; 0xae
 8008c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6852      	ldr	r2, [r2, #4]
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ca2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	885b      	ldrh	r3, [r3, #2]
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d920      	bls.n	8008d34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cfa:	e013      	b.n	8008d24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008cfc:	f107 030a 	add.w	r3, r7, #10
 8008d00:	4619      	mov	r1, r3
 8008d02:	6978      	ldr	r0, [r7, #20]
 8008d04:	f000 f81b 	bl	8008d3e <USBD_GetNextDesc>
 8008d08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d108      	bne.n	8008d24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	789b      	ldrb	r3, [r3, #2]
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d008      	beq.n	8008d32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	885b      	ldrh	r3, [r3, #2]
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	897b      	ldrh	r3, [r7, #10]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d8e5      	bhi.n	8008cfc <USBD_GetEpDesc+0x32>
 8008d30:	e000      	b.n	8008d34 <USBD_GetEpDesc+0x6a>
          break;
 8008d32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d34:	693b      	ldr	r3, [r7, #16]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	881a      	ldrh	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4413      	add	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d96:	8a3b      	ldrh	r3, [r7, #16]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	b21a      	sxth	r2, r3
 8008d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008da6:	89fb      	ldrh	r3, [r7, #14]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d005      	beq.n	8008dda <USBD_StdDevReq+0x26>
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d857      	bhi.n	8008e82 <USBD_StdDevReq+0xce>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <USBD_StdDevReq+0x42>
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d153      	bne.n	8008e82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	32ae      	adds	r2, #174	; 0xae
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
      break;
 8008df4:	e04a      	b.n	8008e8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	2b09      	cmp	r3, #9
 8008dfc:	d83b      	bhi.n	8008e76 <USBD_StdDevReq+0xc2>
 8008dfe:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <USBD_StdDevReq+0x50>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e59 	.word	0x08008e59
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e77 	.word	0x08008e77
 8008e10:	08008e63 	.word	0x08008e63
 8008e14:	08008e77 	.word	0x08008e77
 8008e18:	08008e37 	.word	0x08008e37
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e77 	.word	0x08008e77
 8008e24:	08008e4f 	.word	0x08008e4f
 8008e28:	08008e41 	.word	0x08008e41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa3c 	bl	80092ac <USBD_GetDescriptor>
          break;
 8008e34:	e024      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fbcb 	bl	80095d4 <USBD_SetAddress>
          break;
 8008e3e:	e01f      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fc0a 	bl	800965c <USBD_SetConfig>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e4c:	e018      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fcad 	bl	80097b0 <USBD_GetConfig>
          break;
 8008e56:	e013      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fcde 	bl	800981c <USBD_GetStatus>
          break;
 8008e60:	e00e      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fd0d 	bl	8009884 <USBD_SetFeature>
          break;
 8008e6a:	e009      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fd31 	bl	80098d6 <USBD_ClrFeature>
          break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fd88 	bl	800998e <USBD_CtlError>
          break;
 8008e7e:	bf00      	nop
      }
      break;
 8008e80:	e004      	b.n	8008e8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fd82 	bl	800998e <USBD_CtlError>
      break;
 8008e8a:	bf00      	nop
  }

  return ret;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop

08008e98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d005      	beq.n	8008ebe <USBD_StdItfReq+0x26>
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d852      	bhi.n	8008f5c <USBD_StdItfReq+0xc4>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <USBD_StdItfReq+0x26>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d14e      	bne.n	8008f5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d840      	bhi.n	8008f4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	889b      	ldrh	r3, [r3, #4]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d836      	bhi.n	8008f44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	889b      	ldrh	r3, [r3, #4]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff fed9 	bl	8008c96 <USBD_CoreFindIF>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d01d      	beq.n	8008f2a <USBD_StdItfReq+0x92>
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d11a      	bne.n	8008f2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef4:	7bba      	ldrb	r2, [r7, #14]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	32ae      	adds	r2, #174	; 0xae
 8008efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00f      	beq.n	8008f24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f04:	7bba      	ldrb	r2, [r7, #14]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f0c:	7bba      	ldrb	r2, [r7, #14]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32ae      	adds	r2, #174	; 0xae
 8008f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f22:	e004      	b.n	8008f2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f28:	e001      	b.n	8008f2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	88db      	ldrh	r3, [r3, #6]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d110      	bne.n	8008f58 <USBD_StdItfReq+0xc0>
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fdf1 	bl	8009b24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f42:	e009      	b.n	8008f58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd21 	bl	800998e <USBD_CtlError>
          break;
 8008f4c:	e004      	b.n	8008f58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fd1c 	bl	800998e <USBD_CtlError>
          break;
 8008f56:	e000      	b.n	8008f5a <USBD_StdItfReq+0xc2>
          break;
 8008f58:	bf00      	nop
      }
      break;
 8008f5a:	e004      	b.n	8008f66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fd15 	bl	800998e <USBD_CtlError>
      break;
 8008f64:	bf00      	nop
  }

  return ret;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	889b      	ldrh	r3, [r3, #4]
 8008f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f8c:	2b40      	cmp	r3, #64	; 0x40
 8008f8e:	d007      	beq.n	8008fa0 <USBD_StdEPReq+0x30>
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	f200 817f 	bhi.w	8009294 <USBD_StdEPReq+0x324>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d02a      	beq.n	8008ff0 <USBD_StdEPReq+0x80>
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	f040 817a 	bne.w	8009294 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fe83 	bl	8008cb0 <USBD_CoreFindEP>
 8008faa:	4603      	mov	r3, r0
 8008fac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fae:	7b7b      	ldrb	r3, [r7, #13]
 8008fb0:	2bff      	cmp	r3, #255	; 0xff
 8008fb2:	f000 8174 	beq.w	800929e <USBD_StdEPReq+0x32e>
 8008fb6:	7b7b      	ldrb	r3, [r7, #13]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 8170 	bne.w	800929e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fbe:	7b7a      	ldrb	r2, [r7, #13]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fc6:	7b7a      	ldrb	r2, [r7, #13]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	32ae      	adds	r2, #174	; 0xae
 8008fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 8163 	beq.w	800929e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fd8:	7b7a      	ldrb	r2, [r7, #13]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32ae      	adds	r2, #174	; 0xae
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fee:	e156      	b.n	800929e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	785b      	ldrb	r3, [r3, #1]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d008      	beq.n	800900a <USBD_StdEPReq+0x9a>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	f300 8145 	bgt.w	8009288 <USBD_StdEPReq+0x318>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 809b 	beq.w	800913a <USBD_StdEPReq+0x1ca>
 8009004:	2b01      	cmp	r3, #1
 8009006:	d03c      	beq.n	8009082 <USBD_StdEPReq+0x112>
 8009008:	e13e      	b.n	8009288 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d002      	beq.n	800901c <USBD_StdEPReq+0xac>
 8009016:	2b03      	cmp	r3, #3
 8009018:	d016      	beq.n	8009048 <USBD_StdEPReq+0xd8>
 800901a:	e02c      	b.n	8009076 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00d      	beq.n	800903e <USBD_StdEPReq+0xce>
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b80      	cmp	r3, #128	; 0x80
 8009026:	d00a      	beq.n	800903e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f999 	bl	800a364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009032:	2180      	movs	r1, #128	; 0x80
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 f995 	bl	800a364 <USBD_LL_StallEP>
 800903a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800903c:	e020      	b.n	8009080 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fca4 	bl	800998e <USBD_CtlError>
              break;
 8009046:	e01b      	b.n	8009080 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	885b      	ldrh	r3, [r3, #2]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10e      	bne.n	800906e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <USBD_StdEPReq+0xfe>
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b80      	cmp	r3, #128	; 0x80
 800905a:	d008      	beq.n	800906e <USBD_StdEPReq+0xfe>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	88db      	ldrh	r3, [r3, #6]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 f97b 	bl	800a364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fd58 	bl	8009b24 <USBD_CtlSendStatus>

              break;
 8009074:	e004      	b.n	8009080 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc88 	bl	800998e <USBD_CtlError>
              break;
 800907e:	bf00      	nop
          }
          break;
 8009080:	e107      	b.n	8009292 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d002      	beq.n	8009094 <USBD_StdEPReq+0x124>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d016      	beq.n	80090c0 <USBD_StdEPReq+0x150>
 8009092:	e04b      	b.n	800912c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00d      	beq.n	80090b6 <USBD_StdEPReq+0x146>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	d00a      	beq.n	80090b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f95d 	bl	800a364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090aa:	2180      	movs	r1, #128	; 0x80
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f959 	bl	800a364 <USBD_LL_StallEP>
 80090b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090b4:	e040      	b.n	8009138 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fc68 	bl	800998e <USBD_CtlError>
              break;
 80090be:	e03b      	b.n	8009138 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d136      	bne.n	8009136 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 f963 	bl	800a3a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fd21 	bl	8009b24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fde2 	bl	8008cb0 <USBD_CoreFindEP>
 80090ec:	4603      	mov	r3, r0
 80090ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090f0:	7b7b      	ldrb	r3, [r7, #13]
 80090f2:	2bff      	cmp	r3, #255	; 0xff
 80090f4:	d01f      	beq.n	8009136 <USBD_StdEPReq+0x1c6>
 80090f6:	7b7b      	ldrb	r3, [r7, #13]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11c      	bne.n	8009136 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090fc:	7b7a      	ldrb	r2, [r7, #13]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009104:	7b7a      	ldrb	r2, [r7, #13]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32ae      	adds	r2, #174	; 0xae
 800910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d010      	beq.n	8009136 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009114:	7b7a      	ldrb	r2, [r7, #13]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32ae      	adds	r2, #174	; 0xae
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800912a:	e004      	b.n	8009136 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fc2d 	bl	800998e <USBD_CtlError>
              break;
 8009134:	e000      	b.n	8009138 <USBD_StdEPReq+0x1c8>
              break;
 8009136:	bf00      	nop
          }
          break;
 8009138:	e0ab      	b.n	8009292 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d002      	beq.n	800914c <USBD_StdEPReq+0x1dc>
 8009146:	2b03      	cmp	r3, #3
 8009148:	d032      	beq.n	80091b0 <USBD_StdEPReq+0x240>
 800914a:	e097      	b.n	800927c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <USBD_StdEPReq+0x1f2>
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b80      	cmp	r3, #128	; 0x80
 8009156:	d004      	beq.n	8009162 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc17 	bl	800998e <USBD_CtlError>
                break;
 8009160:	e091      	b.n	8009286 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	da0b      	bge.n	8009182 <USBD_StdEPReq+0x212>
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	3310      	adds	r3, #16
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	3304      	adds	r3, #4
 8009180:	e00b      	b.n	800919a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2202      	movs	r2, #2
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fc61 	bl	8009a70 <USBD_CtlSendData>
              break;
 80091ae:	e06a      	b.n	8009286 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	da11      	bge.n	80091dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	f003 020f 	and.w	r2, r3, #15
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	3324      	adds	r3, #36	; 0x24
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d117      	bne.n	8009202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fbda 	bl	800998e <USBD_CtlError>
                  break;
 80091da:	e054      	b.n	8009286 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	f003 020f 	and.w	r2, r3, #15
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fbc7 	bl	800998e <USBD_CtlError>
                  break;
 8009200:	e041      	b.n	8009286 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009206:	2b00      	cmp	r3, #0
 8009208:	da0b      	bge.n	8009222 <USBD_StdEPReq+0x2b2>
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	3310      	adds	r3, #16
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	3304      	adds	r3, #4
 8009220:	e00b      	b.n	800923a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4413      	add	r3, r2
 8009238:	3304      	adds	r3, #4
 800923a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <USBD_StdEPReq+0x2d8>
 8009242:	7bbb      	ldrb	r3, [r7, #14]
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d103      	bne.n	8009250 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e00e      	b.n	800926e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f8c3 	bl	800a3e0 <USBD_LL_IsStallEP>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2201      	movs	r2, #1
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	e002      	b.n	800926e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2202      	movs	r2, #2
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fbfb 	bl	8009a70 <USBD_CtlSendData>
              break;
 800927a:	e004      	b.n	8009286 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fb85 	bl	800998e <USBD_CtlError>
              break;
 8009284:	bf00      	nop
          }
          break;
 8009286:	e004      	b.n	8009292 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fb7f 	bl	800998e <USBD_CtlError>
          break;
 8009290:	bf00      	nop
      }
      break;
 8009292:	e005      	b.n	80092a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fb79 	bl	800998e <USBD_CtlError>
      break;
 800929c:	e000      	b.n	80092a0 <USBD_StdEPReq+0x330>
      break;
 800929e:	bf00      	nop
  }

  return ret;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	885b      	ldrh	r3, [r3, #2]
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b0e      	cmp	r3, #14
 80092ce:	f200 8152 	bhi.w	8009576 <USBD_GetDescriptor+0x2ca>
 80092d2:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <USBD_GetDescriptor+0x2c>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	08009349 	.word	0x08009349
 80092dc:	08009361 	.word	0x08009361
 80092e0:	080093a1 	.word	0x080093a1
 80092e4:	08009577 	.word	0x08009577
 80092e8:	08009577 	.word	0x08009577
 80092ec:	08009517 	.word	0x08009517
 80092f0:	08009543 	.word	0x08009543
 80092f4:	08009577 	.word	0x08009577
 80092f8:	08009577 	.word	0x08009577
 80092fc:	08009577 	.word	0x08009577
 8009300:	08009577 	.word	0x08009577
 8009304:	08009577 	.word	0x08009577
 8009308:	08009577 	.word	0x08009577
 800930c:	08009577 	.word	0x08009577
 8009310:	08009315 	.word	0x08009315
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7c12      	ldrb	r2, [r2, #16]
 800932c:	f107 0108 	add.w	r1, r7, #8
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
 8009334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009336:	e126      	b.n	8009586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fb27 	bl	800998e <USBD_CtlError>
        err++;
 8009340:	7afb      	ldrb	r3, [r7, #11]
 8009342:	3301      	adds	r3, #1
 8009344:	72fb      	strb	r3, [r7, #11]
      break;
 8009346:	e11e      	b.n	8009586 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
      break;
 800935e:	e112      	b.n	8009586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7c1b      	ldrb	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	f107 0208 	add.w	r2, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	2202      	movs	r2, #2
 8009380:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009382:	e100      	b.n	8009586 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	f107 0208 	add.w	r2, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	2202      	movs	r2, #2
 800939c:	701a      	strb	r2, [r3, #0]
      break;
 800939e:	e0f2      	b.n	8009586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	885b      	ldrh	r3, [r3, #2]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	f200 80ac 	bhi.w	8009504 <USBD_GetDescriptor+0x258>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <USBD_GetDescriptor+0x108>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	08009401 	.word	0x08009401
 80093bc:	08009435 	.word	0x08009435
 80093c0:	08009469 	.word	0x08009469
 80093c4:	0800949d 	.word	0x0800949d
 80093c8:	080094d1 	.word	0x080094d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	f107 0108 	add.w	r1, r7, #8
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ee:	e091      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 facb 	bl	800998e <USBD_CtlError>
            err++;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3301      	adds	r3, #1
 80093fc:	72fb      	strb	r3, [r7, #11]
          break;
 80093fe:	e089      	b.n	8009514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	7c12      	ldrb	r2, [r2, #16]
 8009418:	f107 0108 	add.w	r1, r7, #8
 800941c:	4610      	mov	r0, r2
 800941e:	4798      	blx	r3
 8009420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009422:	e077      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fab1 	bl	800998e <USBD_CtlError>
            err++;
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	3301      	adds	r3, #1
 8009430:	72fb      	strb	r3, [r7, #11]
          break;
 8009432:	e06f      	b.n	8009514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	7c12      	ldrb	r2, [r2, #16]
 800944c:	f107 0108 	add.w	r1, r7, #8
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
 8009454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009456:	e05d      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa97 	bl	800998e <USBD_CtlError>
            err++;
 8009460:	7afb      	ldrb	r3, [r7, #11]
 8009462:	3301      	adds	r3, #1
 8009464:	72fb      	strb	r3, [r7, #11]
          break;
 8009466:	e055      	b.n	8009514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	7c12      	ldrb	r2, [r2, #16]
 8009480:	f107 0108 	add.w	r1, r7, #8
 8009484:	4610      	mov	r0, r2
 8009486:	4798      	blx	r3
 8009488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800948a:	e043      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fa7d 	bl	800998e <USBD_CtlError>
            err++;
 8009494:	7afb      	ldrb	r3, [r7, #11]
 8009496:	3301      	adds	r3, #1
 8009498:	72fb      	strb	r3, [r7, #11]
          break;
 800949a:	e03b      	b.n	8009514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	7c12      	ldrb	r2, [r2, #16]
 80094b4:	f107 0108 	add.w	r1, r7, #8
 80094b8:	4610      	mov	r0, r2
 80094ba:	4798      	blx	r3
 80094bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094be:	e029      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa63 	bl	800998e <USBD_CtlError>
            err++;
 80094c8:	7afb      	ldrb	r3, [r7, #11]
 80094ca:	3301      	adds	r3, #1
 80094cc:	72fb      	strb	r3, [r7, #11]
          break;
 80094ce:	e021      	b.n	8009514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7c12      	ldrb	r2, [r2, #16]
 80094e8:	f107 0108 	add.w	r1, r7, #8
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094f2:	e00f      	b.n	8009514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa49 	bl	800998e <USBD_CtlError>
            err++;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	3301      	adds	r3, #1
 8009500:	72fb      	strb	r3, [r7, #11]
          break;
 8009502:	e007      	b.n	8009514 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa41 	bl	800998e <USBD_CtlError>
          err++;
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	3301      	adds	r3, #1
 8009510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009512:	bf00      	nop
      }
      break;
 8009514:	e037      	b.n	8009586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7c1b      	ldrb	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009526:	f107 0208 	add.w	r2, r7, #8
 800952a:	4610      	mov	r0, r2
 800952c:	4798      	blx	r3
 800952e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009530:	e029      	b.n	8009586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fa2a 	bl	800998e <USBD_CtlError>
        err++;
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	3301      	adds	r3, #1
 800953e:	72fb      	strb	r3, [r7, #11]
      break;
 8009540:	e021      	b.n	8009586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	7c1b      	ldrb	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10d      	bne.n	8009566 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f107 0208 	add.w	r2, r7, #8
 8009556:	4610      	mov	r0, r2
 8009558:	4798      	blx	r3
 800955a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	2207      	movs	r2, #7
 8009562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009564:	e00f      	b.n	8009586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fa10 	bl	800998e <USBD_CtlError>
        err++;
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	3301      	adds	r3, #1
 8009572:	72fb      	strb	r3, [r7, #11]
      break;
 8009574:	e007      	b.n	8009586 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa08 	bl	800998e <USBD_CtlError>
      err++;
 800957e:	7afb      	ldrb	r3, [r7, #11]
 8009580:	3301      	adds	r3, #1
 8009582:	72fb      	strb	r3, [r7, #11]
      break;
 8009584:	bf00      	nop
  }

  if (err != 0U)
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d11e      	bne.n	80095ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	88db      	ldrh	r3, [r3, #6]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d016      	beq.n	80095c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009594:	893b      	ldrh	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00e      	beq.n	80095b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	88da      	ldrh	r2, [r3, #6]
 800959e:	893b      	ldrh	r3, [r7, #8]
 80095a0:	4293      	cmp	r3, r2
 80095a2:	bf28      	it	cs
 80095a4:	4613      	movcs	r3, r2
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095aa:	893b      	ldrh	r3, [r7, #8]
 80095ac:	461a      	mov	r2, r3
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fa5d 	bl	8009a70 <USBD_CtlSendData>
 80095b6:	e009      	b.n	80095cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f9e7 	bl	800998e <USBD_CtlError>
 80095c0:	e004      	b.n	80095cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 faae 	bl	8009b24 <USBD_CtlSendStatus>
 80095c8:	e000      	b.n	80095cc <USBD_GetDescriptor+0x320>
    return;
 80095ca:	bf00      	nop
  }
}
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop

080095d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	889b      	ldrh	r3, [r3, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d131      	bne.n	800964a <USBD_SetAddress+0x76>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	88db      	ldrh	r3, [r3, #6]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d12d      	bne.n	800964a <USBD_SetAddress+0x76>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	2b7f      	cmp	r3, #127	; 0x7f
 80095f4:	d829      	bhi.n	800964a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b03      	cmp	r3, #3
 800960c:	d104      	bne.n	8009618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f9bc 	bl	800998e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009616:	e01d      	b.n	8009654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7bfa      	ldrb	r2, [r7, #15]
 800961c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 ff07 	bl	800a438 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa7a 	bl	8009b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	e009      	b.n	8009654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009648:	e004      	b.n	8009654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f99e 	bl	800998e <USBD_CtlError>
  }
}
 8009652:	bf00      	nop
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	885b      	ldrh	r3, [r3, #2]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	4b4e      	ldr	r3, [pc, #312]	; (80097ac <USBD_SetConfig+0x150>)
 8009672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009674:	4b4d      	ldr	r3, [pc, #308]	; (80097ac <USBD_SetConfig+0x150>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d905      	bls.n	8009688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f985 	bl	800998e <USBD_CtlError>
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e08c      	b.n	80097a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d002      	beq.n	800969a <USBD_SetConfig+0x3e>
 8009694:	2b03      	cmp	r3, #3
 8009696:	d029      	beq.n	80096ec <USBD_SetConfig+0x90>
 8009698:	e075      	b.n	8009786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800969a:	4b44      	ldr	r3, [pc, #272]	; (80097ac <USBD_SetConfig+0x150>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d020      	beq.n	80096e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096a2:	4b42      	ldr	r3, [pc, #264]	; (80097ac <USBD_SetConfig+0x150>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096ac:	4b3f      	ldr	r3, [pc, #252]	; (80097ac <USBD_SetConfig+0x150>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fe ffbd 	bl	8008632 <USBD_SetClassConfig>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d008      	beq.n	80096d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f962 	bl	800998e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096d2:	e065      	b.n	80097a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fa25 	bl	8009b24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2203      	movs	r2, #3
 80096de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096e2:	e05d      	b.n	80097a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fa1d 	bl	8009b24 <USBD_CtlSendStatus>
      break;
 80096ea:	e059      	b.n	80097a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096ec:	4b2f      	ldr	r3, [pc, #188]	; (80097ac <USBD_SetConfig+0x150>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d112      	bne.n	800971a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096fc:	4b2b      	ldr	r3, [pc, #172]	; (80097ac <USBD_SetConfig+0x150>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <USBD_SetConfig+0x150>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fe ffac 	bl	800866a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa06 	bl	8009b24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009718:	e042      	b.n	80097a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <USBD_SetConfig+0x150>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d02a      	beq.n	800977e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7fe ff9a 	bl	800866a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009736:	4b1d      	ldr	r3, [pc, #116]	; (80097ac <USBD_SetConfig+0x150>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009740:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <USBD_SetConfig+0x150>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fe ff73 	bl	8008632 <USBD_SetClassConfig>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00f      	beq.n	8009776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f918 	bl	800998e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fe ff7f 	bl	800866a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009774:	e014      	b.n	80097a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f9d4 	bl	8009b24 <USBD_CtlSendStatus>
      break;
 800977c:	e010      	b.n	80097a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f9d0 	bl	8009b24 <USBD_CtlSendStatus>
      break;
 8009784:	e00c      	b.n	80097a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f900 	bl	800998e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800978e:	4b07      	ldr	r3, [pc, #28]	; (80097ac <USBD_SetConfig+0x150>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7fe ff68 	bl	800866a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800979a:	2303      	movs	r3, #3
 800979c:	73fb      	strb	r3, [r7, #15]
      break;
 800979e:	bf00      	nop
  }

  return ret;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200003a0 	.word	0x200003a0

080097b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d004      	beq.n	80097cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f8e2 	bl	800998e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097ca:	e023      	b.n	8009814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	dc02      	bgt.n	80097de <USBD_GetConfig+0x2e>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	dc03      	bgt.n	80097e4 <USBD_GetConfig+0x34>
 80097dc:	e015      	b.n	800980a <USBD_GetConfig+0x5a>
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d00b      	beq.n	80097fa <USBD_GetConfig+0x4a>
 80097e2:	e012      	b.n	800980a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3308      	adds	r3, #8
 80097ee:	2201      	movs	r2, #1
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f93c 	bl	8009a70 <USBD_CtlSendData>
        break;
 80097f8:	e00c      	b.n	8009814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3304      	adds	r3, #4
 80097fe:	2201      	movs	r2, #1
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f934 	bl	8009a70 <USBD_CtlSendData>
        break;
 8009808:	e004      	b.n	8009814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f8be 	bl	800998e <USBD_CtlError>
        break;
 8009812:	bf00      	nop
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	2b02      	cmp	r3, #2
 8009832:	d81e      	bhi.n	8009872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	88db      	ldrh	r3, [r3, #6]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d004      	beq.n	8009846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f8a5 	bl	800998e <USBD_CtlError>
        break;
 8009844:	e01a      	b.n	800987c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f043 0202 	orr.w	r2, r3, #2
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	330c      	adds	r3, #12
 8009866:	2202      	movs	r2, #2
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f900 	bl	8009a70 <USBD_CtlSendData>
      break;
 8009870:	e004      	b.n	800987c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f88a 	bl	800998e <USBD_CtlError>
      break;
 800987a:	bf00      	nop
  }
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d107      	bne.n	80098a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f940 	bl	8009b24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098a4:	e013      	b.n	80098ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d10b      	bne.n	80098c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	889b      	ldrh	r3, [r3, #4]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f930 	bl	8009b24 <USBD_CtlSendStatus>
}
 80098c4:	e003      	b.n	80098ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f860 	bl	800998e <USBD_CtlError>
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d80b      	bhi.n	8009906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	885b      	ldrh	r3, [r3, #2]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10c      	bne.n	8009910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f910 	bl	8009b24 <USBD_CtlSendStatus>
      }
      break;
 8009904:	e004      	b.n	8009910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f840 	bl	800998e <USBD_CtlError>
      break;
 800990e:	e000      	b.n	8009912 <USBD_ClrFeature+0x3c>
      break;
 8009910:	bf00      	nop
  }
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	781a      	ldrb	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff fa17 	bl	8008d78 <SWAPBYTE>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fa0a 	bl	8008d78 <SWAPBYTE>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3301      	adds	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3301      	adds	r3, #1
 8009976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff f9fd 	bl	8008d78 <SWAPBYTE>
 800997e:	4603      	mov	r3, r0
 8009980:	461a      	mov	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	80da      	strh	r2, [r3, #6]
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009998:	2180      	movs	r1, #128	; 0x80
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fce2 	bl	800a364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099a0:	2100      	movs	r1, #0
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fcde 	bl	800a364 <USBD_LL_StallEP>
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d036      	beq.n	8009a34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f836 	bl	8009a3c <USBD_GetLen>
 80099d0:	4603      	mov	r3, r0
 80099d2:	3301      	adds	r3, #1
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	4413      	add	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	3301      	adds	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	4413      	add	r3, r2
 80099f6:	2203      	movs	r2, #3
 80099f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	3301      	adds	r3, #1
 80099fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a00:	e013      	b.n	8009a2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	4413      	add	r3, r2
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3301      	adds	r3, #1
 8009a12:	613b      	str	r3, [r7, #16]
    idx++;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
 8009a16:	3301      	adds	r3, #1
 8009a18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	4413      	add	r3, r2
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	3301      	adds	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e7      	bne.n	8009a02 <USBD_GetString+0x52>
 8009a32:	e000      	b.n	8009a36 <USBD_GetString+0x86>
    return;
 8009a34:	bf00      	nop
  }
}
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a4c:	e005      	b.n	8009a5a <USBD_GetLen+0x1e>
  {
    len++;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	3301      	adds	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1f5      	bne.n	8009a4e <USBD_GetLen+0x12>
  }

  return len;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	2100      	movs	r1, #0
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fced 	bl	800a476 <USBD_LL_Transmit>

  return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fcdc 	bl	800a476 <USBD_LL_Transmit>

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	2100      	movs	r1, #0
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fce0 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	2100      	movs	r1, #0
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fccf 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2204      	movs	r2, #4
 8009b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b34:	2300      	movs	r3, #0
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc9b 	bl	800a476 <USBD_LL_Transmit>

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2205      	movs	r2, #5
 8009b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fca9 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4912      	ldr	r1, [pc, #72]	; (8009bc0 <MX_USB_DEVICE_Init+0x50>)
 8009b78:	4812      	ldr	r0, [pc, #72]	; (8009bc4 <MX_USB_DEVICE_Init+0x54>)
 8009b7a:	f7fe fcdd 	bl	8008538 <USBD_Init>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b84:	f7f7 f976 	bl	8000e74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b88:	490f      	ldr	r1, [pc, #60]	; (8009bc8 <MX_USB_DEVICE_Init+0x58>)
 8009b8a:	480e      	ldr	r0, [pc, #56]	; (8009bc4 <MX_USB_DEVICE_Init+0x54>)
 8009b8c:	f7fe fd04 	bl	8008598 <USBD_RegisterClass>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b96:	f7f7 f96d 	bl	8000e74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b9a:	490c      	ldr	r1, [pc, #48]	; (8009bcc <MX_USB_DEVICE_Init+0x5c>)
 8009b9c:	4809      	ldr	r0, [pc, #36]	; (8009bc4 <MX_USB_DEVICE_Init+0x54>)
 8009b9e:	f7fe fc3b 	bl	8008418 <USBD_CDC_RegisterInterface>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ba8:	f7f7 f964 	bl	8000e74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bac:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <MX_USB_DEVICE_Init+0x54>)
 8009bae:	f7fe fd29 	bl	8008604 <USBD_Start>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bb8:	f7f7 f95c 	bl	8000e74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bbc:	bf00      	nop
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	200000ac 	.word	0x200000ac
 8009bc4:	200003a4 	.word	0x200003a4
 8009bc8:	20000018 	.word	0x20000018
 8009bcc:	20000098 	.word	0x20000098

08009bd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4905      	ldr	r1, [pc, #20]	; (8009bec <CDC_Init_FS+0x1c>)
 8009bd8:	4805      	ldr	r0, [pc, #20]	; (8009bf0 <CDC_Init_FS+0x20>)
 8009bda:	f7fe fc37 	bl	800844c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bde:	4905      	ldr	r1, [pc, #20]	; (8009bf4 <CDC_Init_FS+0x24>)
 8009be0:	4803      	ldr	r0, [pc, #12]	; (8009bf0 <CDC_Init_FS+0x20>)
 8009be2:	f7fe fc55 	bl	8008490 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009be6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000e80 	.word	0x20000e80
 8009bf0:	200003a4 	.word	0x200003a4
 8009bf4:	20000680 	.word	0x20000680

08009bf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	2b23      	cmp	r3, #35	; 0x23
 8009c1c:	d84a      	bhi.n	8009cb4 <CDC_Control_FS+0xac>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <CDC_Control_FS+0x1c>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009cb5 	.word	0x08009cb5
 8009c28:	08009cb5 	.word	0x08009cb5
 8009c2c:	08009cb5 	.word	0x08009cb5
 8009c30:	08009cb5 	.word	0x08009cb5
 8009c34:	08009cb5 	.word	0x08009cb5
 8009c38:	08009cb5 	.word	0x08009cb5
 8009c3c:	08009cb5 	.word	0x08009cb5
 8009c40:	08009cb5 	.word	0x08009cb5
 8009c44:	08009cb5 	.word	0x08009cb5
 8009c48:	08009cb5 	.word	0x08009cb5
 8009c4c:	08009cb5 	.word	0x08009cb5
 8009c50:	08009cb5 	.word	0x08009cb5
 8009c54:	08009cb5 	.word	0x08009cb5
 8009c58:	08009cb5 	.word	0x08009cb5
 8009c5c:	08009cb5 	.word	0x08009cb5
 8009c60:	08009cb5 	.word	0x08009cb5
 8009c64:	08009cb5 	.word	0x08009cb5
 8009c68:	08009cb5 	.word	0x08009cb5
 8009c6c:	08009cb5 	.word	0x08009cb5
 8009c70:	08009cb5 	.word	0x08009cb5
 8009c74:	08009cb5 	.word	0x08009cb5
 8009c78:	08009cb5 	.word	0x08009cb5
 8009c7c:	08009cb5 	.word	0x08009cb5
 8009c80:	08009cb5 	.word	0x08009cb5
 8009c84:	08009cb5 	.word	0x08009cb5
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cb5 	.word	0x08009cb5
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cb5 	.word	0x08009cb5
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cb5 	.word	0x08009cb5
 8009cac:	08009cb5 	.word	0x08009cb5
 8009cb0:	08009cb5 	.word	0x08009cb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cb4:	bf00      	nop
  }

  return (USBD_OK);
 8009cb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <CDC_Receive_FS+0x24>)
 8009cd2:	f7fe fbdd 	bl	8008490 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cd6:	4804      	ldr	r0, [pc, #16]	; (8009ce8 <CDC_Receive_FS+0x24>)
 8009cd8:	f7fe fbf8 	bl	80084cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009cdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200003a4 	.word	0x200003a4

08009cec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2212      	movs	r2, #18
 8009d20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d22:	4b03      	ldr	r3, [pc, #12]	; (8009d30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	200000cc 	.word	0x200000cc

08009d34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2204      	movs	r2, #4
 8009d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d46:	4b03      	ldr	r3, [pc, #12]	; (8009d54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	200000ec 	.word	0x200000ec

08009d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4907      	ldr	r1, [pc, #28]	; (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d6e:	4808      	ldr	r0, [pc, #32]	; (8009d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d70:	f7ff fe1e 	bl	80099b0 <USBD_GetString>
 8009d74:	e004      	b.n	8009d80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d7c:	f7ff fe18 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20001680 	.word	0x20001680
 8009d90:	0800a6b4 	.word	0x0800a6b4

08009d94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	4904      	ldr	r1, [pc, #16]	; (8009db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009da4:	4804      	ldr	r0, [pc, #16]	; (8009db8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009da6:	f7ff fe03 	bl	80099b0 <USBD_GetString>
  return USBD_StrDesc;
 8009daa:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20001680 	.word	0x20001680
 8009db8:	0800a6cc 	.word	0x0800a6cc

08009dbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	221a      	movs	r2, #26
 8009dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dce:	f000 f855 	bl	8009e7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dd2:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200000f0 	.word	0x200000f0

08009de0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4907      	ldr	r1, [pc, #28]	; (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009df6:	4808      	ldr	r0, [pc, #32]	; (8009e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009df8:	f7ff fdda 	bl	80099b0 <USBD_GetString>
 8009dfc:	e004      	b.n	8009e08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4904      	ldr	r1, [pc, #16]	; (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e02:	4805      	ldr	r0, [pc, #20]	; (8009e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e04:	f7ff fdd4 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001680 	.word	0x20001680
 8009e18:	0800a6e0 	.word	0x0800a6e0

08009e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	; (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e34:	f7ff fdbc 	bl	80099b0 <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	; (8009e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e40:	f7ff fdb6 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20001680 	.word	0x20001680
 8009e54:	0800a6ec 	.word	0x0800a6ec

08009e58 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	220c      	movs	r2, #12
 8009e68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e6a:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	200000e0 	.word	0x200000e0

08009e7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <Get_SerialNum+0x44>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e88:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <Get_SerialNum+0x48>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <Get_SerialNum+0x4c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ea2:	2208      	movs	r2, #8
 8009ea4:	4909      	ldr	r1, [pc, #36]	; (8009ecc <Get_SerialNum+0x50>)
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 f814 	bl	8009ed4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009eac:	2204      	movs	r2, #4
 8009eae:	4908      	ldr	r1, [pc, #32]	; (8009ed0 <Get_SerialNum+0x54>)
 8009eb0:	68b8      	ldr	r0, [r7, #8]
 8009eb2:	f000 f80f 	bl	8009ed4 <IntToUnicode>
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	1fff7a10 	.word	0x1fff7a10
 8009ec4:	1fff7a14 	.word	0x1fff7a14
 8009ec8:	1fff7a18 	.word	0x1fff7a18
 8009ecc:	200000f2 	.word	0x200000f2
 8009ed0:	20000102 	.word	0x20000102

08009ed4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]
 8009eea:	e027      	b.n	8009f3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	0f1b      	lsrs	r3, r3, #28
 8009ef0:	2b09      	cmp	r3, #9
 8009ef2:	d80b      	bhi.n	8009f0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	0f1b      	lsrs	r3, r3, #28
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	4619      	mov	r1, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	440b      	add	r3, r1
 8009f04:	3230      	adds	r2, #48	; 0x30
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e00a      	b.n	8009f22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	0f1b      	lsrs	r3, r3, #28
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4619      	mov	r1, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3237      	adds	r2, #55	; 0x37
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	4413      	add	r3, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	75fb      	strb	r3, [r7, #23]
 8009f3c:	7dfa      	ldrb	r2, [r7, #23]
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d3d3      	bcc.n	8009eec <IntToUnicode+0x18>
  }
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
	...

08009f54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b0a0      	sub	sp, #128	; 0x80
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	609a      	str	r2, [r3, #8]
 8009f68:	60da      	str	r2, [r3, #12]
 8009f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f6c:	f107 0310 	add.w	r3, r7, #16
 8009f70:	225c      	movs	r2, #92	; 0x5c
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fb89 	bl	800a68c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f82:	d149      	bne.n	800a018 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f8e:	f107 0310 	add.w	r3, r7, #16
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7f9 fc68 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009f9e:	f7f6 ff69 	bl	8000e74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	4b1e      	ldr	r3, [pc, #120]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009faa:	4a1d      	ldr	r2, [pc, #116]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fb2:	4b1b      	ldr	r3, [pc, #108]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009fbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fd0:	230a      	movs	r3, #10
 8009fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4812      	ldr	r0, [pc, #72]	; (800a024 <HAL_PCD_MspInit+0xd0>)
 8009fdc:	f7f7 feb4 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe4:	4a0e      	ldr	r2, [pc, #56]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	6353      	str	r3, [r2, #52]	; 0x34
 8009fec:	2300      	movs	r3, #0
 8009fee:	60bb      	str	r3, [r7, #8]
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff4:	4a0a      	ldr	r2, [pc, #40]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8009ffc:	4b08      	ldr	r3, [pc, #32]	; (800a020 <HAL_PCD_MspInit+0xcc>)
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	2043      	movs	r0, #67	; 0x43
 800a00e:	f7f7 fe42 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a012:	2043      	movs	r0, #67	; 0x43
 800a014:	f7f7 fe5b 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a018:	bf00      	nop
 800a01a:	3780      	adds	r7, #128	; 0x80
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40023800 	.word	0x40023800
 800a024:	40020000 	.word	0x40020000

0800a028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a03c:	4619      	mov	r1, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	f7fe fb2d 	bl	800869e <USBD_LL_SetupStage>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	4619      	mov	r1, r3
 800a076:	f7fe fb67 	bl	8008748 <USBD_LL_DataOutStage>
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	4613      	mov	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	334c      	adds	r3, #76	; 0x4c
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f7fe fc00 	bl	80088ae <USBD_LL_DataInStage>
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fd34 	bl	8008b32 <USBD_LL_SOF>
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]
 800a0ea:	e008      	b.n	800a0fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d102      	bne.n	800a0fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	e001      	b.n	800a0fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0fa:	f7f6 febb 	bl	8000e74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fcd4 	bl	8008ab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe fc7c 	bl	8008a12 <USBD_LL_Reset>
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fccf 	bl	8008ad6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <HAL_PCD_SuspendCallback+0x48>)
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	4a03      	ldr	r2, [pc, #12]	; (800a16c <HAL_PCD_SuspendCallback+0x48>)
 800a15e:	f043 0306 	orr.w	r3, r3, #6
 800a162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	e000ed00 	.word	0xe000ed00

0800a170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fcbf 	bl	8008b02 <USBD_LL_Resume>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fd17 	bl	8008bd6 <USBD_LL_IsoOUTIncomplete>
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1c2:	78fa      	ldrb	r2, [r7, #3]
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fcd3 	bl	8008b72 <USBD_LL_IsoINIncomplete>
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fd29 	bl	8008c3a <USBD_LL_DevConnected>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fd26 	bl	8008c50 <USBD_LL_DevDisconnected>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d13c      	bne.n	800a296 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a21c:	4a20      	ldr	r2, [pc, #128]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a228:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a22c:	4b1c      	ldr	r3, [pc, #112]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a22e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a232:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a234:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a236:	2206      	movs	r2, #6
 800a238:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a23a:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a23c:	2202      	movs	r2, #2
 800a23e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a240:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a242:	2200      	movs	r2, #0
 800a244:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a246:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a248:	2202      	movs	r2, #2
 800a24a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a24c:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a24e:	2200      	movs	r2, #0
 800a250:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a254:	2200      	movs	r2, #0
 800a256:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a258:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a25e:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a260:	2200      	movs	r2, #0
 800a262:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a264:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a266:	2200      	movs	r2, #0
 800a268:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a26a:	480d      	ldr	r0, [pc, #52]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a26c:	f7f7 ff19 	bl	80020a2 <HAL_PCD_Init>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a276:	f7f6 fdfd 	bl	8000e74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a27a:	2180      	movs	r1, #128	; 0x80
 800a27c:	4808      	ldr	r0, [pc, #32]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a27e:	f7f9 f9a4 	bl	80035ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a282:	2240      	movs	r2, #64	; 0x40
 800a284:	2100      	movs	r1, #0
 800a286:	4806      	ldr	r0, [pc, #24]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a288:	f7f9 f958 	bl	800353c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a28c:	2280      	movs	r2, #128	; 0x80
 800a28e:	2101      	movs	r1, #1
 800a290:	4803      	ldr	r0, [pc, #12]	; (800a2a0 <USBD_LL_Init+0x94>)
 800a292:	f7f9 f953 	bl	800353c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20001880 	.word	0x20001880

0800a2a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f8 f815 	bl	80022ea <HAL_PCD_Start>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 f990 	bl	800a5ec <USBD_Get_USB_Status>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	70fb      	strb	r3, [r7, #3]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70bb      	strb	r3, [r7, #2]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a302:	78bb      	ldrb	r3, [r7, #2]
 800a304:	883a      	ldrh	r2, [r7, #0]
 800a306:	78f9      	ldrb	r1, [r7, #3]
 800a308:	f7f8 fd13 	bl	8002d32 <HAL_PCD_EP_Open>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f96a 	bl	800a5ec <USBD_Get_USB_Status>
 800a318:	4603      	mov	r3, r0
 800a31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7f8 fd5c 	bl	8002e02 <HAL_PCD_EP_Close>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 f94b 	bl	800a5ec <USBD_Get_USB_Status>
 800a356:	4603      	mov	r3, r0
 800a358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	4611      	mov	r1, r2
 800a382:	4618      	mov	r0, r3
 800a384:	f7f8 fe34 	bl	8002ff0 <HAL_PCD_EP_SetStall>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f92c 	bl	800a5ec <USBD_Get_USB_Status>
 800a394:	4603      	mov	r3, r0
 800a396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a398:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f8 fe79 	bl	80030b8 <HAL_PCD_EP_ClrStall>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f90d 	bl	800a5ec <USBD_Get_USB_Status>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	da0b      	bge.n	800a414 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	4613      	mov	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	333e      	adds	r3, #62	; 0x3e
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	e00b      	b.n	800a42c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	4613      	mov	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	440b      	add	r3, r1
 800a426:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a42a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a452:	78fa      	ldrb	r2, [r7, #3]
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f7f8 fc46 	bl	8002ce8 <HAL_PCD_SetAddress>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f8c2 	bl	800a5ec <USBD_Get_USB_Status>
 800a468:	4603      	mov	r3, r0
 800a46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
 800a482:	460b      	mov	r3, r1
 800a484:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a494:	7af9      	ldrb	r1, [r7, #11]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	f7f8 fd5f 	bl	8002f5c <HAL_PCD_EP_Transmit>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f8a1 	bl	800a5ec <USBD_Get_USB_Status>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a4d6:	7af9      	ldrb	r1, [r7, #11]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	f7f8 fcdb 	bl	8002e96 <HAL_PCD_EP_Receive>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 f880 	bl	800a5ec <USBD_Get_USB_Status>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7f8 fd0b 	bl	8002f2c <HAL_PCD_EP_GetRxCount>
 800a516:	4603      	mov	r3, r0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_PCDEx_LPM_Callback+0x18>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d01f      	beq.n	800a576 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a536:	e03b      	b.n	800a5b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a540:	f7f6 fc2c 	bl	8000d9c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a544:	4b1c      	ldr	r3, [pc, #112]	; (800a5b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	4a1b      	ldr	r2, [pc, #108]	; (800a5b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a54a:	f023 0306 	bic.w	r3, r3, #6
 800a54e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a562:	f023 0301 	bic.w	r3, r3, #1
 800a566:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fac7 	bl	8008b02 <USBD_LL_Resume>
    break;
 800a574:	e01c      	b.n	800a5b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fa9e 	bl	8008ad6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	4a04      	ldr	r2, [pc, #16]	; (800a5b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5a8:	f043 0306 	orr.w	r3, r3, #6
 800a5ac:	6113      	str	r3, [r2, #16]
    break;
 800a5ae:	bf00      	nop
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	e000ed00 	.word	0xe000ed00

0800a5bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5c4:	4b03      	ldr	r3, [pc, #12]	; (800a5d4 <USBD_static_malloc+0x18>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20001d8c 	.word	0x20001d8c

0800a5d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d817      	bhi.n	800a630 <USBD_Get_USB_Status+0x44>
 800a600:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBD_Get_USB_Status+0x1c>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a619 	.word	0x0800a619
 800a60c:	0800a61f 	.word	0x0800a61f
 800a610:	0800a625 	.word	0x0800a625
 800a614:	0800a62b 	.word	0x0800a62b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	e00b      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a61e:	2303      	movs	r3, #3
 800a620:	73fb      	strb	r3, [r7, #15]
    break;
 800a622:	e008      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
    break;
 800a628:	e005      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a62a:	2303      	movs	r3, #3
 800a62c:	73fb      	strb	r3, [r7, #15]
    break;
 800a62e:	e002      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
    break;
 800a634:	bf00      	nop
  }
  return usb_status;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <__libc_init_array>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4d0d      	ldr	r5, [pc, #52]	; (800a67c <__libc_init_array+0x38>)
 800a648:	4c0d      	ldr	r4, [pc, #52]	; (800a680 <__libc_init_array+0x3c>)
 800a64a:	1b64      	subs	r4, r4, r5
 800a64c:	10a4      	asrs	r4, r4, #2
 800a64e:	2600      	movs	r6, #0
 800a650:	42a6      	cmp	r6, r4
 800a652:	d109      	bne.n	800a668 <__libc_init_array+0x24>
 800a654:	4d0b      	ldr	r5, [pc, #44]	; (800a684 <__libc_init_array+0x40>)
 800a656:	4c0c      	ldr	r4, [pc, #48]	; (800a688 <__libc_init_array+0x44>)
 800a658:	f000 f820 	bl	800a69c <_init>
 800a65c:	1b64      	subs	r4, r4, r5
 800a65e:	10a4      	asrs	r4, r4, #2
 800a660:	2600      	movs	r6, #0
 800a662:	42a6      	cmp	r6, r4
 800a664:	d105      	bne.n	800a672 <__libc_init_array+0x2e>
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66c:	4798      	blx	r3
 800a66e:	3601      	adds	r6, #1
 800a670:	e7ee      	b.n	800a650 <__libc_init_array+0xc>
 800a672:	f855 3b04 	ldr.w	r3, [r5], #4
 800a676:	4798      	blx	r3
 800a678:	3601      	adds	r6, #1
 800a67a:	e7f2      	b.n	800a662 <__libc_init_array+0x1e>
 800a67c:	0800a71c 	.word	0x0800a71c
 800a680:	0800a71c 	.word	0x0800a71c
 800a684:	0800a71c 	.word	0x0800a71c
 800a688:	0800a720 	.word	0x0800a720

0800a68c <memset>:
 800a68c:	4402      	add	r2, r0
 800a68e:	4603      	mov	r3, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <_init>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr

0800a6a8 <_fini>:
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	bf00      	nop
 800a6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ae:	bc08      	pop	{r3}
 800a6b0:	469e      	mov	lr, r3
 800a6b2:	4770      	bx	lr
